
BLE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800566c  0800566c  0001566c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08005674  08005674  00015674  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  20000000  0800567c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b00  20000080  080056fc  00020080  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000b80  080056fc  00020b80  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   00035e5d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00005f5b  00000000  00000000  00055f0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00015cc2  00000000  00000000  0005be68  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00001b00  00000000  00000000  00071b30  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001ea8  00000000  00000000  00073630  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000ee23  00000000  00000000  000754d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000a648  00000000  00000000  000842fb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0008e943  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00005398  00000000  00000000  0008e9c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080055e8 	.word	0x080055e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	080055e8 	.word	0x080055e8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_d2f>:
 8000538:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800053c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000540:	bf24      	itt	cs
 8000542:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000546:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800054a:	d90d      	bls.n	8000568 <__aeabi_d2f+0x30>
 800054c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000550:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000554:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000558:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800055c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800056c:	d121      	bne.n	80005b2 <__aeabi_d2f+0x7a>
 800056e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000572:	bfbc      	itt	lt
 8000574:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000578:	4770      	bxlt	lr
 800057a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000582:	f1c2 0218 	rsb	r2, r2, #24
 8000586:	f1c2 0c20 	rsb	ip, r2, #32
 800058a:	fa10 f30c 	lsls.w	r3, r0, ip
 800058e:	fa20 f002 	lsr.w	r0, r0, r2
 8000592:	bf18      	it	ne
 8000594:	f040 0001 	orrne.w	r0, r0, #1
 8000598:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800059c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80005a0:	fa03 fc0c 	lsl.w	ip, r3, ip
 80005a4:	ea40 000c 	orr.w	r0, r0, ip
 80005a8:	fa23 f302 	lsr.w	r3, r3, r2
 80005ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80005b0:	e7cc      	b.n	800054c <__aeabi_d2f+0x14>
 80005b2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80005b6:	d107      	bne.n	80005c8 <__aeabi_d2f+0x90>
 80005b8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80005bc:	bf1e      	ittt	ne
 80005be:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80005c2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80005c6:	4770      	bxne	lr
 80005c8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80005cc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80005d0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <__aeabi_uldivmod>:
 80005d8:	b953      	cbnz	r3, 80005f0 <__aeabi_uldivmod+0x18>
 80005da:	b94a      	cbnz	r2, 80005f0 <__aeabi_uldivmod+0x18>
 80005dc:	2900      	cmp	r1, #0
 80005de:	bf08      	it	eq
 80005e0:	2800      	cmpeq	r0, #0
 80005e2:	bf1c      	itt	ne
 80005e4:	f04f 31ff 	movne.w	r1, #4294967295
 80005e8:	f04f 30ff 	movne.w	r0, #4294967295
 80005ec:	f000 b97a 	b.w	80008e4 <__aeabi_idiv0>
 80005f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80005f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80005f8:	f000 f806 	bl	8000608 <__udivmoddi4>
 80005fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000600:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000604:	b004      	add	sp, #16
 8000606:	4770      	bx	lr

08000608 <__udivmoddi4>:
 8000608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800060c:	468c      	mov	ip, r1
 800060e:	460d      	mov	r5, r1
 8000610:	4604      	mov	r4, r0
 8000612:	9e08      	ldr	r6, [sp, #32]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d151      	bne.n	80006bc <__udivmoddi4+0xb4>
 8000618:	428a      	cmp	r2, r1
 800061a:	4617      	mov	r7, r2
 800061c:	d96d      	bls.n	80006fa <__udivmoddi4+0xf2>
 800061e:	fab2 fe82 	clz	lr, r2
 8000622:	f1be 0f00 	cmp.w	lr, #0
 8000626:	d00b      	beq.n	8000640 <__udivmoddi4+0x38>
 8000628:	f1ce 0c20 	rsb	ip, lr, #32
 800062c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000630:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000634:	fa02 f70e 	lsl.w	r7, r2, lr
 8000638:	ea4c 0c05 	orr.w	ip, ip, r5
 800063c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000640:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000644:	0c25      	lsrs	r5, r4, #16
 8000646:	fbbc f8fa 	udiv	r8, ip, sl
 800064a:	fa1f f987 	uxth.w	r9, r7
 800064e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000652:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000656:	fb08 f309 	mul.w	r3, r8, r9
 800065a:	42ab      	cmp	r3, r5
 800065c:	d90a      	bls.n	8000674 <__udivmoddi4+0x6c>
 800065e:	19ed      	adds	r5, r5, r7
 8000660:	f108 32ff 	add.w	r2, r8, #4294967295
 8000664:	f080 8123 	bcs.w	80008ae <__udivmoddi4+0x2a6>
 8000668:	42ab      	cmp	r3, r5
 800066a:	f240 8120 	bls.w	80008ae <__udivmoddi4+0x2a6>
 800066e:	f1a8 0802 	sub.w	r8, r8, #2
 8000672:	443d      	add	r5, r7
 8000674:	1aed      	subs	r5, r5, r3
 8000676:	b2a4      	uxth	r4, r4
 8000678:	fbb5 f0fa 	udiv	r0, r5, sl
 800067c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000680:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000684:	fb00 f909 	mul.w	r9, r0, r9
 8000688:	45a1      	cmp	r9, r4
 800068a:	d909      	bls.n	80006a0 <__udivmoddi4+0x98>
 800068c:	19e4      	adds	r4, r4, r7
 800068e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000692:	f080 810a 	bcs.w	80008aa <__udivmoddi4+0x2a2>
 8000696:	45a1      	cmp	r9, r4
 8000698:	f240 8107 	bls.w	80008aa <__udivmoddi4+0x2a2>
 800069c:	3802      	subs	r0, #2
 800069e:	443c      	add	r4, r7
 80006a0:	eba4 0409 	sub.w	r4, r4, r9
 80006a4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80006a8:	2100      	movs	r1, #0
 80006aa:	2e00      	cmp	r6, #0
 80006ac:	d061      	beq.n	8000772 <__udivmoddi4+0x16a>
 80006ae:	fa24 f40e 	lsr.w	r4, r4, lr
 80006b2:	2300      	movs	r3, #0
 80006b4:	6034      	str	r4, [r6, #0]
 80006b6:	6073      	str	r3, [r6, #4]
 80006b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006bc:	428b      	cmp	r3, r1
 80006be:	d907      	bls.n	80006d0 <__udivmoddi4+0xc8>
 80006c0:	2e00      	cmp	r6, #0
 80006c2:	d054      	beq.n	800076e <__udivmoddi4+0x166>
 80006c4:	2100      	movs	r1, #0
 80006c6:	e886 0021 	stmia.w	r6, {r0, r5}
 80006ca:	4608      	mov	r0, r1
 80006cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d0:	fab3 f183 	clz	r1, r3
 80006d4:	2900      	cmp	r1, #0
 80006d6:	f040 808e 	bne.w	80007f6 <__udivmoddi4+0x1ee>
 80006da:	42ab      	cmp	r3, r5
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0xdc>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80fa 	bhi.w	80008d8 <__udivmoddi4+0x2d0>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb65 0503 	sbc.w	r5, r5, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	46ac      	mov	ip, r5
 80006ee:	2e00      	cmp	r6, #0
 80006f0:	d03f      	beq.n	8000772 <__udivmoddi4+0x16a>
 80006f2:	e886 1010 	stmia.w	r6, {r4, ip}
 80006f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006fa:	b912      	cbnz	r2, 8000702 <__udivmoddi4+0xfa>
 80006fc:	2701      	movs	r7, #1
 80006fe:	fbb7 f7f2 	udiv	r7, r7, r2
 8000702:	fab7 fe87 	clz	lr, r7
 8000706:	f1be 0f00 	cmp.w	lr, #0
 800070a:	d134      	bne.n	8000776 <__udivmoddi4+0x16e>
 800070c:	1beb      	subs	r3, r5, r7
 800070e:	0c3a      	lsrs	r2, r7, #16
 8000710:	fa1f fc87 	uxth.w	ip, r7
 8000714:	2101      	movs	r1, #1
 8000716:	fbb3 f8f2 	udiv	r8, r3, r2
 800071a:	0c25      	lsrs	r5, r4, #16
 800071c:	fb02 3318 	mls	r3, r2, r8, r3
 8000720:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000724:	fb0c f308 	mul.w	r3, ip, r8
 8000728:	42ab      	cmp	r3, r5
 800072a:	d907      	bls.n	800073c <__udivmoddi4+0x134>
 800072c:	19ed      	adds	r5, r5, r7
 800072e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000732:	d202      	bcs.n	800073a <__udivmoddi4+0x132>
 8000734:	42ab      	cmp	r3, r5
 8000736:	f200 80d1 	bhi.w	80008dc <__udivmoddi4+0x2d4>
 800073a:	4680      	mov	r8, r0
 800073c:	1aed      	subs	r5, r5, r3
 800073e:	b2a3      	uxth	r3, r4
 8000740:	fbb5 f0f2 	udiv	r0, r5, r2
 8000744:	fb02 5510 	mls	r5, r2, r0, r5
 8000748:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800074c:	fb0c fc00 	mul.w	ip, ip, r0
 8000750:	45a4      	cmp	ip, r4
 8000752:	d907      	bls.n	8000764 <__udivmoddi4+0x15c>
 8000754:	19e4      	adds	r4, r4, r7
 8000756:	f100 33ff 	add.w	r3, r0, #4294967295
 800075a:	d202      	bcs.n	8000762 <__udivmoddi4+0x15a>
 800075c:	45a4      	cmp	ip, r4
 800075e:	f200 80b8 	bhi.w	80008d2 <__udivmoddi4+0x2ca>
 8000762:	4618      	mov	r0, r3
 8000764:	eba4 040c 	sub.w	r4, r4, ip
 8000768:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800076c:	e79d      	b.n	80006aa <__udivmoddi4+0xa2>
 800076e:	4631      	mov	r1, r6
 8000770:	4630      	mov	r0, r6
 8000772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000776:	f1ce 0420 	rsb	r4, lr, #32
 800077a:	fa05 f30e 	lsl.w	r3, r5, lr
 800077e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000782:	fa20 f804 	lsr.w	r8, r0, r4
 8000786:	0c3a      	lsrs	r2, r7, #16
 8000788:	fa25 f404 	lsr.w	r4, r5, r4
 800078c:	ea48 0803 	orr.w	r8, r8, r3
 8000790:	fbb4 f1f2 	udiv	r1, r4, r2
 8000794:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000798:	fb02 4411 	mls	r4, r2, r1, r4
 800079c:	fa1f fc87 	uxth.w	ip, r7
 80007a0:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80007a4:	fb01 f30c 	mul.w	r3, r1, ip
 80007a8:	42ab      	cmp	r3, r5
 80007aa:	fa00 f40e 	lsl.w	r4, r0, lr
 80007ae:	d909      	bls.n	80007c4 <__udivmoddi4+0x1bc>
 80007b0:	19ed      	adds	r5, r5, r7
 80007b2:	f101 30ff 	add.w	r0, r1, #4294967295
 80007b6:	f080 808a 	bcs.w	80008ce <__udivmoddi4+0x2c6>
 80007ba:	42ab      	cmp	r3, r5
 80007bc:	f240 8087 	bls.w	80008ce <__udivmoddi4+0x2c6>
 80007c0:	3902      	subs	r1, #2
 80007c2:	443d      	add	r5, r7
 80007c4:	1aeb      	subs	r3, r5, r3
 80007c6:	fa1f f588 	uxth.w	r5, r8
 80007ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80007ce:	fb02 3310 	mls	r3, r2, r0, r3
 80007d2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80007d6:	fb00 f30c 	mul.w	r3, r0, ip
 80007da:	42ab      	cmp	r3, r5
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x1e6>
 80007de:	19ed      	adds	r5, r5, r7
 80007e0:	f100 38ff 	add.w	r8, r0, #4294967295
 80007e4:	d26f      	bcs.n	80008c6 <__udivmoddi4+0x2be>
 80007e6:	42ab      	cmp	r3, r5
 80007e8:	d96d      	bls.n	80008c6 <__udivmoddi4+0x2be>
 80007ea:	3802      	subs	r0, #2
 80007ec:	443d      	add	r5, r7
 80007ee:	1aeb      	subs	r3, r5, r3
 80007f0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80007f4:	e78f      	b.n	8000716 <__udivmoddi4+0x10e>
 80007f6:	f1c1 0720 	rsb	r7, r1, #32
 80007fa:	fa22 f807 	lsr.w	r8, r2, r7
 80007fe:	408b      	lsls	r3, r1
 8000800:	fa05 f401 	lsl.w	r4, r5, r1
 8000804:	ea48 0303 	orr.w	r3, r8, r3
 8000808:	fa20 fe07 	lsr.w	lr, r0, r7
 800080c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000810:	40fd      	lsrs	r5, r7
 8000812:	ea4e 0e04 	orr.w	lr, lr, r4
 8000816:	fbb5 f9fc 	udiv	r9, r5, ip
 800081a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800081e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000822:	fa1f f883 	uxth.w	r8, r3
 8000826:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800082a:	fb09 f408 	mul.w	r4, r9, r8
 800082e:	42ac      	cmp	r4, r5
 8000830:	fa02 f201 	lsl.w	r2, r2, r1
 8000834:	fa00 fa01 	lsl.w	sl, r0, r1
 8000838:	d908      	bls.n	800084c <__udivmoddi4+0x244>
 800083a:	18ed      	adds	r5, r5, r3
 800083c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000840:	d243      	bcs.n	80008ca <__udivmoddi4+0x2c2>
 8000842:	42ac      	cmp	r4, r5
 8000844:	d941      	bls.n	80008ca <__udivmoddi4+0x2c2>
 8000846:	f1a9 0902 	sub.w	r9, r9, #2
 800084a:	441d      	add	r5, r3
 800084c:	1b2d      	subs	r5, r5, r4
 800084e:	fa1f fe8e 	uxth.w	lr, lr
 8000852:	fbb5 f0fc 	udiv	r0, r5, ip
 8000856:	fb0c 5510 	mls	r5, ip, r0, r5
 800085a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800085e:	fb00 f808 	mul.w	r8, r0, r8
 8000862:	45a0      	cmp	r8, r4
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x26e>
 8000866:	18e4      	adds	r4, r4, r3
 8000868:	f100 35ff 	add.w	r5, r0, #4294967295
 800086c:	d229      	bcs.n	80008c2 <__udivmoddi4+0x2ba>
 800086e:	45a0      	cmp	r8, r4
 8000870:	d927      	bls.n	80008c2 <__udivmoddi4+0x2ba>
 8000872:	3802      	subs	r0, #2
 8000874:	441c      	add	r4, r3
 8000876:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800087a:	eba4 0408 	sub.w	r4, r4, r8
 800087e:	fba0 8902 	umull	r8, r9, r0, r2
 8000882:	454c      	cmp	r4, r9
 8000884:	46c6      	mov	lr, r8
 8000886:	464d      	mov	r5, r9
 8000888:	d315      	bcc.n	80008b6 <__udivmoddi4+0x2ae>
 800088a:	d012      	beq.n	80008b2 <__udivmoddi4+0x2aa>
 800088c:	b156      	cbz	r6, 80008a4 <__udivmoddi4+0x29c>
 800088e:	ebba 030e 	subs.w	r3, sl, lr
 8000892:	eb64 0405 	sbc.w	r4, r4, r5
 8000896:	fa04 f707 	lsl.w	r7, r4, r7
 800089a:	40cb      	lsrs	r3, r1
 800089c:	431f      	orrs	r7, r3
 800089e:	40cc      	lsrs	r4, r1
 80008a0:	6037      	str	r7, [r6, #0]
 80008a2:	6074      	str	r4, [r6, #4]
 80008a4:	2100      	movs	r1, #0
 80008a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008aa:	4618      	mov	r0, r3
 80008ac:	e6f8      	b.n	80006a0 <__udivmoddi4+0x98>
 80008ae:	4690      	mov	r8, r2
 80008b0:	e6e0      	b.n	8000674 <__udivmoddi4+0x6c>
 80008b2:	45c2      	cmp	sl, r8
 80008b4:	d2ea      	bcs.n	800088c <__udivmoddi4+0x284>
 80008b6:	ebb8 0e02 	subs.w	lr, r8, r2
 80008ba:	eb69 0503 	sbc.w	r5, r9, r3
 80008be:	3801      	subs	r0, #1
 80008c0:	e7e4      	b.n	800088c <__udivmoddi4+0x284>
 80008c2:	4628      	mov	r0, r5
 80008c4:	e7d7      	b.n	8000876 <__udivmoddi4+0x26e>
 80008c6:	4640      	mov	r0, r8
 80008c8:	e791      	b.n	80007ee <__udivmoddi4+0x1e6>
 80008ca:	4681      	mov	r9, r0
 80008cc:	e7be      	b.n	800084c <__udivmoddi4+0x244>
 80008ce:	4601      	mov	r1, r0
 80008d0:	e778      	b.n	80007c4 <__udivmoddi4+0x1bc>
 80008d2:	3802      	subs	r0, #2
 80008d4:	443c      	add	r4, r7
 80008d6:	e745      	b.n	8000764 <__udivmoddi4+0x15c>
 80008d8:	4608      	mov	r0, r1
 80008da:	e708      	b.n	80006ee <__udivmoddi4+0xe6>
 80008dc:	f1a8 0802 	sub.w	r8, r8, #2
 80008e0:	443d      	add	r5, r7
 80008e2:	e72b      	b.n	800073c <__udivmoddi4+0x134>

080008e4 <__aeabi_idiv0>:
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop

080008e8 <BSP_LED_Init>:
int32_t BSP_LED_Init(Led_TypeDef Led)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* LED2 is on the same GPIO Port */
  LED2_GPIO_CLK_ENABLE();    
 80008e8:	4b10      	ldr	r3, [pc, #64]	; (800092c <BSP_LED_Init+0x44>)
{
 80008ea:	b530      	push	{r4, r5, lr}
  LED2_GPIO_CLK_ENABLE();    
 80008ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Pin   = LED_PIN [Led];
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
  
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 80008ee:	4c10      	ldr	r4, [pc, #64]	; (8000930 <BSP_LED_Init+0x48>)
  LED2_GPIO_CLK_ENABLE();    
 80008f0:	f042 0202 	orr.w	r2, r2, #2
 80008f4:	64da      	str	r2, [r3, #76]	; 0x4c
 80008f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80008f8:	b087      	sub	sp, #28
  LED2_GPIO_CLK_ENABLE();    
 80008fa:	f003 0302 	and.w	r3, r3, #2
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000902:	2301      	movs	r3, #1
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8000904:	f44f 4580 	mov.w	r5, #16384	; 0x4000
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8000908:	9302      	str	r3, [sp, #8]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 800090a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 800090c:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 800090e:	2302      	movs	r3, #2
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8000910:	4620      	mov	r0, r4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; 
 8000912:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pin   = LED_PIN [Led];
 8000914:	9501      	str	r5, [sp, #4]
  HAL_GPIO_Init(LED_PORT [Led], &GPIO_InitStruct); 
 8000916:	f000 fa87 	bl	8000e28 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT [Led], LED_PIN [Led], GPIO_PIN_RESET);
 800091a:	4620      	mov	r0, r4
 800091c:	2200      	movs	r2, #0
 800091e:	4629      	mov	r1, r5
 8000920:	f000 fbee 	bl	8001100 <HAL_GPIO_WritePin>
  
  return BSP_ERROR_NONE;
}
 8000924:	2000      	movs	r0, #0
 8000926:	b007      	add	sp, #28
 8000928:	bd30      	pop	{r4, r5, pc}
 800092a:	bf00      	nop
 800092c:	40021000 	.word	0x40021000
 8000930:	48000400 	.word	0x48000400

08000934 <BSP_LED_Toggle>:
 *              @arg  LED3
 *              @arg  LED4
 * @retval HAL status
 */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8000934:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8000936:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800093a:	4802      	ldr	r0, [pc, #8]	; (8000944 <BSP_LED_Toggle+0x10>)
 800093c:	f000 fbe5 	bl	800110a <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8000940:	2000      	movs	r0, #0
 8000942:	bd08      	pop	{r3, pc}
 8000944:	48000400 	.word	0x48000400

08000948 <BSP_PB_Init>:
  static const BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_USER_EXTI_Callback};                                                
  static const uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_USER_IT_PRIORITY};  											     
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={USER_BUTTON_EXTI_LINE};
  
  /* Enable the BUTTON clock*/ 
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000948:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <BSP_PB_Init+0x80>)
{
 800094a:	b530      	push	{r4, r5, lr}
  USER_BUTTON_GPIO_CLK_ENABLE();
 800094c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800094e:	f042 0204 	orr.w	r2, r2, #4
 8000952:	64da      	str	r2, [r3, #76]	; 0x4c
 8000954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 8000956:	b087      	sub	sp, #28
  USER_BUTTON_GPIO_CLK_ENABLE();
 8000958:	f003 0304 	and.w	r3, r3, #4
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	9b00      	ldr	r3, [sp, #0]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000960:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000964:	9301      	str	r3, [sp, #4]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000966:	2302      	movs	r3, #2
{
 8000968:	4605      	mov	r5, r0
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800096a:	9303      	str	r3, [sp, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800096c:	9304      	str	r3, [sp, #16]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 800096e:	460c      	mov	r4, r1
 8000970:	b931      	cbnz	r1, 8000980 <BSP_PB_Init+0x38>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000972:	9102      	str	r1, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000974:	4815      	ldr	r0, [pc, #84]	; (80009cc <BSP_PB_Init+0x84>)
 8000976:	a901      	add	r1, sp, #4
 8000978:	f000 fa56 	bl	8000e28 <HAL_GPIO_Init>
  int32_t ret = BSP_ERROR_NONE;
 800097c:	4620      	mov	r0, r4
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
	}
  }
  
  return ret;
 800097e:	e010      	b.n	80009a2 <BSP_PB_Init+0x5a>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000980:	4c13      	ldr	r4, [pc, #76]	; (80009d0 <BSP_PB_Init+0x88>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000982:	4b14      	ldr	r3, [pc, #80]	; (80009d4 <BSP_PB_Init+0x8c>)
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000984:	4811      	ldr	r0, [pc, #68]	; (80009cc <BSP_PB_Init+0x84>)
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000986:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000988:	a901      	add	r1, sp, #4
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 800098a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800098e:	f000 fa4b 	bl	8000e28 <HAL_GPIO_Init>
    if(HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]) != HAL_OK)
 8000992:	4911      	ldr	r1, [pc, #68]	; (80009d8 <BSP_PB_Init+0x90>)
 8000994:	4620      	mov	r0, r4
 8000996:	f000 fa29 	bl	8000dec <HAL_EXTI_GetHandle>
 800099a:	4601      	mov	r1, r0
 800099c:	b118      	cbz	r0, 80009a6 <BSP_PB_Init+0x5e>
      ret = BSP_ERROR_PERIPH_FAILURE;
 800099e:	f06f 0003 	mvn.w	r0, #3
}
 80009a2:	b007      	add	sp, #28
 80009a4:	bd30      	pop	{r4, r5, pc}
    else if (HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]) != HAL_OK)
 80009a6:	4620      	mov	r0, r4
 80009a8:	4a0c      	ldr	r2, [pc, #48]	; (80009dc <BSP_PB_Init+0x94>)
 80009aa:	f000 fa19 	bl	8000de0 <HAL_EXTI_RegisterCallback>
 80009ae:	4604      	mov	r4, r0
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1f4      	bne.n	800099e <BSP_PB_Init+0x56>
      HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80009b4:	4602      	mov	r2, r0
 80009b6:	210f      	movs	r1, #15
 80009b8:	2028      	movs	r0, #40	; 0x28
 80009ba:	f000 f8f3 	bl	8000ba4 <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80009be:	2028      	movs	r0, #40	; 0x28
 80009c0:	f000 f924 	bl	8000c0c <HAL_NVIC_EnableIRQ>
 80009c4:	e7da      	b.n	800097c <BSP_PB_Init+0x34>
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800
 80009d0:	20000004 	.word	0x20000004
 80009d4:	10110000 	.word	0x10110000
 80009d8:	1600000d 	.word	0x1600000d
 80009dc:	080009f9 	.word	0x080009f9

080009e0 <BSP_PB_GetState>:
 *                This parameter can be one of the following values:
 *                @arg  BUTTON_USER
 * @retval The Button GPIO pin value (GPIO_PIN_RESET = button pressed)
 */
int32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80009e0:	b508      	push	{r3, lr}
  return (int32_t)(HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]) == GPIO_PIN_RESET);
 80009e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <BSP_PB_GetState+0x14>)
 80009e8:	f000 fb84 	bl	80010f4 <HAL_GPIO_ReadPin>
}
 80009ec:	fab0 f080 	clz	r0, r0
 80009f0:	0940      	lsrs	r0, r0, #5
 80009f2:	bd08      	pop	{r3, pc}
 80009f4:	48000800 	.word	0x48000800

080009f8 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  User EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_USER_EXTI_Callback(void)
{   
 80009f8:	b508      	push	{r3, lr}
  BSP_PB_Callback(BUTTON_USER);
 80009fa:	2000      	movs	r0, #0
 80009fc:	f003 fc2c 	bl	8004258 <BSP_PB_Callback>
 8000a00:	bd08      	pop	{r3, pc}
	...

08000a04 <MX_USART1_UART_Init>:

__weak HAL_StatusTypeDef MX_USART1_UART_Init(UART_HandleTypeDef* huart)
{
  HAL_StatusTypeDef ret = HAL_OK;
  huart->Instance = USART1;
  huart->Init.BaudRate = 115200;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <MX_USART1_UART_Init+0x2c>)
 8000a06:	f44f 3ce1 	mov.w	ip, #115200	; 0x1c200
{
 8000a0a:	b508      	push	{r3, lr}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
  huart->Init.StopBits = UART_STOPBITS_1;
  huart->Init.Parity = UART_PARITY_NONE;
  huart->Init.Mode = UART_MODE_TX_RX;
 8000a0c:	210c      	movs	r1, #12
  huart->Init.BaudRate = 115200;
 8000a0e:	e880 1004 	stmia.w	r0, {r2, ip}
  huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	2200      	movs	r2, #0
 8000a14:	6082      	str	r2, [r0, #8]
  huart->Init.StopBits = UART_STOPBITS_1;
 8000a16:	60c2      	str	r2, [r0, #12]
  huart->Init.Parity = UART_PARITY_NONE;
 8000a18:	6102      	str	r2, [r0, #16]
  huart->Init.Mode = UART_MODE_TX_RX;
 8000a1a:	6141      	str	r1, [r0, #20]
  huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a1c:	6182      	str	r2, [r0, #24]
  huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1e:	61c2      	str	r2, [r0, #28]
  huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a20:	6202      	str	r2, [r0, #32]
  huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a22:	6242      	str	r2, [r0, #36]	; 0x24
  if (HAL_UART_Init(huart) != HAL_OK)
 8000a24:	f002 f9ab 	bl	8002d7e <HAL_UART_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 8000a28:	3000      	adds	r0, #0
 8000a2a:	bf18      	it	ne
 8000a2c:	2001      	movne	r0, #1
 8000a2e:	bd08      	pop	{r3, pc}
 8000a30:	40013800 	.word	0x40013800

08000a34 <BSP_COM_Init>:
{
 8000a34:	b530      	push	{r4, r5, lr}
  if(COM > COMn)
 8000a36:	2801      	cmp	r0, #1
{
 8000a38:	b089      	sub	sp, #36	; 0x24
  if(COM > COMn)
 8000a3a:	d839      	bhi.n	8000ab0 <BSP_COM_Init+0x7c>
     hcom_uart[COM].Instance = COM_USART[COM];
 8000a3c:	491e      	ldr	r1, [pc, #120]	; (8000ab8 <BSP_COM_Init+0x84>)
 8000a3e:	4a1f      	ldr	r2, [pc, #124]	; (8000abc <BSP_COM_Init+0x88>)
 8000a40:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8000a44:	01c3      	lsls	r3, r0, #7
 8000a46:	18d4      	adds	r4, r2, r3
 8000a48:	50d1      	str	r1, [r2, r3]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <BSP_COM_Init+0x8c>)
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	481d      	ldr	r0, [pc, #116]	; (8000ac4 <BSP_COM_Init+0x90>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000a54:	661a      	str	r2, [r3, #96]	; 0x60
 8000a56:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a58:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000a5c:	9201      	str	r2, [sp, #4]
 8000a5e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a62:	f042 0202 	orr.w	r2, r2, #2
 8000a66:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6a:	f003 0302 	and.w	r3, r3, #2
 8000a6e:	9302      	str	r3, [sp, #8]
 8000a70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8000a72:	23c0      	movs	r3, #192	; 0xc0
 8000a74:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a76:	2302      	movs	r3, #2
 8000a78:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2500      	movs	r5, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a7e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a80:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a82:	2307      	movs	r3, #7
 8000a84:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a86:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f000 f9ce 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000a8c:	462a      	mov	r2, r5
 8000a8e:	4629      	mov	r1, r5
 8000a90:	2025      	movs	r0, #37	; 0x25
 8000a92:	f000 f887 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a96:	2025      	movs	r0, #37	; 0x25
 8000a98:	f000 f8b8 	bl	8000c0c <HAL_NVIC_EnableIRQ>
    if (MX_USART1_UART_Init(&hcom_uart[COM]))
 8000a9c:	4620      	mov	r0, r4
 8000a9e:	f7ff ffb1 	bl	8000a04 <MX_USART1_UART_Init>
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000aa2:	42a8      	cmp	r0, r5
 8000aa4:	bf0c      	ite	eq
 8000aa6:	4628      	moveq	r0, r5
 8000aa8:	f06f 0003 	mvnne.w	r0, #3
}
 8000aac:	b009      	add	sp, #36	; 0x24
 8000aae:	bd30      	pop	{r4, r5, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8000ab0:	f06f 0001 	mvn.w	r0, #1
 8000ab4:	e7fa      	b.n	8000aac <BSP_COM_Init+0x78>
 8000ab6:	bf00      	nop
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200004f8 	.word	0x200004f8
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000400 	.word	0x48000400

08000ac8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ac8:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8000aca:	4b0f      	ldr	r3, [pc, #60]	; (8000b08 <HAL_InitTick+0x40>)
{
 8000acc:	4605      	mov	r5, r0
  if (uwTickFreq != 0U)
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	b908      	cbnz	r0, 8000ad6 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
 8000ad4:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ad6:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <HAL_InitTick+0x44>)
 8000ad8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000adc:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ae0:	6810      	ldr	r0, [r2, #0]
 8000ae2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ae6:	f000 f89f 	bl	8000c28 <HAL_SYSTICK_Config>
 8000aea:	4604      	mov	r4, r0
 8000aec:	2800      	cmp	r0, #0
 8000aee:	d1f0      	bne.n	8000ad2 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af0:	2d0f      	cmp	r5, #15
 8000af2:	d8ee      	bhi.n	8000ad2 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000af4:	4602      	mov	r2, r0
 8000af6:	4629      	mov	r1, r5
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f000 f852 	bl	8000ba4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b00:	4b03      	ldr	r3, [pc, #12]	; (8000b10 <HAL_InitTick+0x48>)
 8000b02:	4620      	mov	r0, r4
 8000b04:	601d      	str	r5, [r3, #0]
  }

  /* Return function status */
  return status;
}
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
 8000b08:	2000000c 	.word	0x2000000c
 8000b0c:	20000018 	.word	0x20000018
 8000b10:	20000010 	.word	0x20000010

08000b14 <HAL_Init>:
{
 8000b14:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f832 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f7ff ffd3 	bl	8000ac8 <HAL_InitTick>
 8000b22:	4604      	mov	r4, r0
 8000b24:	b918      	cbnz	r0, 8000b2e <HAL_Init+0x1a>
    HAL_MspInit();
 8000b26:	f004 fa65 	bl	8004ff4 <HAL_MspInit>
}
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8000b2e:	2401      	movs	r4, #1
 8000b30:	e7fb      	b.n	8000b2a <HAL_Init+0x16>
	...

08000b34 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b34:	4a03      	ldr	r2, [pc, #12]	; (8000b44 <HAL_IncTick+0x10>)
 8000b36:	4904      	ldr	r1, [pc, #16]	; (8000b48 <HAL_IncTick+0x14>)
 8000b38:	6813      	ldr	r3, [r2, #0]
 8000b3a:	6809      	ldr	r1, [r1, #0]
 8000b3c:	440b      	add	r3, r1
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20000578 	.word	0x20000578
 8000b48:	2000000c 	.word	0x2000000c

08000b4c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000b4c:	4b01      	ldr	r3, [pc, #4]	; (8000b54 <HAL_GetTick+0x8>)
 8000b4e:	6818      	ldr	r0, [r3, #0]
}
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop
 8000b54:	20000578 	.word	0x20000578

08000b58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b58:	b538      	push	{r3, r4, r5, lr}
 8000b5a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff fff6 	bl	8000b4c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b60:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	bf1c      	itt	ne
 8000b64:	4b05      	ldrne	r3, [pc, #20]	; (8000b7c <HAL_Delay+0x24>)
 8000b66:	681b      	ldrne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000b68:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	bf18      	it	ne
 8000b6c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b6e:	f7ff ffed 	bl	8000b4c <HAL_GetTick>
 8000b72:	1b40      	subs	r0, r0, r5
 8000b74:	4284      	cmp	r4, r0
 8000b76:	d8fa      	bhi.n	8000b6e <HAL_Delay+0x16>
  {
  }
}
 8000b78:	bd38      	pop	{r3, r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	2000000c 	.word	0x2000000c

08000b80 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b80:	4a07      	ldr	r2, [pc, #28]	; (8000ba0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b82:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b84:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b88:	041b      	lsls	r3, r3, #16
 8000b8a:	0c1b      	lsrs	r3, r3, #16
 8000b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b90:	0200      	lsls	r0, r0, #8
 8000b92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b96:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000b9a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000b9c:	60d3      	str	r3, [r2, #12]
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba6:	b530      	push	{r4, r5, lr}
 8000ba8:	68dc      	ldr	r4, [r3, #12]
 8000baa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bb2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bb4:	2b04      	cmp	r3, #4
 8000bb6:	bf28      	it	cs
 8000bb8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	f04f 0501 	mov.w	r5, #1
 8000bc0:	fa05 f303 	lsl.w	r3, r5, r3
 8000bc4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc8:	bf8c      	ite	hi
 8000bca:	3c03      	subhi	r4, #3
 8000bcc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bce:	4019      	ands	r1, r3
 8000bd0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bd2:	fa05 f404 	lsl.w	r4, r5, r4
 8000bd6:	3c01      	subs	r4, #1
 8000bd8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8000bda:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bdc:	ea42 0201 	orr.w	r2, r2, r1
 8000be0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	bfad      	iteet	ge
 8000be6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bea:	f000 000f 	andlt.w	r0, r0, #15
 8000bee:	4b06      	ldrlt	r3, [pc, #24]	; (8000c08 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf4:	bfb5      	itete	lt
 8000bf6:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c00:	bd30      	pop	{r4, r5, pc}
 8000c02:	bf00      	nop
 8000c04:	e000ed00 	.word	0xe000ed00
 8000c08:	e000ed14 	.word	0xe000ed14

08000c0c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	2800      	cmp	r0, #0
 8000c0e:	db08      	blt.n	8000c22 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c10:	0942      	lsrs	r2, r0, #5
 8000c12:	2301      	movs	r3, #1
 8000c14:	f000 001f 	and.w	r0, r0, #31
 8000c18:	fa03 f000 	lsl.w	r0, r3, r0
 8000c1c:	4b01      	ldr	r3, [pc, #4]	; (8000c24 <HAL_NVIC_EnableIRQ+0x18>)
 8000c1e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c22:	4770      	bx	lr
 8000c24:	e000e100 	.word	0xe000e100

08000c28 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	3801      	subs	r0, #1
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d20a      	bcs.n	8000c46 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c34:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c36:	21f0      	movs	r1, #240	; 0xf0
 8000c38:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c3c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c40:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c42:	601a      	str	r2, [r3, #0]
 8000c44:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c46:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	e000e010 	.word	0xe000e010
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <DFSDM_GetChannelFromInstance>:
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <DFSDM_GetChannelFromInstance+0x54>)
 8000c56:	4298      	cmp	r0, r3
 8000c58:	d017      	beq.n	8000c8a <DFSDM_GetChannelFromInstance+0x36>
  {
    channel = 0;
  }
  else if (Instance == DFSDM1_Channel1)
 8000c5a:	3320      	adds	r3, #32
 8000c5c:	4298      	cmp	r0, r3
 8000c5e:	d016      	beq.n	8000c8e <DFSDM_GetChannelFromInstance+0x3a>
  {
    channel = 1;
  }
  else if (Instance == DFSDM1_Channel2)
 8000c60:	3320      	adds	r3, #32
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d015      	beq.n	8000c92 <DFSDM_GetChannelFromInstance+0x3e>
  {
    channel = 2;
  }
  else if (Instance == DFSDM1_Channel3)
 8000c66:	3320      	adds	r3, #32
 8000c68:	4298      	cmp	r0, r3
 8000c6a:	d014      	beq.n	8000c96 <DFSDM_GetChannelFromInstance+0x42>
    channel = 3;
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000c6c:	3320      	adds	r3, #32
 8000c6e:	4298      	cmp	r0, r3
 8000c70:	d013      	beq.n	8000c9a <DFSDM_GetChannelFromInstance+0x46>
  {
    channel = 4;
  }
  else if (Instance == DFSDM1_Channel5)
 8000c72:	3320      	adds	r3, #32
 8000c74:	4298      	cmp	r0, r3
 8000c76:	d012      	beq.n	8000c9e <DFSDM_GetChannelFromInstance+0x4a>
  {
    channel = 5;
  }
  else if (Instance == DFSDM1_Channel6)
 8000c78:	3320      	adds	r3, #32
 8000c7a:	4298      	cmp	r0, r3
 8000c7c:	d011      	beq.n	8000ca2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 6;
  }
  else if (Instance == DFSDM1_Channel7)
  {
    channel = 7;
 8000c7e:	3320      	adds	r3, #32
 8000c80:	4298      	cmp	r0, r3
 8000c82:	bf0c      	ite	eq
 8000c84:	2007      	moveq	r0, #7
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bx	lr
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else
  {
    channel = 0;
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	4770      	bx	lr
    channel = 1;
 8000c8e:	2001      	movs	r0, #1
 8000c90:	4770      	bx	lr
    channel = 2;
 8000c92:	2002      	movs	r0, #2
 8000c94:	4770      	bx	lr
    channel = 3;
 8000c96:	2003      	movs	r0, #3
 8000c98:	4770      	bx	lr
    channel = 4;
 8000c9a:	2004      	movs	r0, #4
 8000c9c:	4770      	bx	lr
    channel = 5;
 8000c9e:	2005      	movs	r0, #5
 8000ca0:	4770      	bx	lr
    channel = 6;
 8000ca2:	2006      	movs	r0, #6
  }

  return channel;
}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40016000 	.word	0x40016000

08000cac <HAL_DFSDM_ChannelInit>:
{
 8000cac:	b538      	push	{r3, r4, r5, lr}
  if (hdfsdm_channel == NULL)
 8000cae:	4604      	mov	r4, r0
 8000cb0:	2800      	cmp	r0, #0
 8000cb2:	d067      	beq.n	8000d84 <HAL_DFSDM_ChannelInit+0xd8>
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000cb4:	6800      	ldr	r0, [r0, #0]
 8000cb6:	4d34      	ldr	r5, [pc, #208]	; (8000d88 <HAL_DFSDM_ChannelInit+0xdc>)
 8000cb8:	f7ff ffcc 	bl	8000c54 <DFSDM_GetChannelFromInstance>
 8000cbc:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d15f      	bne.n	8000d84 <HAL_DFSDM_ChannelInit+0xd8>
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f004 f9ad 	bl	8005024 <HAL_DFSDM_ChannelMspInit>
  v_dfsdm1ChannelCounter++;
 8000cca:	4b30      	ldr	r3, [pc, #192]	; (8000d8c <HAL_DFSDM_ChannelInit+0xe0>)
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	3201      	adds	r2, #1
 8000cd0:	601a      	str	r2, [r3, #0]
  if (v_dfsdm1ChannelCounter == 1U)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	2b01      	cmp	r3, #1
 8000cd6:	d119      	bne.n	8000d0c <HAL_DFSDM_ChannelInit+0x60>
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000cd8:	4b2d      	ldr	r3, [pc, #180]	; (8000d90 <HAL_DFSDM_ChannelInit+0xe4>)
 8000cda:	681a      	ldr	r2, [r3, #0]
 8000cdc:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8000ce0:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68a1      	ldr	r1, [r4, #8]
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000cea:	681a      	ldr	r2, [r3, #0]
 8000cec:	f422 027f 	bic.w	r2, r2, #16711680	; 0xff0000
 8000cf0:	601a      	str	r2, [r3, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000cf2:	7922      	ldrb	r2, [r4, #4]
 8000cf4:	2a01      	cmp	r2, #1
 8000cf6:	d105      	bne.n	8000d04 <HAL_DFSDM_ChannelInit+0x58>
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000cf8:	68e1      	ldr	r1, [r4, #12]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	3901      	subs	r1, #1
 8000cfe:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d02:	601a      	str	r2, [r3, #0]
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000d0a:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000d0c:	6820      	ldr	r0, [r4, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000d0e:	6961      	ldr	r1, [r4, #20]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000d10:	6803      	ldr	r3, [r0, #0]
 8000d12:	f423 4371 	bic.w	r3, r3, #61696	; 0xf100
 8000d16:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000d18:	6923      	ldr	r3, [r4, #16]
 8000d1a:	6802      	ldr	r2, [r0, #0]
 8000d1c:	430b      	orrs	r3, r1
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000d1e:	69a1      	ldr	r1, [r4, #24]
 8000d20:	430b      	orrs	r3, r1
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000d22:	4313      	orrs	r3, r2
 8000d24:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d26:	6803      	ldr	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000d28:	6a21      	ldr	r1, [r4, #32]
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000d2a:	f023 030f 	bic.w	r3, r3, #15
 8000d2e:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000d30:	69e3      	ldr	r3, [r4, #28]
 8000d32:	6802      	ldr	r2, [r0, #0]
 8000d34:	430b      	orrs	r3, r1
 8000d36:	4313      	orrs	r3, r2
 8000d38:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d3a:	6883      	ldr	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d3e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000d40:	f423 035f 	bic.w	r3, r3, #14614528	; 0xdf0000
 8000d44:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d46:	6883      	ldr	r3, [r0, #8]
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000d48:	3a01      	subs	r2, #1
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000d4a:	430b      	orrs	r3, r1
 8000d4c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d50:	6083      	str	r3, [r0, #8]
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000d52:	6843      	ldr	r3, [r0, #4]
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000d54:	6b22      	ldr	r2, [r4, #48]	; 0x30
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000d5c:	6843      	ldr	r3, [r0, #4]
 8000d5e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d62:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d64:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000d68:	6043      	str	r3, [r0, #4]
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000d6a:	6803      	ldr	r3, [r0, #0]
 8000d6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d70:	6003      	str	r3, [r0, #0]
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000d72:	2301      	movs	r3, #1
 8000d74:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000d78:	f7ff ff6c 	bl	8000c54 <DFSDM_GetChannelFromInstance>
 8000d7c:	f845 4020 	str.w	r4, [r5, r0, lsl #2]
  return HAL_OK;
 8000d80:	2000      	movs	r0, #0
 8000d82:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000d84:	2001      	movs	r0, #1
}
 8000d86:	bd38      	pop	{r3, r4, r5, pc}
 8000d88:	2000009c 	.word	0x2000009c
 8000d8c:	200000bc 	.word	0x200000bc
 8000d90:	40016000 	.word	0x40016000

08000d94 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d94:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8000d98:	2a02      	cmp	r2, #2
{
 8000d9a:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d9c:	d003      	beq.n	8000da6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d9e:	2204      	movs	r2, #4
 8000da0:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 8000da2:	2001      	movs	r0, #1
 8000da4:	bd10      	pop	{r4, pc}
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da6:	6802      	ldr	r2, [r0, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000da8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000daa:	6811      	ldr	r1, [r2, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000dac:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dae:	f021 010e 	bic.w	r1, r1, #14
 8000db2:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8000db4:	6811      	ldr	r1, [r2, #0]
 8000db6:	f021 0101 	bic.w	r1, r1, #1
 8000dba:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000dbc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	f002 021c 	and.w	r2, r2, #28
 8000dc4:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000dca:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000dcc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000dd0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 8000dd4:	b113      	cbz	r3, 8000ddc <HAL_DMA_Abort_IT+0x48>
    {
      hdma->XferAbortCallback(hdma);
 8000dd6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000dd8:	4620      	mov	r0, r4
 8000dda:	bd10      	pop	{r4, pc}
 8000ddc:	4618      	mov	r0, r3
    }
  }
  return status;
}
 8000dde:	bd10      	pop	{r4, pc}

08000de0 <HAL_EXTI_RegisterCallback>:
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
  HAL_StatusTypeDef status = HAL_OK;

  switch (CallbackID)
 8000de0:	b911      	cbnz	r1, 8000de8 <HAL_EXTI_RegisterCallback+0x8>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8000de2:	6042      	str	r2, [r0, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000de4:	4608      	mov	r0, r1
      break;
 8000de6:	4770      	bx	lr

    default:
      status = HAL_ERROR;
 8000de8:	2001      	movs	r0, #1
      break;
  }

  return status;
}
 8000dea:	4770      	bx	lr

08000dec <HAL_EXTI_GetHandle>:
{
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8000dec:	b110      	cbz	r0, 8000df4 <HAL_EXTI_GetHandle+0x8>
    return HAL_ERROR;
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8000dee:	6001      	str	r1, [r0, #0]

    return HAL_OK;
 8000df0:	2000      	movs	r0, #0
 8000df2:	4770      	bx	lr
    return HAL_ERROR;
 8000df4:	2001      	movs	r0, #1
  }
}
 8000df6:	4770      	bx	lr

08000df8 <HAL_EXTI_IRQHandler>:
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000df8:	6803      	ldr	r3, [r0, #0]
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f003 011f 	and.w	r1, r3, #31
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8000e00:	f3c3 4300 	ubfx	r3, r3, #16, #1
  maskline = (1uL << (hexti->Line & EXTI_PIN_MASK));
 8000e04:	408a      	lsls	r2, r1

  /* Get pending bit  */
  regaddr = (&EXTI->PR1 + (EXTI_CONFIG_OFFSET * offset));
 8000e06:	015b      	lsls	r3, r3, #5
 8000e08:	4906      	ldr	r1, [pc, #24]	; (8000e24 <HAL_EXTI_IRQHandler+0x2c>)
{
 8000e0a:	b410      	push	{r4}
  regval = (*regaddr & maskline);
 8000e0c:	585c      	ldr	r4, [r3, r1]

  if (regval != 0x00u)
 8000e0e:	4222      	tst	r2, r4
 8000e10:	d005      	beq.n	8000e1e <HAL_EXTI_IRQHandler+0x26>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8000e12:	505a      	str	r2, [r3, r1]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8000e14:	6843      	ldr	r3, [r0, #4]
 8000e16:	b113      	cbz	r3, 8000e1e <HAL_EXTI_IRQHandler+0x26>
    {
      hexti->PendingCallback();
    }
  }
}
 8000e18:	f85d 4b04 	ldr.w	r4, [sp], #4
      hexti->PendingCallback();
 8000e1c:	4718      	bx	r3
}
 8000e1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	40010414 	.word	0x40010414

08000e28 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e2c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e2e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e30:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000fdc <HAL_GPIO_Init+0x1b4>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000e34:	4c67      	ldr	r4, [pc, #412]	; (8000fd4 <HAL_GPIO_Init+0x1ac>)
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e36:	9301      	str	r3, [sp, #4]
  uint32_t position = 0x00u;
 8000e38:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e3a:	9a01      	ldr	r2, [sp, #4]
 8000e3c:	40da      	lsrs	r2, r3
 8000e3e:	d102      	bne.n	8000e46 <HAL_GPIO_Init+0x1e>
      }
    }

    position++;
  }
}
 8000e40:	b005      	add	sp, #20
 8000e42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e46:	2601      	movs	r6, #1
    if (iocurrent != 0x00u)
 8000e48:	9a01      	ldr	r2, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e4a:	409e      	lsls	r6, r3
    if (iocurrent != 0x00u)
 8000e4c:	ea12 0e06 	ands.w	lr, r2, r6
 8000e50:	f000 80b1 	beq.w	8000fb6 <HAL_GPIO_Init+0x18e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e54:	684a      	ldr	r2, [r1, #4]
 8000e56:	f022 0710 	bic.w	r7, r2, #16
 8000e5a:	2f02      	cmp	r7, #2
 8000e5c:	d116      	bne.n	8000e8c <HAL_GPIO_Init+0x64>
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 8000e62:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e66:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8000e6a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8000e72:	f04f 0c0f 	mov.w	ip, #15
 8000e76:	fa0c fc0a 	lsl.w	ip, ip, sl
 8000e7a:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e7e:	690d      	ldr	r5, [r1, #16]
 8000e80:	fa05 f50a 	lsl.w	r5, r5, sl
 8000e84:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8000e88:	f8c9 5020 	str.w	r5, [r9, #32]
 8000e8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e90:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000e92:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e96:	fa05 f50c 	lsl.w	r5, r5, ip
 8000e9a:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e9c:	f002 0a03 	and.w	sl, r2, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ea0:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ea4:	fa0a f90c 	lsl.w	r9, sl, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ea8:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eaa:	ea49 090b 	orr.w	r9, r9, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eae:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000eb0:	f8c0 9000 	str.w	r9, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	d811      	bhi.n	8000eda <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR;
 8000eb6:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eb8:	ea05 0907 	and.w	r9, r5, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ebc:	68cf      	ldr	r7, [r1, #12]
 8000ebe:	fa07 f70c 	lsl.w	r7, r7, ip
 8000ec2:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8000ec6:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000ec8:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eca:	ea27 0906 	bic.w	r9, r7, r6
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000ece:	f3c2 1700 	ubfx	r7, r2, #4, #1
 8000ed2:	409f      	lsls	r7, r3
 8000ed4:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OTYPER = temp;
 8000ed8:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000eda:	f1ba 0f03 	cmp.w	sl, #3
 8000ede:	d107      	bne.n	8000ef0 <HAL_GPIO_Init+0xc8>
        temp = GPIOx->ASCR;
 8000ee0:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ee2:	ea27 0606 	bic.w	r6, r7, r6
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000ee6:	f3c2 07c0 	ubfx	r7, r2, #3, #1
 8000eea:	409f      	lsls	r7, r3
 8000eec:	433e      	orrs	r6, r7
        GPIOx->ASCR = temp;
 8000eee:	62c6      	str	r6, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8000ef0:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ef2:	4035      	ands	r5, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ef4:	688e      	ldr	r6, [r1, #8]
 8000ef6:	fa06 f60c 	lsl.w	r6, r6, ip
 8000efa:	4335      	orrs	r5, r6
      GPIOx->PUPDR = temp;
 8000efc:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000efe:	00d5      	lsls	r5, r2, #3
 8000f00:	d559      	bpl.n	8000fb6 <HAL_GPIO_Init+0x18e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f06:	f045 0501 	orr.w	r5, r5, #1
 8000f0a:	f8c8 5060 	str.w	r5, [r8, #96]	; 0x60
 8000f0e:	f8d8 5060 	ldr.w	r5, [r8, #96]	; 0x60
 8000f12:	f023 0603 	bic.w	r6, r3, #3
 8000f16:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000f1a:	f005 0501 	and.w	r5, r5, #1
 8000f1e:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8000f22:	9503      	str	r5, [sp, #12]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f24:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f28:	9d03      	ldr	r5, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 8000f2a:	68b5      	ldr	r5, [r6, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f2c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000f30:	270f      	movs	r7, #15
 8000f32:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f36:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3a:	ea25 0707 	bic.w	r7, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3e:	d03c      	beq.n	8000fba <HAL_GPIO_Init+0x192>
 8000f40:	4d25      	ldr	r5, [pc, #148]	; (8000fd8 <HAL_GPIO_Init+0x1b0>)
 8000f42:	42a8      	cmp	r0, r5
 8000f44:	d03b      	beq.n	8000fbe <HAL_GPIO_Init+0x196>
 8000f46:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f4a:	42a8      	cmp	r0, r5
 8000f4c:	d039      	beq.n	8000fc2 <HAL_GPIO_Init+0x19a>
 8000f4e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f52:	42a8      	cmp	r0, r5
 8000f54:	d037      	beq.n	8000fc6 <HAL_GPIO_Init+0x19e>
 8000f56:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f5a:	42a8      	cmp	r0, r5
 8000f5c:	d035      	beq.n	8000fca <HAL_GPIO_Init+0x1a2>
 8000f5e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f62:	42a8      	cmp	r0, r5
 8000f64:	d033      	beq.n	8000fce <HAL_GPIO_Init+0x1a6>
 8000f66:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f6a:	42a8      	cmp	r0, r5
 8000f6c:	bf14      	ite	ne
 8000f6e:	2507      	movne	r5, #7
 8000f70:	2506      	moveq	r5, #6
 8000f72:	fa05 f50c 	lsl.w	r5, r5, ip
 8000f76:	433d      	orrs	r5, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f78:	60b5      	str	r5, [r6, #8]
        temp = EXTI->IMR1;
 8000f7a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8000f7c:	ea6f 060e 	mvn.w	r6, lr
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000f80:	03d7      	lsls	r7, r2, #15
        temp &= ~(iocurrent);
 8000f82:	bf54      	ite	pl
 8000f84:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f86:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->IMR1 = temp;
 8000f8a:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR1;
 8000f8c:	6865      	ldr	r5, [r4, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000f8e:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8000f90:	bf54      	ite	pl
 8000f92:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000f94:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->EMR1 = temp;
 8000f98:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR1;
 8000f9a:	68a5      	ldr	r5, [r4, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f9c:	02d7      	lsls	r7, r2, #11
        temp &= ~(iocurrent);
 8000f9e:	bf54      	ite	pl
 8000fa0:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fa2:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->RTSR1 = temp;
 8000fa6:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8000fa8:	68e5      	ldr	r5, [r4, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000faa:	0292      	lsls	r2, r2, #10
        temp &= ~(iocurrent);
 8000fac:	bf54      	ite	pl
 8000fae:	4035      	andpl	r5, r6
          temp |= iocurrent;
 8000fb0:	ea4e 0505 	orrmi.w	r5, lr, r5
        EXTI->FTSR1 = temp;
 8000fb4:	60e5      	str	r5, [r4, #12]
    position++;
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	e73f      	b.n	8000e3a <HAL_GPIO_Init+0x12>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fba:	2500      	movs	r5, #0
 8000fbc:	e7d9      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fbe:	2501      	movs	r5, #1
 8000fc0:	e7d7      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fc2:	2502      	movs	r5, #2
 8000fc4:	e7d5      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fc6:	2503      	movs	r5, #3
 8000fc8:	e7d3      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fca:	2504      	movs	r5, #4
 8000fcc:	e7d1      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fce:	2505      	movs	r5, #5
 8000fd0:	e7cf      	b.n	8000f72 <HAL_GPIO_Init+0x14a>
 8000fd2:	bf00      	nop
 8000fd4:	40010400 	.word	0x40010400
 8000fd8:	48000400 	.word	0x48000400
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8000fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8000fe4:	4c40      	ldr	r4, [pc, #256]	; (80010e8 <HAL_GPIO_DeInit+0x108>)
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8000fe6:	f8df b108 	ldr.w	fp, [pc, #264]	; 80010f0 <HAL_GPIO_DeInit+0x110>
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000fec:	f04f 0a01 	mov.w	sl, #1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8000ff0:	f04f 080f 	mov.w	r8, #15
  while ((GPIO_Pin >> position) != 0x00u)
 8000ff4:	fa31 f203 	lsrs.w	r2, r1, r3
 8000ff8:	d101      	bne.n	8000ffe <HAL_GPIO_DeInit+0x1e>
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
  }
}
 8000ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 8000ffe:	fa0a f503 	lsl.w	r5, sl, r3
    if (iocurrent != 0x00u)
 8001002:	ea11 0605 	ands.w	r6, r1, r5
 8001006:	d060      	beq.n	80010ca <HAL_GPIO_DeInit+0xea>
 8001008:	f023 0703 	bic.w	r7, r3, #3
 800100c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001010:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001014:	f003 0e03 	and.w	lr, r3, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8001018:	68ba      	ldr	r2, [r7, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800101a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800101e:	fa08 f90e 	lsl.w	r9, r8, lr
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001022:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001026:	ea02 0c09 	and.w	ip, r2, r9
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800102a:	d050      	beq.n	80010ce <HAL_GPIO_DeInit+0xee>
 800102c:	4a2f      	ldr	r2, [pc, #188]	; (80010ec <HAL_GPIO_DeInit+0x10c>)
 800102e:	4290      	cmp	r0, r2
 8001030:	d04f      	beq.n	80010d2 <HAL_GPIO_DeInit+0xf2>
 8001032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001036:	4290      	cmp	r0, r2
 8001038:	d04d      	beq.n	80010d6 <HAL_GPIO_DeInit+0xf6>
 800103a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800103e:	4290      	cmp	r0, r2
 8001040:	d04b      	beq.n	80010da <HAL_GPIO_DeInit+0xfa>
 8001042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001046:	4290      	cmp	r0, r2
 8001048:	d049      	beq.n	80010de <HAL_GPIO_DeInit+0xfe>
 800104a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800104e:	4290      	cmp	r0, r2
 8001050:	d047      	beq.n	80010e2 <HAL_GPIO_DeInit+0x102>
 8001052:	4558      	cmp	r0, fp
 8001054:	bf0c      	ite	eq
 8001056:	2206      	moveq	r2, #6
 8001058:	2207      	movne	r2, #7
 800105a:	fa02 f20e 	lsl.w	r2, r2, lr
 800105e:	4594      	cmp	ip, r2
 8001060:	d110      	bne.n	8001084 <HAL_GPIO_DeInit+0xa4>
        EXTI->IMR1 &= ~(iocurrent);
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	43f6      	mvns	r6, r6
 8001066:	4032      	ands	r2, r6
 8001068:	6022      	str	r2, [r4, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800106a:	6862      	ldr	r2, [r4, #4]
 800106c:	4032      	ands	r2, r6
 800106e:	6062      	str	r2, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8001070:	68a2      	ldr	r2, [r4, #8]
 8001072:	4032      	ands	r2, r6
 8001074:	60a2      	str	r2, [r4, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8001076:	68e2      	ldr	r2, [r4, #12]
 8001078:	4016      	ands	r6, r2
 800107a:	60e6      	str	r6, [r4, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 800107c:	68ba      	ldr	r2, [r7, #8]
 800107e:	ea22 0209 	bic.w	r2, r2, r9
 8001082:	60ba      	str	r2, [r7, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001084:	6806      	ldr	r6, [r0, #0]
 8001086:	2703      	movs	r7, #3
 8001088:	005a      	lsls	r2, r3, #1
 800108a:	fa07 f202 	lsl.w	r2, r7, r2
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800108e:	fa23 f707 	lsr.w	r7, r3, r7
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001092:	4316      	orrs	r6, r2
 8001094:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8001098:	6006      	str	r6, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800109a:	f003 0607 	and.w	r6, r3, #7
 800109e:	f8d7 e020 	ldr.w	lr, [r7, #32]
 80010a2:	00b6      	lsls	r6, r6, #2
 80010a4:	fa08 f606 	lsl.w	r6, r8, r6
 80010a8:	ea2e 0606 	bic.w	r6, lr, r6
 80010ac:	623e      	str	r6, [r7, #32]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80010ae:	6886      	ldr	r6, [r0, #8]
 80010b0:	43d2      	mvns	r2, r2
 80010b2:	4016      	ands	r6, r2
 80010b4:	6086      	str	r6, [r0, #8]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b6:	6846      	ldr	r6, [r0, #4]
 80010b8:	43ed      	mvns	r5, r5
 80010ba:	402e      	ands	r6, r5
 80010bc:	6046      	str	r6, [r0, #4]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010be:	68c6      	ldr	r6, [r0, #12]
 80010c0:	4032      	ands	r2, r6
 80010c2:	60c2      	str	r2, [r0, #12]
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 80010c4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80010c6:	4015      	ands	r5, r2
 80010c8:	62c5      	str	r5, [r0, #44]	; 0x2c
    position++;
 80010ca:	3301      	adds	r3, #1
 80010cc:	e792      	b.n	8000ff4 <HAL_GPIO_DeInit+0x14>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80010ce:	2200      	movs	r2, #0
 80010d0:	e7c3      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010d2:	2201      	movs	r2, #1
 80010d4:	e7c1      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010d6:	2202      	movs	r2, #2
 80010d8:	e7bf      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010da:	2203      	movs	r2, #3
 80010dc:	e7bd      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010de:	2204      	movs	r2, #4
 80010e0:	e7bb      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010e2:	2205      	movs	r2, #5
 80010e4:	e7b9      	b.n	800105a <HAL_GPIO_DeInit+0x7a>
 80010e6:	bf00      	nop
 80010e8:	40010400 	.word	0x40010400
 80010ec:	48000400 	.word	0x48000400
 80010f0:	48001800 	.word	0x48001800

080010f4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80010f4:	6903      	ldr	r3, [r0, #16]
 80010f6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80010f8:	bf14      	ite	ne
 80010fa:	2001      	movne	r0, #1
 80010fc:	2000      	moveq	r0, #0
 80010fe:	4770      	bx	lr

08001100 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001100:	b10a      	cbz	r2, 8001106 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001102:	6181      	str	r1, [r0, #24]
 8001104:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001106:	6281      	str	r1, [r0, #40]	; 0x28
 8001108:	4770      	bx	lr

0800110a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 800110a:	6943      	ldr	r3, [r0, #20]
 800110c:	420b      	tst	r3, r1
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800110e:	bf14      	ite	ne
 8001110:	6281      	strne	r1, [r0, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001112:	6181      	streq	r1, [r0, #24]
 8001114:	4770      	bx	lr

08001116 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001116:	4770      	bx	lr

08001118 <HAL_GPIO_EXTI_IRQHandler>:
{
 8001118:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800111a:	4b04      	ldr	r3, [pc, #16]	; (800112c <HAL_GPIO_EXTI_IRQHandler+0x14>)
 800111c:	6959      	ldr	r1, [r3, #20]
 800111e:	4201      	tst	r1, r0
 8001120:	d002      	beq.n	8001128 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001122:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001124:	f7ff fff7 	bl	8001116 <HAL_GPIO_EXTI_Callback>
 8001128:	bd08      	pop	{r3, pc}
 800112a:	bf00      	nop
 800112c:	40010400 	.word	0x40010400

08001130 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001130:	b510      	push	{r4, lr}
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001132:	4604      	mov	r4, r0
 8001134:	2800      	cmp	r0, #0
 8001136:	d04a      	beq.n	80011ce <HAL_I2C_Init+0x9e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001138:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800113c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001140:	b91b      	cbnz	r3, 800114a <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001142:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001146:	f003 ff9f 	bl	8005088 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800114a:	2324      	movs	r3, #36	; 0x24
 800114c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001150:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001152:	68e1      	ldr	r1, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	f022 0201 	bic.w	r2, r2, #1
 800115a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800115c:	6862      	ldr	r2, [r4, #4]
 800115e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001162:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001164:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001166:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001168:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001170:	d124      	bne.n	80011bc <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001172:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001176:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001178:	685a      	ldr	r2, [r3, #4]
  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800117a:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800117c:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001180:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001184:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001186:	68da      	ldr	r2, [r3, #12]
 8001188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800118c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800118e:	6922      	ldr	r2, [r4, #16]
 8001190:	430a      	orrs	r2, r1
 8001192:	69a1      	ldr	r1, [r4, #24]
 8001194:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001198:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800119a:	6a21      	ldr	r1, [r4, #32]
 800119c:	69e2      	ldr	r2, [r4, #28]
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	f042 0201 	orr.w	r2, r2, #1
 80011a8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011aa:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80011ac:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ae:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011b0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011b4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b6:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42

  return HAL_OK;
 80011ba:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011bc:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80011c0:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011c2:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80011c4:	bf04      	itt	eq
 80011c6:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80011ca:	605a      	streq	r2, [r3, #4]
 80011cc:	e7d4      	b.n	8001178 <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 80011ce:	2001      	movs	r0, #1
}
 80011d0:	bd10      	pop	{r4, pc}

080011d2 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011d2:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80011d6:	b2d2      	uxtb	r2, r2
 80011d8:	2a20      	cmp	r2, #32
{
 80011da:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 80011dc:	d11d      	bne.n	800121a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011de:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80011e2:	2b01      	cmp	r3, #1
 80011e4:	d019      	beq.n	800121a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80011e6:	2324      	movs	r3, #36	; 0x24
 80011e8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80011ec:	6803      	ldr	r3, [r0, #0]
 80011ee:	681c      	ldr	r4, [r3, #0]
 80011f0:	f024 0401 	bic.w	r4, r4, #1
 80011f4:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80011f6:	681c      	ldr	r4, [r3, #0]
 80011f8:	f424 5480 	bic.w	r4, r4, #4096	; 0x1000
 80011fc:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80011fe:	681c      	ldr	r4, [r3, #0]
 8001200:	4321      	orrs	r1, r4
 8001202:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001204:	6819      	ldr	r1, [r3, #0]
 8001206:	f041 0101 	orr.w	r1, r1, #1
 800120a:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800120c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800120e:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8001212:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001216:	4618      	mov	r0, r3
 8001218:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 800121a:	2002      	movs	r0, #2
  }
}
 800121c:	bd10      	pop	{r4, pc}

0800121e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800121e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001220:	f890 4041 	ldrb.w	r4, [r0, #65]	; 0x41
 8001224:	b2e4      	uxtb	r4, r4
 8001226:	2c20      	cmp	r4, #32
 8001228:	d11c      	bne.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800122a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800122e:	2b01      	cmp	r3, #1
 8001230:	d018      	beq.n	8001264 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001232:	2324      	movs	r3, #36	; 0x24
 8001234:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001238:	6803      	ldr	r3, [r0, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f022 0201 	bic.w	r2, r2, #1
 8001240:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001242:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001244:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001248:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800124c:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	f042 0201 	orr.w	r2, r2, #1
 8001254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001256:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001258:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800125c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8001260:	4618      	mov	r0, r3
 8001262:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8001264:	2002      	movs	r0, #2
  }
}
 8001266:	bd10      	pop	{r4, pc}

08001268 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001268:	b5f0      	push	{r4, r5, r6, r7, lr}
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800126a:	4604      	mov	r4, r0
{
 800126c:	b08b      	sub	sp, #44	; 0x2c
  if (hpcd == NULL)
 800126e:	b360      	cbz	r0, 80012ca <HAL_PCD_Init+0x62>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001270:	f890 33bd 	ldrb.w	r3, [r0, #957]	; 0x3bd
  USBx = hpcd->Instance;
 8001274:	6805      	ldr	r5, [r0, #0]
  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001276:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800127a:	b91b      	cbnz	r3, 8001284 <HAL_PCD_Init+0x1c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800127c:	f880 23bc 	strb.w	r2, [r0, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001280:	f003 ffa2 	bl	80051c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001284:	2303      	movs	r3, #3
 8001286:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800128a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800128c:	4625      	mov	r5, r4
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800128e:	f413 7380 	ands.w	r3, r3, #256	; 0x100
  __HAL_PCD_DISABLE(hpcd);
 8001292:	f855 0b10 	ldr.w	r0, [r5], #16
    hpcd->Init.dma_enable = 0U;
 8001296:	bf08      	it	eq
 8001298:	6123      	streq	r3, [r4, #16]
  __HAL_PCD_DISABLE(hpcd);
 800129a:	f001 fdee 	bl	8002e7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800129e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a0:	466e      	mov	r6, sp
 80012a2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80012a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ac:	e886 0003 	stmia.w	r6, {r0, r1}
 80012b0:	4625      	mov	r5, r4
 80012b2:	1d27      	adds	r7, r4, #4
 80012b4:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 80012b8:	f855 0b10 	ldr.w	r0, [r5], #16
 80012bc:	f001 fda6 	bl	8002e0c <USB_CoreInit>
 80012c0:	4606      	mov	r6, r0
 80012c2:	b120      	cbz	r0, 80012ce <HAL_PCD_Init+0x66>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012c4:	2302      	movs	r3, #2
 80012c6:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
    return HAL_ERROR;
 80012ca:	2501      	movs	r5, #1
 80012cc:	e056      	b.n	800137c <HAL_PCD_Init+0x114>
    return HAL_ERROR;
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012ce:	4601      	mov	r1, r0
 80012d0:	6820      	ldr	r0, [r4, #0]
 80012d2:	f001 fdd8 	bl	8002e86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d6:	4630      	mov	r0, r6
 80012d8:	f8d4 e004 	ldr.w	lr, [r4, #4]
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012dc:	261c      	movs	r6, #28
 80012de:	f04f 0c01 	mov.w	ip, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80012e2:	4601      	mov	r1, r0
 80012e4:	b2c2      	uxtb	r2, r0
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012e6:	4596      	cmp	lr, r2
 80012e8:	f100 0001 	add.w	r0, r0, #1
 80012ec:	d81c      	bhi.n	8001328 <HAL_PCD_Init+0xc0>
 80012ee:	2300      	movs	r3, #0
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80012f0:	261c      	movs	r6, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	b2d8      	uxtb	r0, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f6:	4586      	cmp	lr, r0
 80012f8:	f103 0301 	add.w	r3, r3, #1
 80012fc:	d822      	bhi.n	8001344 <HAL_PCD_Init+0xdc>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001300:	466e      	mov	r6, sp
 8001302:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001304:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001306:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001308:	e895 0003 	ldmia.w	r5, {r0, r1}
 800130c:	e886 0003 	stmia.w	r6, {r0, r1}
 8001310:	e897 000e 	ldmia.w	r7, {r1, r2, r3}
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	f001 fdf7 	bl	8002f08 <USB_DevInit>
 800131a:	2301      	movs	r3, #1
 800131c:	4605      	mov	r5, r0
 800131e:	b300      	cbz	r0, 8001362 <HAL_PCD_Init+0xfa>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001320:	2202      	movs	r2, #2
 8001322:	f884 23bd 	strb.w	r2, [r4, #957]	; 0x3bd
 8001326:	e7d0      	b.n	80012ca <HAL_PCD_Init+0x62>
    hpcd->IN_ep[i].is_in = 1U;
 8001328:	fb06 4302 	mla	r3, r6, r2, r4
 800132c:	f883 c03d 	strb.w	ip, [r3, #61]	; 0x3d
    hpcd->IN_ep[i].num = i;
 8001330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001334:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001338:	f883 103f 	strb.w	r1, [r3, #63]	; 0x3f
    hpcd->IN_ep[i].maxpacket = 0U;
 800133c:	6459      	str	r1, [r3, #68]	; 0x44
    hpcd->IN_ep[i].xfer_buff = 0U;
 800133e:	6499      	str	r1, [r3, #72]	; 0x48
    hpcd->IN_ep[i].xfer_len = 0U;
 8001340:	6519      	str	r1, [r3, #80]	; 0x50
 8001342:	e7cf      	b.n	80012e4 <HAL_PCD_Init+0x7c>
    hpcd->OUT_ep[i].is_in = 0U;
 8001344:	fb06 4200 	mla	r2, r6, r0, r4
 8001348:	f882 11fd 	strb.w	r1, [r2, #509]	; 0x1fd
    hpcd->OUT_ep[i].num = i;
 800134c:	f882 01fc 	strb.w	r0, [r2, #508]	; 0x1fc
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001350:	f882 11ff 	strb.w	r1, [r2, #511]	; 0x1ff
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001354:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001358:	f8c2 1208 	str.w	r1, [r2, #520]	; 0x208
    hpcd->OUT_ep[i].xfer_len = 0U;
 800135c:	f8c2 1210 	str.w	r1, [r2, #528]	; 0x210
 8001360:	e7c8      	b.n	80012f4 <HAL_PCD_Init+0x8c>
    return HAL_ERROR;
  }

  hpcd->USB_Address = 0U;
 8001362:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001366:	f884 33bd 	strb.w	r3, [r4, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800136a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800136c:	2b01      	cmp	r3, #1
 800136e:	d102      	bne.n	8001376 <HAL_PCD_Init+0x10e>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001370:	4620      	mov	r0, r4
 8001372:	f000 f806 	bl	8001382 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8001376:	6820      	ldr	r0, [r4, #0]
 8001378:	f001 fe6e 	bl	8003058 <USB_DevDisconnect>

  return HAL_OK;
}
 800137c:	4628      	mov	r0, r5
 800137e:	b00b      	add	sp, #44	; 0x2c
 8001380:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001382 <HAL_PCDEx_ActivateLPM>:
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001382:	6802      	ldr	r2, [r0, #0]
{
 8001384:	4603      	mov	r3, r0

  hpcd->lpm_active = 1U;
 8001386:	2101      	movs	r1, #1
 8001388:	f8c0 13fc 	str.w	r1, [r0, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800138c:	2000      	movs	r0, #0
 800138e:	f883 03f4 	strb.w	r0, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001392:	6993      	ldr	r3, [r2, #24]
 8001394:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001398:	6193      	str	r3, [r2, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800139a:	6d53      	ldr	r3, [r2, #84]	; 0x54
 800139c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a0:	f043 0303 	orr.w	r3, r3, #3
 80013a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
}
 80013a6:	4770      	bx	lr

080013a8 <HAL_PWR_EnableBkUpAccess>:
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80013a8:	4a02      	ldr	r2, [pc, #8]	; (80013b4 <HAL_PWR_EnableBkUpAccess+0xc>)
 80013aa:	6813      	ldr	r3, [r2, #0]
 80013ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013b0:	6013      	str	r3, [r2, #0]
 80013b2:	4770      	bx	lr
 80013b4:	40007000 	.word	0x40007000

080013b8 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <HAL_PWREx_GetVoltageRange+0xc>)
 80013ba:	6818      	ldr	r0, [r3, #0]
#endif
}
 80013bc:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	40007000 	.word	0x40007000

080013c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80013c8:	4b17      	ldr	r3, [pc, #92]	; (8001428 <HAL_PWREx_ControlVoltageScaling+0x60>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013ca:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013cc:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d0:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d4:	d11c      	bne.n	8001410 <HAL_PWREx_ControlVoltageScaling+0x48>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80013d6:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80013da:	d015      	beq.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x40>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80013e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80013e6:	601a      	str	r2, [r3, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80013e8:	4a10      	ldr	r2, [pc, #64]	; (800142c <HAL_PWREx_ControlVoltageScaling+0x64>)
 80013ea:	6811      	ldr	r1, [r2, #0]
 80013ec:	2232      	movs	r2, #50	; 0x32
 80013ee:	434a      	muls	r2, r1
 80013f0:	490f      	ldr	r1, [pc, #60]	; (8001430 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80013f2:	fbb2 f2f1 	udiv	r2, r2, r1
 80013f6:	4619      	mov	r1, r3
 80013f8:	3201      	adds	r2, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013fa:	6958      	ldr	r0, [r3, #20]
 80013fc:	0540      	lsls	r0, r0, #21
 80013fe:	d500      	bpl.n	8001402 <HAL_PWREx_ControlVoltageScaling+0x3a>
 8001400:	b922      	cbnz	r2, 800140c <HAL_PWREx_ControlVoltageScaling+0x44>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001402:	694b      	ldr	r3, [r1, #20]
 8001404:	055b      	lsls	r3, r3, #21
 8001406:	d40d      	bmi.n	8001424 <HAL_PWREx_ControlVoltageScaling+0x5c>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001408:	2000      	movs	r0, #0
 800140a:	4770      	bx	lr
        wait_loop_index--;
 800140c:	3a01      	subs	r2, #1
 800140e:	e7f4      	b.n	80013fa <HAL_PWREx_ControlVoltageScaling+0x32>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001410:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001414:	bf1f      	itttt	ne
 8001416:	681a      	ldrne	r2, [r3, #0]
 8001418:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800141c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001420:	601a      	strne	r2, [r3, #0]
 8001422:	e7f1      	b.n	8001408 <HAL_PWREx_ControlVoltageScaling+0x40>
        return HAL_TIMEOUT;
 8001424:	2003      	movs	r0, #3
}
 8001426:	4770      	bx	lr
 8001428:	40007000 	.word	0x40007000
 800142c:	20000018 	.word	0x20000018
 8001430:	000f4240 	.word	0x000f4240

08001434 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001434:	4a02      	ldr	r2, [pc, #8]	; (8001440 <HAL_PWREx_EnableVddUSB+0xc>)
 8001436:	6853      	ldr	r3, [r2, #4]
 8001438:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800143c:	6053      	str	r3, [r2, #4]
 800143e:	4770      	bx	lr
 8001440:	40007000 	.word	0x40007000

08001444 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001448:	9d06      	ldr	r5, [sp, #24]
 800144a:	4604      	mov	r4, r0
 800144c:	460f      	mov	r7, r1
 800144e:	4616      	mov	r6, r2
 8001450:	4698      	mov	r8, r3
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8001452:	6821      	ldr	r1, [r4, #0]
 8001454:	688a      	ldr	r2, [r1, #8]
 8001456:	423a      	tst	r2, r7
 8001458:	bf14      	ite	ne
 800145a:	2201      	movne	r2, #1
 800145c:	2200      	moveq	r2, #0
 800145e:	42b2      	cmp	r2, r6
 8001460:	d102      	bne.n	8001468 <QSPI_WaitFlagStateUntilTimeout+0x24>

        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001462:	2000      	movs	r0, #0
}
 8001464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001468:	1c6b      	adds	r3, r5, #1
 800146a:	d0f3      	beq.n	8001454 <QSPI_WaitFlagStateUntilTimeout+0x10>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800146c:	f7ff fb6e 	bl	8000b4c <HAL_GetTick>
 8001470:	eba0 0008 	sub.w	r0, r0, r8
 8001474:	4285      	cmp	r5, r0
 8001476:	d301      	bcc.n	800147c <QSPI_WaitFlagStateUntilTimeout+0x38>
 8001478:	2d00      	cmp	r5, #0
 800147a:	d1ea      	bne.n	8001452 <QSPI_WaitFlagStateUntilTimeout+0xe>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800147c:	2304      	movs	r3, #4
 800147e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8001482:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	63e3      	str	r3, [r4, #60]	; 0x3c
 800148a:	2001      	movs	r0, #1
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001490 <HAL_QSPI_Init>:
{
 8001490:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001492:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001494:	f7ff fb5a 	bl	8000b4c <HAL_GetTick>
 8001498:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800149a:	2c00      	cmp	r4, #0
 800149c:	d049      	beq.n	8001532 <HAL_QSPI_Init+0xa2>
  __HAL_LOCK(hqspi);
 800149e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d047      	beq.n	8001536 <HAL_QSPI_Init+0xa6>
 80014a6:	2301      	movs	r3, #1
 80014a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80014ac:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80014b0:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 80014b4:	b93a      	cbnz	r2, 80014c6 <HAL_QSPI_Init+0x36>
    hqspi->Lock = HAL_UNLOCKED;
 80014b6:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    HAL_QSPI_MspInit(hqspi);
 80014ba:	4620      	mov	r0, r4
 80014bc:	f003 fe1a 	bl	80050f4 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 80014c0:	f241 3388 	movw	r3, #5000	; 0x1388
 80014c4:	6423      	str	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80014c6:	6820      	ldr	r0, [r4, #0]
 80014c8:	68a1      	ldr	r1, [r4, #8]
 80014ca:	6802      	ldr	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80014ce:	3901      	subs	r1, #1
 80014d0:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80014d4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80014d8:	6002      	str	r2, [r0, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80014da:	2120      	movs	r1, #32
 80014dc:	9300      	str	r3, [sp, #0]
 80014de:	2200      	movs	r2, #0
 80014e0:	462b      	mov	r3, r5
 80014e2:	4620      	mov	r0, r4
 80014e4:	f7ff ffae 	bl	8001444 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80014e8:	b9f0      	cbnz	r0, 8001528 <HAL_QSPI_Init+0x98>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 80014ea:	6822      	ldr	r2, [r4, #0]
 80014ec:	6865      	ldr	r5, [r4, #4]
 80014ee:	6811      	ldr	r1, [r2, #0]
 80014f0:	68e3      	ldr	r3, [r4, #12]
 80014f2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80014f6:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80014fa:	f021 0110 	bic.w	r1, r1, #16
 80014fe:	430b      	orrs	r3, r1
 8001500:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8001502:	69a1      	ldr	r1, [r4, #24]
 8001504:	6963      	ldr	r3, [r4, #20]
 8001506:	6855      	ldr	r5, [r2, #4]
 8001508:	430b      	orrs	r3, r1
 800150a:	6921      	ldr	r1, [r4, #16]
 800150c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001510:	490a      	ldr	r1, [pc, #40]	; (800153c <HAL_QSPI_Init+0xac>)
 8001512:	4029      	ands	r1, r5
 8001514:	430b      	orrs	r3, r1
 8001516:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8001518:	6813      	ldr	r3, [r2, #0]
 800151a:	f043 0301 	orr.w	r3, r3, #1
 800151e:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8001520:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8001522:	63e0      	str	r0, [r4, #60]	; 0x3c
    hqspi->State = HAL_QSPI_STATE_READY;
 8001524:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hqspi);
 8001528:	2300      	movs	r3, #0
 800152a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
}
 800152e:	b003      	add	sp, #12
 8001530:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8001532:	2001      	movs	r0, #1
 8001534:	e7fb      	b.n	800152e <HAL_QSPI_Init+0x9e>
  __HAL_LOCK(hqspi);
 8001536:	2002      	movs	r0, #2
 8001538:	e7f9      	b.n	800152e <HAL_QSPI_Init+0x9e>
 800153a:	bf00      	nop
 800153c:	ffe0f8fe 	.word	0xffe0f8fe

08001540 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001540:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001542:	4d1e      	ldr	r5, [pc, #120]	; (80015bc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001544:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001546:	00da      	lsls	r2, r3, #3
{
 8001548:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800154a:	d518      	bpl.n	800157e <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800154c:	f7ff ff34 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001550:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001554:	d123      	bne.n	800159e <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001556:	2c80      	cmp	r4, #128	; 0x80
 8001558:	d929      	bls.n	80015ae <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800155a:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800155c:	bf8c      	ite	hi
 800155e:	2002      	movhi	r0, #2
 8001560:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001562:	4a17      	ldr	r2, [pc, #92]	; (80015c0 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001564:	6813      	ldr	r3, [r2, #0]
 8001566:	f023 0307 	bic.w	r3, r3, #7
 800156a:	4303      	orrs	r3, r0
 800156c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800156e:	6813      	ldr	r3, [r2, #0]
 8001570:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001574:	1a18      	subs	r0, r3, r0
 8001576:	bf18      	it	ne
 8001578:	2001      	movne	r0, #1
 800157a:	b003      	add	sp, #12
 800157c:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 800157e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001584:	65ab      	str	r3, [r5, #88]	; 0x58
 8001586:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	9301      	str	r3, [sp, #4]
 800158e:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001590:	f7ff ff12 	bl	80013b8 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001594:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001596:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800159a:	65ab      	str	r3, [r5, #88]	; 0x58
 800159c:	e7d8      	b.n	8001550 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 800159e:	2c80      	cmp	r4, #128	; 0x80
 80015a0:	d807      	bhi.n	80015b2 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80015a2:	d008      	beq.n	80015b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80015a4:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80015a8:	4258      	negs	r0, r3
 80015aa:	4158      	adcs	r0, r3
 80015ac:	e7d9      	b.n	8001562 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015ae:	2000      	movs	r0, #0
 80015b0:	e7d7      	b.n	8001562 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80015b2:	2003      	movs	r0, #3
 80015b4:	e7d5      	b.n	8001562 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80015b6:	2002      	movs	r0, #2
 80015b8:	e7d3      	b.n	8001562 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	40022000 	.word	0x40022000

080015c4 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015c4:	4b22      	ldr	r3, [pc, #136]	; (8001650 <HAL_RCC_GetSysClockFreq+0x8c>)
 80015c6:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015c8:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ca:	f012 020c 	ands.w	r2, r2, #12
 80015ce:	d005      	beq.n	80015dc <HAL_RCC_GetSysClockFreq+0x18>
 80015d0:	2a0c      	cmp	r2, #12
 80015d2:	d115      	bne.n	8001600 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80015d8:	2901      	cmp	r1, #1
 80015da:	d118      	bne.n	800160e <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015dc:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80015de:	481d      	ldr	r0, [pc, #116]	; (8001654 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80015e0:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015e2:	bf55      	itete	pl
 80015e4:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015e8:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80015ea:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80015ee:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80015f2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f6:	b34a      	cbz	r2, 800164c <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80015f8:	2a0c      	cmp	r2, #12
 80015fa:	d009      	beq.n	8001610 <HAL_RCC_GetSysClockFreq+0x4c>
 80015fc:	2000      	movs	r0, #0
  return sysclockfreq;
 80015fe:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001600:	2a04      	cmp	r2, #4
 8001602:	d022      	beq.n	800164a <HAL_RCC_GetSysClockFreq+0x86>
 8001604:	2a08      	cmp	r2, #8
 8001606:	4814      	ldr	r0, [pc, #80]	; (8001658 <HAL_RCC_GetSysClockFreq+0x94>)
 8001608:	bf18      	it	ne
 800160a:	2000      	movne	r0, #0
 800160c:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800160e:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001610:	68da      	ldr	r2, [r3, #12]
 8001612:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001616:	2a02      	cmp	r2, #2
 8001618:	d015      	beq.n	8001646 <HAL_RCC_GetSysClockFreq+0x82>
      pllvco = HSE_VALUE;
 800161a:	490f      	ldr	r1, [pc, #60]	; (8001658 <HAL_RCC_GetSysClockFreq+0x94>)
 800161c:	2a03      	cmp	r2, #3
 800161e:	bf08      	it	eq
 8001620:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001622:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001624:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800162c:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001630:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001634:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001636:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001638:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800163a:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800163c:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001640:	fbb0 f0f3 	udiv	r0, r0, r3
 8001644:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001646:	4805      	ldr	r0, [pc, #20]	; (800165c <HAL_RCC_GetSysClockFreq+0x98>)
 8001648:	e7eb      	b.n	8001622 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 800164a:	4804      	ldr	r0, [pc, #16]	; (800165c <HAL_RCC_GetSysClockFreq+0x98>)
}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	40021000 	.word	0x40021000
 8001654:	0800563c 	.word	0x0800563c
 8001658:	007a1200 	.word	0x007a1200
 800165c:	00f42400 	.word	0x00f42400

08001660 <HAL_RCC_OscConfig>:
{
 8001660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001664:	4605      	mov	r5, r0
 8001666:	b908      	cbnz	r0, 800166c <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8001668:	2001      	movs	r0, #1
 800166a:	e047      	b.n	80016fc <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800166c:	4ca6      	ldr	r4, [pc, #664]	; (8001908 <HAL_RCC_OscConfig+0x2a8>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800166e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001670:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001672:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001674:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001676:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800167a:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800167e:	d573      	bpl.n	8001768 <HAL_RCC_OscConfig+0x108>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001680:	b11e      	cbz	r6, 800168a <HAL_RCC_OscConfig+0x2a>
 8001682:	2e0c      	cmp	r6, #12
 8001684:	d152      	bne.n	800172c <HAL_RCC_OscConfig+0xcc>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001686:	2f01      	cmp	r7, #1
 8001688:	d150      	bne.n	800172c <HAL_RCC_OscConfig+0xcc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168a:	6823      	ldr	r3, [r4, #0]
 800168c:	0798      	lsls	r0, r3, #30
 800168e:	d502      	bpl.n	8001696 <HAL_RCC_OscConfig+0x36>
 8001690:	69ab      	ldr	r3, [r5, #24]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0e8      	beq.n	8001668 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001696:	6823      	ldr	r3, [r4, #0]
 8001698:	6a28      	ldr	r0, [r5, #32]
 800169a:	0719      	lsls	r1, r3, #28
 800169c:	bf56      	itet	pl
 800169e:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80016a2:	6823      	ldrmi	r3, [r4, #0]
 80016a4:	091b      	lsrpl	r3, r3, #4
 80016a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016aa:	4283      	cmp	r3, r0
 80016ac:	d229      	bcs.n	8001702 <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016ae:	f7ff ff47 	bl	8001540 <RCC_SetFlashLatencyFromMSIRange>
 80016b2:	2800      	cmp	r0, #0
 80016b4:	d1d8      	bne.n	8001668 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	6023      	str	r3, [r4, #0]
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	6a2a      	ldr	r2, [r5, #32]
 80016c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80016c6:	4313      	orrs	r3, r2
 80016c8:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ca:	6863      	ldr	r3, [r4, #4]
 80016cc:	69ea      	ldr	r2, [r5, #28]
 80016ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80016d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80016d6:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f7ff ff74 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 80016dc:	68a3      	ldr	r3, [r4, #8]
 80016de:	4a8b      	ldr	r2, [pc, #556]	; (800190c <HAL_RCC_OscConfig+0x2ac>)
 80016e0:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80016e4:	5cd3      	ldrb	r3, [r2, r3]
 80016e6:	f003 031f 	and.w	r3, r3, #31
 80016ea:	40d8      	lsrs	r0, r3
 80016ec:	4b88      	ldr	r3, [pc, #544]	; (8001910 <HAL_RCC_OscConfig+0x2b0>)
 80016ee:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80016f0:	4b88      	ldr	r3, [pc, #544]	; (8001914 <HAL_RCC_OscConfig+0x2b4>)
 80016f2:	6818      	ldr	r0, [r3, #0]
 80016f4:	f7ff f9e8 	bl	8000ac8 <HAL_InitTick>
        if(status != HAL_OK)
 80016f8:	2800      	cmp	r0, #0
 80016fa:	d035      	beq.n	8001768 <HAL_RCC_OscConfig+0x108>
}
 80016fc:	b003      	add	sp, #12
 80016fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	f043 0308 	orr.w	r3, r3, #8
 8001708:	6023      	str	r3, [r4, #0]
 800170a:	6823      	ldr	r3, [r4, #0]
 800170c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001710:	4303      	orrs	r3, r0
 8001712:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001714:	6863      	ldr	r3, [r4, #4]
 8001716:	69ea      	ldr	r2, [r5, #28]
 8001718:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800171c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001720:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001722:	f7ff ff0d 	bl	8001540 <RCC_SetFlashLatencyFromMSIRange>
 8001726:	2800      	cmp	r0, #0
 8001728:	d0d6      	beq.n	80016d8 <HAL_RCC_OscConfig+0x78>
 800172a:	e79d      	b.n	8001668 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800172c:	69ab      	ldr	r3, [r5, #24]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d036      	beq.n	80017a0 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_MSI_ENABLE();
 8001732:	6823      	ldr	r3, [r4, #0]
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800173a:	f7ff fa07 	bl	8000b4c <HAL_GetTick>
 800173e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001740:	6823      	ldr	r3, [r4, #0]
 8001742:	079a      	lsls	r2, r3, #30
 8001744:	d524      	bpl.n	8001790 <HAL_RCC_OscConfig+0x130>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	f043 0308 	orr.w	r3, r3, #8
 800174c:	6023      	str	r3, [r4, #0]
 800174e:	6823      	ldr	r3, [r4, #0]
 8001750:	6a2a      	ldr	r2, [r5, #32]
 8001752:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001756:	4313      	orrs	r3, r2
 8001758:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800175a:	6863      	ldr	r3, [r4, #4]
 800175c:	69ea      	ldr	r2, [r5, #28]
 800175e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001762:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001766:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001768:	682b      	ldr	r3, [r5, #0]
 800176a:	07d8      	lsls	r0, r3, #31
 800176c:	d429      	bmi.n	80017c2 <HAL_RCC_OscConfig+0x162>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800176e:	682b      	ldr	r3, [r5, #0]
 8001770:	0799      	lsls	r1, r3, #30
 8001772:	d467      	bmi.n	8001844 <HAL_RCC_OscConfig+0x1e4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	682b      	ldr	r3, [r5, #0]
 8001776:	0718      	lsls	r0, r3, #28
 8001778:	f100 809c 	bmi.w	80018b4 <HAL_RCC_OscConfig+0x254>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800177c:	682b      	ldr	r3, [r5, #0]
 800177e:	0759      	lsls	r1, r3, #29
 8001780:	f100 80ca 	bmi.w	8001918 <HAL_RCC_OscConfig+0x2b8>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001784:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8001786:	2800      	cmp	r0, #0
 8001788:	f040 8133 	bne.w	80019f2 <HAL_RCC_OscConfig+0x392>
  return HAL_OK;
 800178c:	2000      	movs	r0, #0
 800178e:	e7b5      	b.n	80016fc <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001790:	f7ff f9dc 	bl	8000b4c <HAL_GetTick>
 8001794:	eba0 0008 	sub.w	r0, r0, r8
 8001798:	2802      	cmp	r0, #2
 800179a:	d9d1      	bls.n	8001740 <HAL_RCC_OscConfig+0xe0>
            return HAL_TIMEOUT;
 800179c:	2003      	movs	r0, #3
 800179e:	e7ad      	b.n	80016fc <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 80017a0:	6823      	ldr	r3, [r4, #0]
 80017a2:	f023 0301 	bic.w	r3, r3, #1
 80017a6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017a8:	f7ff f9d0 	bl	8000b4c <HAL_GetTick>
 80017ac:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	079b      	lsls	r3, r3, #30
 80017b2:	d5d9      	bpl.n	8001768 <HAL_RCC_OscConfig+0x108>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b4:	f7ff f9ca 	bl	8000b4c <HAL_GetTick>
 80017b8:	eba0 0008 	sub.w	r0, r0, r8
 80017bc:	2802      	cmp	r0, #2
 80017be:	d9f6      	bls.n	80017ae <HAL_RCC_OscConfig+0x14e>
 80017c0:	e7ec      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c2:	2e08      	cmp	r6, #8
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_OscConfig+0x16e>
 80017c6:	2e0c      	cmp	r6, #12
 80017c8:	d108      	bne.n	80017dc <HAL_RCC_OscConfig+0x17c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ca:	2f03      	cmp	r7, #3
 80017cc:	d106      	bne.n	80017dc <HAL_RCC_OscConfig+0x17c>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ce:	6823      	ldr	r3, [r4, #0]
 80017d0:	039a      	lsls	r2, r3, #14
 80017d2:	d5cc      	bpl.n	800176e <HAL_RCC_OscConfig+0x10e>
 80017d4:	686b      	ldr	r3, [r5, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1c9      	bne.n	800176e <HAL_RCC_OscConfig+0x10e>
 80017da:	e745      	b.n	8001668 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017dc:	686b      	ldr	r3, [r5, #4]
 80017de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017e2:	d110      	bne.n	8001806 <HAL_RCC_OscConfig+0x1a6>
 80017e4:	6823      	ldr	r3, [r4, #0]
 80017e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ea:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80017ec:	f7ff f9ae 	bl	8000b4c <HAL_GetTick>
 80017f0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	6823      	ldr	r3, [r4, #0]
 80017f4:	039b      	lsls	r3, r3, #14
 80017f6:	d4ba      	bmi.n	800176e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017f8:	f7ff f9a8 	bl	8000b4c <HAL_GetTick>
 80017fc:	eba0 0008 	sub.w	r0, r0, r8
 8001800:	2864      	cmp	r0, #100	; 0x64
 8001802:	d9f6      	bls.n	80017f2 <HAL_RCC_OscConfig+0x192>
 8001804:	e7ca      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d104      	bne.n	8001816 <HAL_RCC_OscConfig+0x1b6>
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001812:	6023      	str	r3, [r4, #0]
 8001814:	e7e6      	b.n	80017e4 <HAL_RCC_OscConfig+0x184>
 8001816:	6822      	ldr	r2, [r4, #0]
 8001818:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800181c:	6022      	str	r2, [r4, #0]
 800181e:	6822      	ldr	r2, [r4, #0]
 8001820:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001824:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1e0      	bne.n	80017ec <HAL_RCC_OscConfig+0x18c>
        tickstart = HAL_GetTick();
 800182a:	f7ff f98f 	bl	8000b4c <HAL_GetTick>
 800182e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	0398      	lsls	r0, r3, #14
 8001834:	d59b      	bpl.n	800176e <HAL_RCC_OscConfig+0x10e>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001836:	f7ff f989 	bl	8000b4c <HAL_GetTick>
 800183a:	eba0 0008 	sub.w	r0, r0, r8
 800183e:	2864      	cmp	r0, #100	; 0x64
 8001840:	d9f6      	bls.n	8001830 <HAL_RCC_OscConfig+0x1d0>
 8001842:	e7ab      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001844:	2e04      	cmp	r6, #4
 8001846:	d003      	beq.n	8001850 <HAL_RCC_OscConfig+0x1f0>
 8001848:	2e0c      	cmp	r6, #12
 800184a:	d110      	bne.n	800186e <HAL_RCC_OscConfig+0x20e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800184c:	2f02      	cmp	r7, #2
 800184e:	d10e      	bne.n	800186e <HAL_RCC_OscConfig+0x20e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	6823      	ldr	r3, [r4, #0]
 8001852:	0559      	lsls	r1, r3, #21
 8001854:	d503      	bpl.n	800185e <HAL_RCC_OscConfig+0x1fe>
 8001856:	68eb      	ldr	r3, [r5, #12]
 8001858:	2b00      	cmp	r3, #0
 800185a:	f43f af05 	beq.w	8001668 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800185e:	6863      	ldr	r3, [r4, #4]
 8001860:	692a      	ldr	r2, [r5, #16]
 8001862:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001866:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800186a:	6063      	str	r3, [r4, #4]
 800186c:	e782      	b.n	8001774 <HAL_RCC_OscConfig+0x114>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800186e:	68eb      	ldr	r3, [r5, #12]
 8001870:	b17b      	cbz	r3, 8001892 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_HSI_ENABLE();
 8001872:	6823      	ldr	r3, [r4, #0]
 8001874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001878:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800187a:	f7ff f967 	bl	8000b4c <HAL_GetTick>
 800187e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001880:	6823      	ldr	r3, [r4, #0]
 8001882:	055a      	lsls	r2, r3, #21
 8001884:	d4eb      	bmi.n	800185e <HAL_RCC_OscConfig+0x1fe>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001886:	f7ff f961 	bl	8000b4c <HAL_GetTick>
 800188a:	1bc0      	subs	r0, r0, r7
 800188c:	2802      	cmp	r0, #2
 800188e:	d9f7      	bls.n	8001880 <HAL_RCC_OscConfig+0x220>
 8001890:	e784      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_HSI_DISABLE();
 8001892:	6823      	ldr	r3, [r4, #0]
 8001894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001898:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800189a:	f7ff f957 	bl	8000b4c <HAL_GetTick>
 800189e:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	055b      	lsls	r3, r3, #21
 80018a4:	f57f af66 	bpl.w	8001774 <HAL_RCC_OscConfig+0x114>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018a8:	f7ff f950 	bl	8000b4c <HAL_GetTick>
 80018ac:	1bc0      	subs	r0, r0, r7
 80018ae:	2802      	cmp	r0, #2
 80018b0:	d9f6      	bls.n	80018a0 <HAL_RCC_OscConfig+0x240>
 80018b2:	e773      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018b4:	696b      	ldr	r3, [r5, #20]
 80018b6:	b19b      	cbz	r3, 80018e0 <HAL_RCC_OscConfig+0x280>
      __HAL_RCC_LSI_ENABLE();
 80018b8:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018c4:	f7ff f942 	bl	8000b4c <HAL_GetTick>
 80018c8:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018ce:	079a      	lsls	r2, r3, #30
 80018d0:	f53f af54 	bmi.w	800177c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d4:	f7ff f93a 	bl	8000b4c <HAL_GetTick>
 80018d8:	1bc0      	subs	r0, r0, r7
 80018da:	2802      	cmp	r0, #2
 80018dc:	d9f5      	bls.n	80018ca <HAL_RCC_OscConfig+0x26a>
 80018de:	e75d      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
      __HAL_RCC_LSI_DISABLE();
 80018e0:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018e4:	f023 0301 	bic.w	r3, r3, #1
 80018e8:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80018ec:	f7ff f92e 	bl	8000b4c <HAL_GetTick>
 80018f0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80018f6:	079b      	lsls	r3, r3, #30
 80018f8:	f57f af40 	bpl.w	800177c <HAL_RCC_OscConfig+0x11c>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fc:	f7ff f926 	bl	8000b4c <HAL_GetTick>
 8001900:	1bc0      	subs	r0, r0, r7
 8001902:	2802      	cmp	r0, #2
 8001904:	d9f5      	bls.n	80018f2 <HAL_RCC_OscConfig+0x292>
 8001906:	e749      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
 8001908:	40021000 	.word	0x40021000
 800190c:	08005621 	.word	0x08005621
 8001910:	20000018 	.word	0x20000018
 8001914:	20000010 	.word	0x20000010
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001918:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800191a:	00d8      	lsls	r0, r3, #3
 800191c:	d429      	bmi.n	8001972 <HAL_RCC_OscConfig+0x312>
      __HAL_RCC_PWR_CLK_ENABLE();
 800191e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001924:	65a3      	str	r3, [r4, #88]	; 0x58
 8001926:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001928:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192c:	9301      	str	r3, [sp, #4]
 800192e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001930:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001934:	4f79      	ldr	r7, [pc, #484]	; (8001b1c <HAL_RCC_OscConfig+0x4bc>)
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	05d9      	lsls	r1, r3, #23
 800193a:	d51d      	bpl.n	8001978 <HAL_RCC_OscConfig+0x318>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800193c:	68ab      	ldr	r3, [r5, #8]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d12b      	bne.n	800199a <HAL_RCC_OscConfig+0x33a>
 8001942:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001946:	f043 0301 	orr.w	r3, r3, #1
 800194a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 800194e:	f7ff f8fd 	bl	8000b4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001956:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001958:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800195c:	079b      	lsls	r3, r3, #30
 800195e:	d542      	bpl.n	80019e6 <HAL_RCC_OscConfig+0x386>
    if(pwrclkchanged == SET)
 8001960:	f1b8 0f00 	cmp.w	r8, #0
 8001964:	f43f af0e 	beq.w	8001784 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800196a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800196e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001970:	e708      	b.n	8001784 <HAL_RCC_OscConfig+0x124>
    FlagStatus       pwrclkchanged = RESET;
 8001972:	f04f 0800 	mov.w	r8, #0
 8001976:	e7dd      	b.n	8001934 <HAL_RCC_OscConfig+0x2d4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800197e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001980:	f7ff f8e4 	bl	8000b4c <HAL_GetTick>
 8001984:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	05da      	lsls	r2, r3, #23
 800198a:	d4d7      	bmi.n	800193c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800198c:	f7ff f8de 	bl	8000b4c <HAL_GetTick>
 8001990:	eba0 0009 	sub.w	r0, r0, r9
 8001994:	2802      	cmp	r0, #2
 8001996:	d9f6      	bls.n	8001986 <HAL_RCC_OscConfig+0x326>
 8001998:	e700      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800199a:	2b05      	cmp	r3, #5
 800199c:	d106      	bne.n	80019ac <HAL_RCC_OscConfig+0x34c>
 800199e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019a2:	f043 0304 	orr.w	r3, r3, #4
 80019a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80019aa:	e7ca      	b.n	8001942 <HAL_RCC_OscConfig+0x2e2>
 80019ac:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019b0:	f022 0201 	bic.w	r2, r2, #1
 80019b4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80019b8:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80019bc:	f022 0204 	bic.w	r2, r2, #4
 80019c0:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d1c2      	bne.n	800194e <HAL_RCC_OscConfig+0x2ee>
      tickstart = HAL_GetTick();
 80019c8:	f7ff f8c0 	bl	8000b4c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80019d0:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019d2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80019d6:	0798      	lsls	r0, r3, #30
 80019d8:	d5c2      	bpl.n	8001960 <HAL_RCC_OscConfig+0x300>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019da:	f7ff f8b7 	bl	8000b4c <HAL_GetTick>
 80019de:	1bc0      	subs	r0, r0, r7
 80019e0:	4548      	cmp	r0, r9
 80019e2:	d9f6      	bls.n	80019d2 <HAL_RCC_OscConfig+0x372>
 80019e4:	e6da      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019e6:	f7ff f8b1 	bl	8000b4c <HAL_GetTick>
 80019ea:	1bc0      	subs	r0, r0, r7
 80019ec:	4548      	cmp	r0, r9
 80019ee:	d9b3      	bls.n	8001958 <HAL_RCC_OscConfig+0x2f8>
 80019f0:	e6d4      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f2:	2e0c      	cmp	r6, #12
 80019f4:	d05c      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_PLL_DISABLE();
 80019f6:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019f8:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 80019fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019fe:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a00:	d13b      	bne.n	8001a7a <HAL_RCC_OscConfig+0x41a>
        tickstart = HAL_GetTick();
 8001a02:	f7ff f8a3 	bl	8000b4c <HAL_GetTick>
 8001a06:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a08:	6823      	ldr	r3, [r4, #0]
 8001a0a:	0199      	lsls	r1, r3, #6
 8001a0c:	d42f      	bmi.n	8001a6e <HAL_RCC_OscConfig+0x40e>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a0e:	68e2      	ldr	r2, [r4, #12]
 8001a10:	4b43      	ldr	r3, [pc, #268]	; (8001b20 <HAL_RCC_OscConfig+0x4c0>)
 8001a12:	4013      	ands	r3, r2
 8001a14:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001a16:	4313      	orrs	r3, r2
 8001a18:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8001a1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001a1e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8001a20:	3a01      	subs	r2, #1
 8001a22:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8001a26:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001a28:	0912      	lsrs	r2, r2, #4
 8001a2a:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8001a2e:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001a30:	0852      	lsrs	r2, r2, #1
 8001a32:	3a01      	subs	r2, #1
 8001a34:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 8001a38:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001a3a:	0852      	lsrs	r2, r2, #1
 8001a3c:	3a01      	subs	r2, #1
 8001a3e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8001a42:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8001a44:	6823      	ldr	r3, [r4, #0]
 8001a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a4a:	6023      	str	r3, [r4, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a4c:	68e3      	ldr	r3, [r4, #12]
 8001a4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a52:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a54:	f7ff f87a 	bl	8000b4c <HAL_GetTick>
 8001a58:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	019a      	lsls	r2, r3, #6
 8001a5e:	f53f ae95 	bmi.w	800178c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a62:	f7ff f873 	bl	8000b4c <HAL_GetTick>
 8001a66:	1b40      	subs	r0, r0, r5
 8001a68:	2802      	cmp	r0, #2
 8001a6a:	d9f6      	bls.n	8001a5a <HAL_RCC_OscConfig+0x3fa>
 8001a6c:	e696      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f86d 	bl	8000b4c <HAL_GetTick>
 8001a72:	1b80      	subs	r0, r0, r6
 8001a74:	2802      	cmp	r0, #2
 8001a76:	d9c7      	bls.n	8001a08 <HAL_RCC_OscConfig+0x3a8>
 8001a78:	e690      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a7a:	6823      	ldr	r3, [r4, #0]
 8001a7c:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a80:	bf02      	ittt	eq
 8001a82:	68e3      	ldreq	r3, [r4, #12]
 8001a84:	f023 0303 	biceq.w	r3, r3, #3
 8001a88:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a8a:	68e3      	ldr	r3, [r4, #12]
 8001a8c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a94:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8001a96:	f7ff f859 	bl	8000b4c <HAL_GetTick>
 8001a9a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a9c:	6823      	ldr	r3, [r4, #0]
 8001a9e:	019b      	lsls	r3, r3, #6
 8001aa0:	f57f ae74 	bpl.w	800178c <HAL_RCC_OscConfig+0x12c>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa4:	f7ff f852 	bl	8000b4c <HAL_GetTick>
 8001aa8:	1b40      	subs	r0, r0, r5
 8001aaa:	2802      	cmp	r0, #2
 8001aac:	d9f6      	bls.n	8001a9c <HAL_RCC_OscConfig+0x43c>
 8001aae:	e675      	b.n	800179c <HAL_RCC_OscConfig+0x13c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ab0:	2801      	cmp	r0, #1
 8001ab2:	f43f ae23 	beq.w	80016fc <HAL_RCC_OscConfig+0x9c>
        pll_config = RCC->PLLCFGR;
 8001ab6:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ab8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8001aba:	f003 0103 	and.w	r1, r3, #3
 8001abe:	4291      	cmp	r1, r2
 8001ac0:	f47f add2 	bne.w	8001668 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ac4:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8001ac6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001aca:	3901      	subs	r1, #1
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001acc:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8001ad0:	f47f adca 	bne.w	8001668 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ad4:	6b69      	ldr	r1, [r5, #52]	; 0x34
 8001ad6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ada:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8001ade:	f47f adc3 	bne.w	8001668 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ae2:	6baa      	ldr	r2, [r5, #56]	; 0x38
 8001ae4:	3a07      	subs	r2, #7
 8001ae6:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 8001aea:	bf18      	it	ne
 8001aec:	2201      	movne	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	4291      	cmp	r1, r2
 8001af0:	f47f adba 	bne.w	8001668 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af4:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8001af6:	0852      	lsrs	r2, r2, #1
 8001af8:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 8001afc:	3a01      	subs	r2, #1
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001afe:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8001b02:	f47f adb1 	bne.w	8001668 <HAL_RCC_OscConfig+0x8>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b06:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8001b08:	0852      	lsrs	r2, r2, #1
 8001b0a:	3a01      	subs	r2, #1
 8001b0c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b10:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8001b14:	bf14      	ite	ne
 8001b16:	2001      	movne	r0, #1
 8001b18:	2000      	moveq	r0, #0
 8001b1a:	e5ef      	b.n	80016fc <HAL_RCC_OscConfig+0x9c>
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	f99d808c 	.word	0xf99d808c

08001b24 <HAL_RCC_ClockConfig>:
{
 8001b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b28:	460e      	mov	r6, r1
  if(RCC_ClkInitStruct == NULL)
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	b910      	cbnz	r0, 8001b34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b2e:	2001      	movs	r0, #1
 8001b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b34:	4a41      	ldr	r2, [pc, #260]	; (8001c3c <HAL_RCC_ClockConfig+0x118>)
 8001b36:	6813      	ldr	r3, [r2, #0]
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	d32a      	bcc.n	8001b96 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b40:	6823      	ldr	r3, [r4, #0]
 8001b42:	07d9      	lsls	r1, r3, #31
 8001b44:	d432      	bmi.n	8001bac <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b46:	6821      	ldr	r1, [r4, #0]
 8001b48:	078a      	lsls	r2, r1, #30
 8001b4a:	d45c      	bmi.n	8001c06 <HAL_RCC_ClockConfig+0xe2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b4c:	4a3b      	ldr	r2, [pc, #236]	; (8001c3c <HAL_RCC_ClockConfig+0x118>)
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	f003 0307 	and.w	r3, r3, #7
 8001b54:	429e      	cmp	r6, r3
 8001b56:	d35e      	bcc.n	8001c16 <HAL_RCC_ClockConfig+0xf2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b58:	f011 0f04 	tst.w	r1, #4
 8001b5c:	4d38      	ldr	r5, [pc, #224]	; (8001c40 <HAL_RCC_ClockConfig+0x11c>)
 8001b5e:	d165      	bne.n	8001c2c <HAL_RCC_ClockConfig+0x108>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b60:	070b      	lsls	r3, r1, #28
 8001b62:	d506      	bpl.n	8001b72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b64:	68ab      	ldr	r3, [r5, #8]
 8001b66:	6922      	ldr	r2, [r4, #16]
 8001b68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001b6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001b70:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b72:	f7ff fd27 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8001b76:	68ab      	ldr	r3, [r5, #8]
 8001b78:	4a32      	ldr	r2, [pc, #200]	; (8001c44 <HAL_RCC_ClockConfig+0x120>)
 8001b7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 8001b7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	f003 031f 	and.w	r3, r3, #31
 8001b88:	40d8      	lsrs	r0, r3
 8001b8a:	4b2f      	ldr	r3, [pc, #188]	; (8001c48 <HAL_RCC_ClockConfig+0x124>)
 8001b8c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8001b8e:	4b2f      	ldr	r3, [pc, #188]	; (8001c4c <HAL_RCC_ClockConfig+0x128>)
 8001b90:	6818      	ldr	r0, [r3, #0]
 8001b92:	f7fe bf99 	b.w	8000ac8 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	6813      	ldr	r3, [r2, #0]
 8001b98:	f023 0307 	bic.w	r3, r3, #7
 8001b9c:	430b      	orrs	r3, r1
 8001b9e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba0:	6813      	ldr	r3, [r2, #0]
 8001ba2:	f003 0307 	and.w	r3, r3, #7
 8001ba6:	4299      	cmp	r1, r3
 8001ba8:	d1c1      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xa>
 8001baa:	e7c9      	b.n	8001b40 <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bac:	6862      	ldr	r2, [r4, #4]
 8001bae:	4d24      	ldr	r5, [pc, #144]	; (8001c40 <HAL_RCC_ClockConfig+0x11c>)
 8001bb0:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	682b      	ldr	r3, [r5, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bb4:	d11b      	bne.n	8001bee <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001bba:	d0b8      	beq.n	8001b2e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001bbc:	68ab      	ldr	r3, [r5, #8]
 8001bbe:	f023 0303 	bic.w	r3, r3, #3
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	60ab      	str	r3, [r5, #8]
    tickstart = HAL_GetTick();
 8001bc6:	f7fe ffc1 	bl	8000b4c <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bca:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001bce:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd0:	68ab      	ldr	r3, [r5, #8]
 8001bd2:	6862      	ldr	r2, [r4, #4]
 8001bd4:	f003 030c 	and.w	r3, r3, #12
 8001bd8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001bdc:	d0b3      	beq.n	8001b46 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bde:	f7fe ffb5 	bl	8000b4c <HAL_GetTick>
 8001be2:	1bc0      	subs	r0, r0, r7
 8001be4:	4540      	cmp	r0, r8
 8001be6:	d9f3      	bls.n	8001bd0 <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 8001be8:	2003      	movs	r0, #3
}
 8001bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bee:	2a02      	cmp	r2, #2
 8001bf0:	d102      	bne.n	8001bf8 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001bf6:	e7e0      	b.n	8001bba <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001bf8:	b912      	cbnz	r2, 8001c00 <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001bfa:	f013 0f02 	tst.w	r3, #2
 8001bfe:	e7dc      	b.n	8001bba <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c00:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001c04:	e7d9      	b.n	8001bba <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_RCC_ClockConfig+0x11c>)
 8001c08:	68a0      	ldr	r0, [r4, #8]
 8001c0a:	6893      	ldr	r3, [r2, #8]
 8001c0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c10:	4303      	orrs	r3, r0
 8001c12:	6093      	str	r3, [r2, #8]
 8001c14:	e79a      	b.n	8001b4c <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	6813      	ldr	r3, [r2, #0]
 8001c18:	f023 0307 	bic.w	r3, r3, #7
 8001c1c:	4333      	orrs	r3, r6
 8001c1e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	6813      	ldr	r3, [r2, #0]
 8001c22:	f003 0307 	and.w	r3, r3, #7
 8001c26:	429e      	cmp	r6, r3
 8001c28:	d181      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xa>
 8001c2a:	e795      	b.n	8001b58 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c2c:	68ab      	ldr	r3, [r5, #8]
 8001c2e:	68e2      	ldr	r2, [r4, #12]
 8001c30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c34:	4313      	orrs	r3, r2
 8001c36:	60ab      	str	r3, [r5, #8]
 8001c38:	e792      	b.n	8001b60 <HAL_RCC_ClockConfig+0x3c>
 8001c3a:	bf00      	nop
 8001c3c:	40022000 	.word	0x40022000
 8001c40:	40021000 	.word	0x40021000
 8001c44:	08005621 	.word	0x08005621
 8001c48:	20000018 	.word	0x20000018
 8001c4c:	20000010 	.word	0x20000010

08001c50 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c50:	4b05      	ldr	r3, [pc, #20]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c52:	4a06      	ldr	r2, [pc, #24]	; (8001c6c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	4a04      	ldr	r2, [pc, #16]	; (8001c70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c5e:	6810      	ldr	r0, [r2, #0]
 8001c60:	f003 031f 	and.w	r3, r3, #31
}
 8001c64:	40d8      	lsrs	r0, r3
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08005631 	.word	0x08005631
 8001c70:	20000018 	.word	0x20000018

08001c74 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001c76:	4a06      	ldr	r2, [pc, #24]	; (8001c90 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001c7e:	5cd3      	ldrb	r3, [r2, r3]
 8001c80:	4a04      	ldr	r2, [pc, #16]	; (8001c94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c82:	6810      	ldr	r0, [r2, #0]
 8001c84:	f003 031f 	and.w	r3, r3, #31
}
 8001c88:	40d8      	lsrs	r0, r3
 8001c8a:	4770      	bx	lr
 8001c8c:	40021000 	.word	0x40021000
 8001c90:	08005631 	.word	0x08005631
 8001c94:	20000018 	.word	0x20000018

08001c98 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001c9a:	4b45      	ldr	r3, [pc, #276]	; (8001db0 <RCCEx_PLLSAI1_Config+0x118>)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	f012 0f03 	tst.w	r2, #3
{
 8001ca2:	4605      	mov	r5, r0
 8001ca4:	460e      	mov	r6, r1
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001caa:	d02a      	beq.n	8001d02 <RCCEx_PLLSAI1_Config+0x6a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	f002 0203 	and.w	r2, r2, #3
 8001cb2:	4282      	cmp	r2, r0
 8001cb4:	d13c      	bne.n	8001d30 <RCCEx_PLLSAI1_Config+0x98>
       ||
 8001cb6:	2a00      	cmp	r2, #0
 8001cb8:	d03a      	beq.n	8001d30 <RCCEx_PLLSAI1_Config+0x98>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001cba:	68db      	ldr	r3, [r3, #12]
       ||
 8001cbc:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001cbe:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001cc2:	3301      	adds	r3, #1
       ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d133      	bne.n	8001d30 <RCCEx_PLLSAI1_Config+0x98>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001cce:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001cd0:	f7fe ff3c 	bl	8000b4c <HAL_GetTick>
 8001cd4:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001cd6:	6823      	ldr	r3, [r4, #0]
 8001cd8:	011a      	lsls	r2, r3, #4
 8001cda:	d432      	bmi.n	8001d42 <RCCEx_PLLSAI1_Config+0xaa>
 8001cdc:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001cde:	2e00      	cmp	r6, #0
 8001ce0:	d036      	beq.n	8001d50 <RCCEx_PLLSAI1_Config+0xb8>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001ce2:	2e01      	cmp	r6, #1
 8001ce4:	d150      	bne.n	8001d88 <RCCEx_PLLSAI1_Config+0xf0>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ce6:	6922      	ldr	r2, [r4, #16]
 8001ce8:	6928      	ldr	r0, [r5, #16]
 8001cea:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001cee:	0840      	lsrs	r0, r0, #1
 8001cf0:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001cf4:	3801      	subs	r0, #1
 8001cf6:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001cfa:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001cfe:	6122      	str	r2, [r4, #16]
 8001d00:	e032      	b.n	8001d68 <RCCEx_PLLSAI1_Config+0xd0>
    switch(PllSai1->PLLSAI1Source)
 8001d02:	2802      	cmp	r0, #2
 8001d04:	d010      	beq.n	8001d28 <RCCEx_PLLSAI1_Config+0x90>
 8001d06:	2803      	cmp	r0, #3
 8001d08:	d014      	beq.n	8001d34 <RCCEx_PLLSAI1_Config+0x9c>
 8001d0a:	2801      	cmp	r0, #1
 8001d0c:	d110      	bne.n	8001d30 <RCCEx_PLLSAI1_Config+0x98>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	079f      	lsls	r7, r3, #30
 8001d12:	d538      	bpl.n	8001d86 <RCCEx_PLLSAI1_Config+0xee>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001d14:	68e3      	ldr	r3, [r4, #12]
 8001d16:	686a      	ldr	r2, [r5, #4]
 8001d18:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001d1c:	3a01      	subs	r2, #1
 8001d1e:	4318      	orrs	r0, r3
 8001d20:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001d24:	60e0      	str	r0, [r4, #12]
 8001d26:	e7cf      	b.n	8001cc8 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d2e:	d1f1      	bne.n	8001d14 <RCCEx_PLLSAI1_Config+0x7c>
 8001d30:	2001      	movs	r0, #1
 8001d32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	0391      	lsls	r1, r2, #14
 8001d38:	d4ec      	bmi.n	8001d14 <RCCEx_PLLSAI1_Config+0x7c>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001d40:	e7f5      	b.n	8001d2e <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001d42:	f7fe ff03 	bl	8000b4c <HAL_GetTick>
 8001d46:	1bc0      	subs	r0, r0, r7
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d9c4      	bls.n	8001cd6 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001d4c:	2003      	movs	r0, #3
 8001d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d50:	6921      	ldr	r1, [r4, #16]
 8001d52:	68eb      	ldr	r3, [r5, #12]
 8001d54:	f421 311f 	bic.w	r1, r1, #162816	; 0x27c00
 8001d58:	f421 7140 	bic.w	r1, r1, #768	; 0x300
 8001d5c:	ea41 2107 	orr.w	r1, r1, r7, lsl #8
 8001d60:	091b      	lsrs	r3, r3, #4
 8001d62:	ea41 4143 	orr.w	r1, r1, r3, lsl #17
 8001d66:	6121      	str	r1, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001d68:	6823      	ldr	r3, [r4, #0]
 8001d6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001d6e:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7fe feec 	bl	8000b4c <HAL_GetTick>
 8001d74:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	011b      	lsls	r3, r3, #4
 8001d7a:	d513      	bpl.n	8001da4 <RCCEx_PLLSAI1_Config+0x10c>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001d7c:	6923      	ldr	r3, [r4, #16]
 8001d7e:	69aa      	ldr	r2, [r5, #24]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	6123      	str	r3, [r4, #16]
 8001d84:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001d86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001d88:	6923      	ldr	r3, [r4, #16]
 8001d8a:	6968      	ldr	r0, [r5, #20]
 8001d8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001d90:	0840      	lsrs	r0, r0, #1
 8001d92:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001d96:	3801      	subs	r0, #1
 8001d98:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001d9c:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001da0:	6123      	str	r3, [r4, #16]
 8001da2:	e7e1      	b.n	8001d68 <RCCEx_PLLSAI1_Config+0xd0>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001da4:	f7fe fed2 	bl	8000b4c <HAL_GetTick>
 8001da8:	1b80      	subs	r0, r0, r6
 8001daa:	2802      	cmp	r0, #2
 8001dac:	d9e3      	bls.n	8001d76 <RCCEx_PLLSAI1_Config+0xde>
 8001dae:	e7cd      	b.n	8001d4c <RCCEx_PLLSAI1_Config+0xb4>
 8001db0:	40021000 	.word	0x40021000

08001db4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001db6:	4b3d      	ldr	r3, [pc, #244]	; (8001eac <RCCEx_PLLSAI2_Config+0xf8>)
 8001db8:	68da      	ldr	r2, [r3, #12]
 8001dba:	f012 0f03 	tst.w	r2, #3
{
 8001dbe:	4605      	mov	r5, r0
 8001dc0:	460e      	mov	r6, r1
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001dc6:	d028      	beq.n	8001e1a <RCCEx_PLLSAI2_Config+0x66>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8001dc8:	68da      	ldr	r2, [r3, #12]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	4282      	cmp	r2, r0
 8001dd0:	d13a      	bne.n	8001e48 <RCCEx_PLLSAI2_Config+0x94>
       ||
 8001dd2:	2a00      	cmp	r2, #0
 8001dd4:	d038      	beq.n	8001e48 <RCCEx_PLLSAI2_Config+0x94>
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001dd6:	68db      	ldr	r3, [r3, #12]
       ||
 8001dd8:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8001dda:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001dde:	3301      	adds	r3, #1
       ||
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d131      	bne.n	8001e48 <RCCEx_PLLSAI2_Config+0x94>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8001de4:	6823      	ldr	r3, [r4, #0]
 8001de6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dea:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001dec:	f7fe feae 	bl	8000b4c <HAL_GetTick>
 8001df0:	4607      	mov	r7, r0

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8001df2:	6823      	ldr	r3, [r4, #0]
 8001df4:	009a      	lsls	r2, r3, #2
 8001df6:	d430      	bmi.n	8001e5a <RCCEx_PLLSAI2_Config+0xa6>
 8001df8:	68a8      	ldr	r0, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d034      	beq.n	8001e68 <RCCEx_PLLSAI2_Config+0xb4>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001dfe:	6963      	ldr	r3, [r4, #20]
 8001e00:	6929      	ldr	r1, [r5, #16]
 8001e02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001e06:	0849      	lsrs	r1, r1, #1
 8001e08:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001e0c:	3901      	subs	r1, #1
 8001e0e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001e12:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8001e16:	6163      	str	r3, [r4, #20]
 8001e18:	e032      	b.n	8001e80 <RCCEx_PLLSAI2_Config+0xcc>
    switch(PllSai2->PLLSAI2Source)
 8001e1a:	2802      	cmp	r0, #2
 8001e1c:	d010      	beq.n	8001e40 <RCCEx_PLLSAI2_Config+0x8c>
 8001e1e:	2803      	cmp	r0, #3
 8001e20:	d014      	beq.n	8001e4c <RCCEx_PLLSAI2_Config+0x98>
 8001e22:	2801      	cmp	r0, #1
 8001e24:	d110      	bne.n	8001e48 <RCCEx_PLLSAI2_Config+0x94>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	079f      	lsls	r7, r3, #30
 8001e2a:	d538      	bpl.n	8001e9e <RCCEx_PLLSAI2_Config+0xea>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001e2c:	68e3      	ldr	r3, [r4, #12]
 8001e2e:	686a      	ldr	r2, [r5, #4]
 8001e30:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001e34:	3a01      	subs	r2, #1
 8001e36:	4318      	orrs	r0, r3
 8001e38:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001e3c:	60e0      	str	r0, [r4, #12]
 8001e3e:	e7d1      	b.n	8001de4 <RCCEx_PLLSAI2_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f413 6f80 	tst.w	r3, #1024	; 0x400
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e46:	d1f1      	bne.n	8001e2c <RCCEx_PLLSAI2_Config+0x78>
 8001e48:	2001      	movs	r0, #1
 8001e4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	0391      	lsls	r1, r2, #14
 8001e50:	d4ec      	bmi.n	8001e2c <RCCEx_PLLSAI2_Config+0x78>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001e58:	e7f5      	b.n	8001e46 <RCCEx_PLLSAI2_Config+0x92>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001e5a:	f7fe fe77 	bl	8000b4c <HAL_GetTick>
 8001e5e:	1bc0      	subs	r0, r0, r7
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9c6      	bls.n	8001df2 <RCCEx_PLLSAI2_Config+0x3e>
        status = HAL_TIMEOUT;
 8001e64:	2003      	movs	r0, #3
 8001e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8001e68:	6962      	ldr	r2, [r4, #20]
 8001e6a:	68eb      	ldr	r3, [r5, #12]
 8001e6c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8001e70:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e74:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 8001e7e:	6162      	str	r2, [r4, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8001e80:	6823      	ldr	r3, [r4, #0]
 8001e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e86:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e88:	f7fe fe60 	bl	8000b4c <HAL_GetTick>
 8001e8c:	4606      	mov	r6, r0

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8001e8e:	6823      	ldr	r3, [r4, #0]
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	d505      	bpl.n	8001ea0 <RCCEx_PLLSAI2_Config+0xec>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8001e94:	6963      	ldr	r3, [r4, #20]
 8001e96:	696a      	ldr	r2, [r5, #20]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	6163      	str	r3, [r4, #20]
 8001e9c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001e9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8001ea0:	f7fe fe54 	bl	8000b4c <HAL_GetTick>
 8001ea4:	1b80      	subs	r0, r0, r6
 8001ea6:	2802      	cmp	r0, #2
 8001ea8:	d9f1      	bls.n	8001e8e <RCCEx_PLLSAI2_Config+0xda>
 8001eaa:	e7db      	b.n	8001e64 <RCCEx_PLLSAI2_Config+0xb0>
 8001eac:	40021000 	.word	0x40021000

08001eb0 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001eb0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001eb4:	6806      	ldr	r6, [r0, #0]
 8001eb6:	f416 6600 	ands.w	r6, r6, #2048	; 0x800
{
 8001eba:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ebc:	d024      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ebe:	6e41      	ldr	r1, [r0, #100]	; 0x64
 8001ec0:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 8001ec4:	d02c      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x70>
 8001ec6:	d802      	bhi.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001ec8:	b1c1      	cbz	r1, 8001efc <HAL_RCCEx_PeriphCLKConfig+0x4c>
      ret = HAL_ERROR;
 8001eca:	2601      	movs	r6, #1
 8001ecc:	e01c      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x58>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001ece:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001ed2:	d00d      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8001ed4:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001ed8:	d1f7      	bne.n	8001eca <HAL_RCCEx_PeriphCLKConfig+0x1a>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001eda:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001edc:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8001ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001ee2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001ee6:	430b      	orrs	r3, r1
 8001ee8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001eec:	2600      	movs	r6, #0
 8001eee:	e00b      	b.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x58>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ef0:	4a47      	ldr	r2, [pc, #284]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001ef2:	68d3      	ldr	r3, [r2, #12]
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef8:	60d3      	str	r3, [r2, #12]
      break;
 8001efa:	e7ee      	b.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x2a>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001efc:	3004      	adds	r0, #4
 8001efe:	f7ff fecb 	bl	8001c98 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f02:	4606      	mov	r6, r0
    if(ret == HAL_OK)
 8001f04:	2800      	cmp	r0, #0
 8001f06:	d0e8      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x2a>
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f08:	6823      	ldr	r3, [r4, #0]
 8001f0a:	04d8      	lsls	r0, r3, #19
 8001f0c:	d506      	bpl.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x6c>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001f0e:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001f10:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 8001f14:	d074      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x150>
 8001f16:	d808      	bhi.n	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8001f18:	b1a9      	cbz	r1, 8001f46 <HAL_RCCEx_PeriphCLKConfig+0x96>
      ret = HAL_ERROR;
 8001f1a:	2601      	movs	r6, #1
 8001f1c:	4635      	mov	r5, r6
 8001f1e:	e021      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f20:	2100      	movs	r1, #0
 8001f22:	3020      	adds	r0, #32
 8001f24:	f7ff ff46 	bl	8001db4 <RCCEx_PLLSAI2_Config>
 8001f28:	e7eb      	b.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x52>
    switch(PeriphClkInit->Sai2ClockSelection)
 8001f2a:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8001f2e:	d004      	beq.n	8001f3a <HAL_RCCEx_PeriphCLKConfig+0x8a>
 8001f30:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 8001f34:	d1f1      	bne.n	8001f1a <HAL_RCCEx_PeriphCLKConfig+0x6a>
 8001f36:	4635      	mov	r5, r6
 8001f38:	e009      	b.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x9e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f3a:	4a35      	ldr	r2, [pc, #212]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f3c:	68d3      	ldr	r3, [r2, #12]
 8001f3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f42:	60d3      	str	r3, [r2, #12]
 8001f44:	e7f7      	b.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x86>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f46:	1d20      	adds	r0, r4, #4
 8001f48:	f7ff fea6 	bl	8001c98 <RCCEx_PLLSAI1_Config>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f4c:	4605      	mov	r5, r0
    if(ret == HAL_OK)
 8001f4e:	2d00      	cmp	r5, #0
 8001f50:	d15c      	bne.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x15c>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f52:	4a2f      	ldr	r2, [pc, #188]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f54:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 8001f56:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001f5a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8001f5e:	430b      	orrs	r3, r1
 8001f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f64:	6823      	ldr	r3, [r4, #0]
 8001f66:	0399      	lsls	r1, r3, #14
 8001f68:	f140 814f 	bpl.w	800220a <HAL_RCCEx_PeriphCLKConfig+0x35a>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f6c:	4f28      	ldr	r7, [pc, #160]	; (8002010 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8001f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001f70:	00da      	lsls	r2, r3, #3
 8001f72:	f140 8176 	bpl.w	8002262 <HAL_RCCEx_PeriphCLKConfig+0x3b2>
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f7a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8002014 <HAL_RCCEx_PeriphCLKConfig+0x164>
 8001f7e:	f8d9 3000 	ldr.w	r3, [r9]
 8001f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f86:	f8c9 3000 	str.w	r3, [r9]
    tickstart = HAL_GetTick();
 8001f8a:	f7fe fddf 	bl	8000b4c <HAL_GetTick>
 8001f8e:	4682      	mov	sl, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f90:	f8d9 3000 	ldr.w	r3, [r9]
 8001f94:	05db      	lsls	r3, r3, #23
 8001f96:	d53f      	bpl.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x168>
    if(ret == HAL_OK)
 8001f98:	2d00      	cmp	r5, #0
 8001f9a:	d144      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x176>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001fa0:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001fa4:	d015      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8001fa6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d011      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x122>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fae:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001fb2:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001fb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001fba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fbe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fc6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001fce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fd2:	07d8      	lsls	r0, r3, #31
 8001fd4:	d509      	bpl.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x13a>
        tickstart = HAL_GetTick();
 8001fd6:	f7fe fdb9 	bl	8000b4c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fda:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001fde:	4605      	mov	r5, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fe0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fe4:	0799      	lsls	r1, r3, #30
 8001fe6:	f140 8109 	bpl.w	80021fc <HAL_RCCEx_PeriphCLKConfig+0x34c>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fee:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8001ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001ffc:	4635      	mov	r5, r6
 8001ffe:	e012      	b.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x176>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002000:	2100      	movs	r1, #0
 8002002:	f104 0020 	add.w	r0, r4, #32
 8002006:	f7ff fed5 	bl	8001db4 <RCCEx_PLLSAI2_Config>
 800200a:	e79f      	b.n	8001f4c <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800200c:	462e      	mov	r6, r5
 800200e:	e7a9      	b.n	8001f64 <HAL_RCCEx_PeriphCLKConfig+0xb4>
 8002010:	40021000 	.word	0x40021000
 8002014:	40007000 	.word	0x40007000
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002018:	f7fe fd98 	bl	8000b4c <HAL_GetTick>
 800201c:	eba0 000a 	sub.w	r0, r0, sl
 8002020:	2802      	cmp	r0, #2
 8002022:	d9b5      	bls.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0xe0>
        ret = HAL_TIMEOUT;
 8002024:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002026:	f1b8 0f00 	cmp.w	r8, #0
 800202a:	d003      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>
      __HAL_RCC_PWR_CLK_DISABLE();
 800202c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800202e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002032:	65bb      	str	r3, [r7, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	07da      	lsls	r2, r3, #31
 8002038:	d508      	bpl.n	800204c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800203a:	4990      	ldr	r1, [pc, #576]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800203c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800203e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002042:	f022 0203 	bic.w	r2, r2, #3
 8002046:	4302      	orrs	r2, r0
 8002048:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800204c:	079f      	lsls	r7, r3, #30
 800204e:	d508      	bpl.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002050:	498a      	ldr	r1, [pc, #552]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002052:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002054:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002058:	f022 020c 	bic.w	r2, r2, #12
 800205c:	4302      	orrs	r2, r0
 800205e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002062:	075e      	lsls	r6, r3, #29
 8002064:	d508      	bpl.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002066:	4985      	ldr	r1, [pc, #532]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002068:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800206a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800206e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8002072:	4302      	orrs	r2, r0
 8002074:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002078:	0718      	lsls	r0, r3, #28
 800207a:	d508      	bpl.n	800208e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800207c:	497f      	ldr	r1, [pc, #508]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800207e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8002080:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002084:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002088:	4302      	orrs	r2, r0
 800208a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800208e:	06d9      	lsls	r1, r3, #27
 8002090:	d508      	bpl.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002092:	497a      	ldr	r1, [pc, #488]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002094:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8002096:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800209a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800209e:	4302      	orrs	r2, r0
 80020a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020a4:	069a      	lsls	r2, r3, #26
 80020a6:	d508      	bpl.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x20a>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020a8:	4974      	ldr	r1, [pc, #464]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020aa:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80020ac:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80020b4:	4302      	orrs	r2, r0
 80020b6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020ba:	059f      	lsls	r7, r3, #22
 80020bc:	d508      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020be:	496f      	ldr	r1, [pc, #444]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020c0:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80020c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020c6:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80020ca:	4302      	orrs	r2, r0
 80020cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80020d0:	055e      	lsls	r6, r3, #21
 80020d2:	d508      	bpl.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x236>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020d4:	4969      	ldr	r1, [pc, #420]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020d6:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80020d8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020dc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80020e0:	4302      	orrs	r2, r0
 80020e2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e6:	0658      	lsls	r0, r3, #25
 80020e8:	d508      	bpl.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x24c>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020ea:	4964      	ldr	r1, [pc, #400]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80020ec:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80020ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80020f2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020f6:	4302      	orrs	r2, r0
 80020f8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80020fc:	0619      	lsls	r1, r3, #24
 80020fe:	d508      	bpl.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x262>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002100:	495e      	ldr	r1, [pc, #376]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002102:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002104:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002108:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800210c:	4302      	orrs	r2, r0
 800210e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002112:	05da      	lsls	r2, r3, #23
 8002114:	d508      	bpl.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x278>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002116:	4959      	ldr	r1, [pc, #356]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002118:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800211a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800211e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002122:	4302      	orrs	r2, r0
 8002124:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002128:	049b      	lsls	r3, r3, #18
 800212a:	d50f      	bpl.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800212c:	4a53      	ldr	r2, [pc, #332]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800212e:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 8002130:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002134:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002138:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800213a:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800213e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002142:	d164      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x35e>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002144:	68d3      	ldr	r3, [r2, #12]
 8002146:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800214a:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800214c:	6823      	ldr	r3, [r4, #0]
 800214e:	031f      	lsls	r7, r3, #12
 8002150:	d50f      	bpl.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002152:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 8002154:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8002156:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800215a:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800215e:	430b      	orrs	r3, r1
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002160:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002168:	d15c      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x374>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800216a:	68d3      	ldr	r3, [r2, #12]
 800216c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002170:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	035e      	lsls	r6, r3, #13
 8002176:	d50f      	bpl.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002178:	4a40      	ldr	r2, [pc, #256]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 800217a:	6f61      	ldr	r1, [r4, #116]	; 0x74
 800217c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002180:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002184:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002186:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800218a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800218e:	d154      	bne.n	800223a <HAL_RCCEx_PeriphCLKConfig+0x38a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002190:	68d3      	ldr	r3, [r2, #12]
 8002192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002196:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002198:	6823      	ldr	r3, [r4, #0]
 800219a:	0458      	lsls	r0, r3, #17
 800219c:	d512      	bpl.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800219e:	4937      	ldr	r1, [pc, #220]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021a0:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 80021a2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021a6:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 80021aa:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021ac:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021b4:	d14c      	bne.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021b6:	2102      	movs	r1, #2
 80021b8:	1d20      	adds	r0, r4, #4
 80021ba:	f7ff fd6d 	bl	8001c98 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 80021be:	2800      	cmp	r0, #0
 80021c0:	bf18      	it	ne
 80021c2:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021c4:	6822      	ldr	r2, [r4, #0]
 80021c6:	0411      	lsls	r1, r2, #16
 80021c8:	d508      	bpl.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x32c>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80021ca:	492c      	ldr	r1, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021cc:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80021ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80021d6:	4303      	orrs	r3, r0
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80021dc:	03d3      	lsls	r3, r2, #15
 80021de:	d509      	bpl.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x344>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80021e0:	4a26      	ldr	r2, [pc, #152]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x3cc>)
 80021e2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80021e6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80021ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021ee:	430b      	orrs	r3, r1
 80021f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80021f4:	4628      	mov	r0, r5
 80021f6:	b002      	add	sp, #8
 80021f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe fca6 	bl	8000b4c <HAL_GetTick>
 8002200:	1b40      	subs	r0, r0, r5
 8002202:	4548      	cmp	r0, r9
 8002204:	f67f aeec 	bls.w	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8002208:	e70c      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x174>
 800220a:	4635      	mov	r5, r6
 800220c:	e712      	b.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x184>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800220e:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002212:	d19b      	bne.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x29c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002214:	2101      	movs	r1, #1
 8002216:	1d20      	adds	r0, r4, #4
 8002218:	f7ff fd3e 	bl	8001c98 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800221c:	2800      	cmp	r0, #0
 800221e:	bf18      	it	ne
 8002220:	4605      	movne	r5, r0
 8002222:	e793      	b.n	800214c <HAL_RCCEx_PeriphCLKConfig+0x29c>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002224:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002228:	d1a3      	bne.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222a:	2101      	movs	r1, #1
 800222c:	1d20      	adds	r0, r4, #4
 800222e:	f7ff fd33 	bl	8001c98 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002232:	2800      	cmp	r0, #0
 8002234:	bf18      	it	ne
 8002236:	4605      	movne	r5, r0
 8002238:	e79b      	b.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800223a:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 800223e:	d1ab      	bne.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002240:	2101      	movs	r1, #1
 8002242:	1d20      	adds	r0, r4, #4
 8002244:	f7ff fd28 	bl	8001c98 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002248:	2800      	cmp	r0, #0
 800224a:	bf18      	it	ne
 800224c:	4605      	movne	r5, r0
 800224e:	e7a3      	b.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002250:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 8002254:	d1b6      	bne.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x314>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002256:	2102      	movs	r1, #2
 8002258:	f104 0020 	add.w	r0, r4, #32
 800225c:	f7ff fdaa 	bl	8001db4 <RCCEx_PLLSAI2_Config>
 8002260:	e7ad      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x30e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002262:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002268:	65bb      	str	r3, [r7, #88]	; 0x58
 800226a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800226c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002274:	f04f 0801 	mov.w	r8, #1
 8002278:	e67f      	b.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xca>
 800227a:	bf00      	nop
 800227c:	40021000 	.word	0x40021000

08002280 <HAL_RCCEx_EnableMSIPLLMode>:
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002280:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_RCCEx_EnableMSIPLLMode+0xc>)
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	4770      	bx	lr
 800228c:	40021000 	.word	0x40021000

08002290 <SPI_WaitFifoStateUntilTimeout.part.1>:
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002290:	6803      	ldr	r3, [r0, #0]
 8002292:	685a      	ldr	r2, [r3, #4]
 8002294:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002298:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800229a:	6842      	ldr	r2, [r0, #4]
 800229c:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80022a0:	d10a      	bne.n	80022b8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
 80022a2:	6882      	ldr	r2, [r0, #8]
 80022a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80022a8:	d002      	beq.n	80022b0 <SPI_WaitFifoStateUntilTimeout.part.1+0x20>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80022aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80022ae:	d103      	bne.n	80022b8 <SPI_WaitFifoStateUntilTimeout.part.1+0x28>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80022b0:	681a      	ldr	r2, [r3, #0]
 80022b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80022b8:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80022ba:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80022be:	d107      	bne.n	80022d0 <SPI_WaitFifoStateUntilTimeout.part.1+0x40>
        {
          SPI_RESET_CRC(hspi);
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80022ce:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80022d0:	2301      	movs	r3, #1
 80022d2:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80022d6:	2300      	movs	r3, #0
 80022d8:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
      }
    }
  }

  return HAL_OK;
}
 80022dc:	2003      	movs	r0, #3
 80022de:	4770      	bx	lr

080022e0 <SPI_WaitFlagStateUntilTimeout.constprop.10>:
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80022e0:	b570      	push	{r4, r5, r6, lr}
 80022e2:	4604      	mov	r4, r0
 80022e4:	460d      	mov	r5, r1
 80022e6:	4616      	mov	r6, r2
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80022e8:	6823      	ldr	r3, [r4, #0]
 80022ea:	6898      	ldr	r0, [r3, #8]
 80022ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80022f0:	d100      	bne.n	80022f4 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x14>
}
 80022f2:	bd70      	pop	{r4, r5, r6, pc}
    if (Timeout != HAL_MAX_DELAY)
 80022f4:	1c6a      	adds	r2, r5, #1
 80022f6:	d0f8      	beq.n	80022ea <SPI_WaitFlagStateUntilTimeout.constprop.10+0xa>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80022f8:	f7fe fc28 	bl	8000b4c <HAL_GetTick>
 80022fc:	1b80      	subs	r0, r0, r6
 80022fe:	4285      	cmp	r5, r0
 8002300:	d8f2      	bhi.n	80022e8 <SPI_WaitFlagStateUntilTimeout.constprop.10+0x8>
 8002302:	4620      	mov	r0, r4
}
 8002304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002308:	f7ff bfc2 	b.w	8002290 <SPI_WaitFifoStateUntilTimeout.part.1>

0800230c <SPI_WaitFifoStateUntilTimeout.constprop.11>:
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 800230c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800230e:	4605      	mov	r5, r0
 8002310:	460c      	mov	r4, r1
 8002312:	4616      	mov	r6, r2
 8002314:	461f      	mov	r7, r3
  while ((hspi->Instance->SR & Fifo) != State)
 8002316:	6829      	ldr	r1, [r5, #0]
 8002318:	6888      	ldr	r0, [r1, #8]
 800231a:	4020      	ands	r0, r4
 800231c:	d100      	bne.n	8002320 <SPI_WaitFifoStateUntilTimeout.constprop.11+0x14>
}
 800231e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002320:	f5b4 6fc0 	cmp.w	r4, #1536	; 0x600
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002324:	bf08      	it	eq
 8002326:	7b0b      	ldrbeq	r3, [r1, #12]
    if (Timeout != HAL_MAX_DELAY)
 8002328:	1c73      	adds	r3, r6, #1
 800232a:	d0f5      	beq.n	8002318 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800232c:	f7fe fc0e 	bl	8000b4c <HAL_GetTick>
 8002330:	1bc0      	subs	r0, r0, r7
 8002332:	4286      	cmp	r6, r0
 8002334:	d8ef      	bhi.n	8002316 <SPI_WaitFifoStateUntilTimeout.constprop.11+0xa>
 8002336:	4628      	mov	r0, r5
}
 8002338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800233c:	f7ff bfa8 	b.w	8002290 <SPI_WaitFifoStateUntilTimeout.part.1>

08002340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002340:	b570      	push	{r4, r5, r6, lr}
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002342:	4613      	mov	r3, r2
{
 8002344:	460d      	mov	r5, r1
 8002346:	4616      	mov	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002348:	460a      	mov	r2, r1
 800234a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
{
 800234e:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002350:	f7ff ffdc 	bl	800230c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 8002354:	b128      	cbz	r0, 8002362 <SPI_EndRxTxTransaction+0x22>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002356:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002358:	f043 0320 	orr.w	r3, r3, #32
 800235c:	6623      	str	r3, [r4, #96]	; 0x60
      return HAL_TIMEOUT;
 800235e:	2003      	movs	r0, #3
 8002360:	e00f      	b.n	8002382 <SPI_EndRxTxTransaction+0x42>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002362:	4632      	mov	r2, r6
 8002364:	4629      	mov	r1, r5
 8002366:	4620      	mov	r0, r4
 8002368:	f7ff ffba 	bl	80022e0 <SPI_WaitFlagStateUntilTimeout.constprop.10>
 800236c:	2800      	cmp	r0, #0
 800236e:	d1f2      	bne.n	8002356 <SPI_EndRxTxTransaction+0x16>
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002370:	4633      	mov	r3, r6
 8002372:	462a      	mov	r2, r5
 8002374:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002378:	4620      	mov	r0, r4
 800237a:	f7ff ffc7 	bl	800230c <SPI_WaitFifoStateUntilTimeout.constprop.11>
 800237e:	2800      	cmp	r0, #0
 8002380:	d1e9      	bne.n	8002356 <SPI_EndRxTxTransaction+0x16>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
    return HAL_TIMEOUT;
  }

  return HAL_OK;
}
 8002382:	bd70      	pop	{r4, r5, r6, pc}

08002384 <HAL_SPI_MspInit>:
 8002384:	4770      	bx	lr

08002386 <HAL_SPI_Init>:
{
 8002386:	b570      	push	{r4, r5, r6, lr}
  if (hspi == NULL)
 8002388:	4604      	mov	r4, r0
 800238a:	2800      	cmp	r0, #0
 800238c:	d04a      	beq.n	8002424 <HAL_SPI_Init+0x9e>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800238e:	2300      	movs	r3, #0
 8002390:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002392:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
 8002396:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800239a:	b91b      	cbnz	r3, 80023a4 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 800239c:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80023a4:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80023a6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80023a8:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80023ac:	680b      	ldr	r3, [r1, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ae:	68e2      	ldr	r2, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80023b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023b4:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80023b8:	600b      	str	r3, [r1, #0]
 80023ba:	f04f 0300 	mov.w	r3, #0
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023be:	d92e      	bls.n	800241e <HAL_SPI_Init+0x98>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80023c0:	4618      	mov	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80023c2:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023c6:	bf18      	it	ne
 80023c8:	62a3      	strne	r3, [r4, #40]	; 0x28
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80023ca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80023cc:	b92b      	cbnz	r3, 80023da <HAL_SPI_Init+0x54>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023ce:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80023d2:	bf8c      	ite	hi
 80023d4:	2302      	movhi	r3, #2
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80023d6:	2301      	movls	r3, #1
 80023d8:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80023da:	68a6      	ldr	r6, [r4, #8]
 80023dc:	6863      	ldr	r3, [r4, #4]
 80023de:	69a5      	ldr	r5, [r4, #24]
 80023e0:	4333      	orrs	r3, r6
 80023e2:	6926      	ldr	r6, [r4, #16]
 80023e4:	4333      	orrs	r3, r6
 80023e6:	6966      	ldr	r6, [r4, #20]
 80023e8:	4333      	orrs	r3, r6
 80023ea:	69e6      	ldr	r6, [r4, #28]
 80023ec:	4333      	orrs	r3, r6
 80023ee:	6a26      	ldr	r6, [r4, #32]
 80023f0:	4333      	orrs	r3, r6
 80023f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80023f4:	4333      	orrs	r3, r6
 80023f6:	f405 7600 	and.w	r6, r5, #512	; 0x200
 80023fa:	4333      	orrs	r3, r6
 80023fc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80023fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002400:	431a      	orrs	r2, r3
 8002402:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002404:	0c2d      	lsrs	r5, r5, #16
 8002406:	431a      	orrs	r2, r3
 8002408:	f005 0504 	and.w	r5, r5, #4
 800240c:	432a      	orrs	r2, r5
 800240e:	4302      	orrs	r2, r0
  hspi->State     = HAL_SPI_STATE_READY;
 8002410:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002412:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002414:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002416:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002418:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  return HAL_OK;
 800241c:	bd70      	pop	{r4, r5, r6, pc}
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800241e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002422:	e7d0      	b.n	80023c6 <HAL_SPI_Init+0x40>
    return HAL_ERROR;
 8002424:	2001      	movs	r0, #1
}
 8002426:	bd70      	pop	{r4, r5, r6, pc}

08002428 <HAL_SPI_TransmitReceive>:
{
 8002428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800242c:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800242e:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 8002432:	9f08      	ldr	r7, [sp, #32]
  __HAL_LOCK(hspi);
 8002434:	2b01      	cmp	r3, #1
{
 8002436:	4604      	mov	r4, r0
 8002438:	460d      	mov	r5, r1
 800243a:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 800243c:	f000 8115 	beq.w	800266a <HAL_SPI_TransmitReceive+0x242>
 8002440:	2301      	movs	r3, #1
 8002442:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002446:	f7fe fb81 	bl	8000b4c <HAL_GetTick>
  tmp_state           = hspi->State;
 800244a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  tmp_mode            = hspi->Init.Mode;
 800244e:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8002450:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002452:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002454:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002456:	d00a      	beq.n	800246e <HAL_SPI_TransmitReceive+0x46>
 8002458:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 800245c:	f040 8103 	bne.w	8002666 <HAL_SPI_TransmitReceive+0x23e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002460:	68a0      	ldr	r0, [r4, #8]
 8002462:	2800      	cmp	r0, #0
 8002464:	f040 80ff 	bne.w	8002666 <HAL_SPI_TransmitReceive+0x23e>
 8002468:	2b04      	cmp	r3, #4
 800246a:	f040 80fc 	bne.w	8002666 <HAL_SPI_TransmitReceive+0x23e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800246e:	2d00      	cmp	r5, #0
 8002470:	d049      	beq.n	8002506 <HAL_SPI_TransmitReceive+0xde>
 8002472:	f1b9 0f00 	cmp.w	r9, #0
 8002476:	d046      	beq.n	8002506 <HAL_SPI_TransmitReceive+0xde>
 8002478:	2e00      	cmp	r6, #0
 800247a:	d044      	beq.n	8002506 <HAL_SPI_TransmitReceive+0xde>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800247c:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002480:	68e2      	ldr	r2, [r4, #12]
 8002482:	6820      	ldr	r0, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002484:	f8c4 9040 	str.w	r9, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002488:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800248a:	bf1c      	itt	ne
 800248c:	2305      	movne	r3, #5
 800248e:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002492:	2300      	movs	r3, #0
 8002494:	6623      	str	r3, [r4, #96]	; 0x60
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002496:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
  hspi->RxXferCount = Size;
 800249a:	f8a4 6046 	strh.w	r6, [r4, #70]	; 0x46
  hspi->TxXferCount = Size;
 800249e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80024a0:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80024a2:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxXferSize  = Size;
 80024a4:	f8a4 6044 	strh.w	r6, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80024a8:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80024aa:	87a6      	strh	r6, [r4, #60]	; 0x3c
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024ac:	6843      	ldr	r3, [r0, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80024ae:	d801      	bhi.n	80024b4 <HAL_SPI_TransmitReceive+0x8c>
 80024b0:	2e01      	cmp	r6, #1
 80024b2:	d92a      	bls.n	800250a <HAL_SPI_TransmitReceive+0xe2>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80024b8:	6043      	str	r3, [r0, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80024ba:	6803      	ldr	r3, [r0, #0]
 80024bc:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80024be:	bf5e      	ittt	pl
 80024c0:	6803      	ldrpl	r3, [r0, #0]
 80024c2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80024c6:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80024c8:	f5b2 6fe0 	cmp.w	r2, #1792	; 0x700
 80024cc:	d956      	bls.n	800257c <HAL_SPI_TransmitReceive+0x154>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024ce:	b109      	cbz	r1, 80024d4 <HAL_SPI_TransmitReceive+0xac>
 80024d0:	2e01      	cmp	r6, #1
 80024d2:	d107      	bne.n	80024e4 <HAL_SPI_TransmitReceive+0xbc>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80024d8:	60c3      	str	r3, [r0, #12]
      hspi->TxXferCount--;
 80024da:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024dc:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80024de:	3b01      	subs	r3, #1
 80024e0:	b29b      	uxth	r3, r3
 80024e2:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80024e4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024e6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80024e8:	b29b      	uxth	r3, r3
 80024ea:	b98b      	cbnz	r3, 8002510 <HAL_SPI_TransmitReceive+0xe8>
 80024ec:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	b96b      	cbnz	r3, 8002510 <HAL_SPI_TransmitReceive+0xe8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024f4:	4642      	mov	r2, r8
 80024f6:	4639      	mov	r1, r7
 80024f8:	4620      	mov	r0, r4
 80024fa:	f7ff ff21 	bl	8002340 <SPI_EndRxTxTransaction>
 80024fe:	2800      	cmp	r0, #0
 8002500:	d034      	beq.n	800256c <HAL_SPI_TransmitReceive+0x144>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002502:	2320      	movs	r3, #32
 8002504:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002506:	2001      	movs	r0, #1
 8002508:	e030      	b.n	800256c <HAL_SPI_TransmitReceive+0x144>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800250a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250e:	e7d3      	b.n	80024b8 <HAL_SPI_TransmitReceive+0x90>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002510:	6822      	ldr	r2, [r4, #0]
 8002512:	6893      	ldr	r3, [r2, #8]
 8002514:	0799      	lsls	r1, r3, #30
 8002516:	d50d      	bpl.n	8002534 <HAL_SPI_TransmitReceive+0x10c>
 8002518:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800251a:	b29b      	uxth	r3, r3
 800251c:	b153      	cbz	r3, 8002534 <HAL_SPI_TransmitReceive+0x10c>
 800251e:	b14d      	cbz	r5, 8002534 <HAL_SPI_TransmitReceive+0x10c>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002520:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002522:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002526:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002528:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800252a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800252c:	3b01      	subs	r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 8002532:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002534:	6893      	ldr	r3, [r2, #8]
 8002536:	07db      	lsls	r3, r3, #31
 8002538:	d50f      	bpl.n	800255a <HAL_SPI_TransmitReceive+0x132>
 800253a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800253e:	b29b      	uxth	r3, r3
 8002540:	b15b      	cbz	r3, 800255a <HAL_SPI_TransmitReceive+0x132>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002542:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002544:	68d2      	ldr	r2, [r2, #12]
 8002546:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800254a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800254c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002550:	3b01      	subs	r3, #1
 8002552:	b29b      	uxth	r3, r3
 8002554:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 8002558:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800255a:	f7fe faf7 	bl	8000b4c <HAL_GetTick>
 800255e:	eba0 0008 	sub.w	r0, r0, r8
 8002562:	4287      	cmp	r7, r0
 8002564:	d8bf      	bhi.n	80024e6 <HAL_SPI_TransmitReceive+0xbe>
 8002566:	1c7e      	adds	r6, r7, #1
 8002568:	d0bd      	beq.n	80024e6 <HAL_SPI_TransmitReceive+0xbe>
        errorcode = HAL_TIMEOUT;
 800256a:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 800256c:	2301      	movs	r3, #1
 800256e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002572:	2300      	movs	r3, #0
 8002574:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 8002578:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800257c:	b109      	cbz	r1, 8002582 <HAL_SPI_TransmitReceive+0x15a>
 800257e:	2e01      	cmp	r6, #1
 8002580:	d10b      	bne.n	800259a <HAL_SPI_TransmitReceive+0x172>
      if (hspi->TxXferCount > 1U)
 8002582:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002584:	b29b      	uxth	r3, r3
 8002586:	2b01      	cmp	r3, #1
 8002588:	d951      	bls.n	800262e <HAL_SPI_TransmitReceive+0x206>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800258a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800258e:	60c3      	str	r3, [r0, #12]
        hspi->TxXferCount -= 2U;
 8002590:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002592:	63a5      	str	r5, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002594:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 8002596:	b29b      	uxth	r3, r3
 8002598:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800259a:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800259c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	b923      	cbnz	r3, 80025ac <HAL_SPI_TransmitReceive+0x184>
 80025a2:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025a6:	b29b      	uxth	r3, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d0a3      	beq.n	80024f4 <HAL_SPI_TransmitReceive+0xcc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025ac:	6822      	ldr	r2, [r4, #0]
 80025ae:	6893      	ldr	r3, [r2, #8]
 80025b0:	0798      	lsls	r0, r3, #30
 80025b2:	d511      	bpl.n	80025d8 <HAL_SPI_TransmitReceive+0x1b0>
 80025b4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	b173      	cbz	r3, 80025d8 <HAL_SPI_TransmitReceive+0x1b0>
 80025ba:	b16d      	cbz	r5, 80025d8 <HAL_SPI_TransmitReceive+0x1b0>
        if (hspi->TxXferCount > 1U)
 80025bc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025be:	b29b      	uxth	r3, r3
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80025c4:	d93b      	bls.n	800263e <HAL_SPI_TransmitReceive+0x216>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025c6:	f833 1b02 	ldrh.w	r1, [r3], #2
 80025ca:	60d1      	str	r1, [r2, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025cc:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80025d0:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 0U;
 80025d6:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80025d8:	6822      	ldr	r2, [r4, #0]
 80025da:	6893      	ldr	r3, [r2, #8]
 80025dc:	07d9      	lsls	r1, r3, #31
 80025de:	d51d      	bpl.n	800261c <HAL_SPI_TransmitReceive+0x1f4>
 80025e0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	b1cb      	cbz	r3, 800261c <HAL_SPI_TransmitReceive+0x1f4>
        if (hspi->RxXferCount > 1U)
 80025e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025f2:	d92c      	bls.n	800264e <HAL_SPI_TransmitReceive+0x226>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025f4:	68d1      	ldr	r1, [r2, #12]
 80025f6:	f823 1b02 	strh.w	r1, [r3], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80025fa:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80025fc:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002600:	3b02      	subs	r3, #2
 8002602:	b29b      	uxth	r3, r3
 8002604:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002608:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d803      	bhi.n	800261a <HAL_SPI_TransmitReceive+0x1f2>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002612:	6853      	ldr	r3, [r2, #4]
 8002614:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002618:	6053      	str	r3, [r2, #4]
        txallowed = 1U;
 800261a:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800261c:	f7fe fa96 	bl	8000b4c <HAL_GetTick>
 8002620:	eba0 0008 	sub.w	r0, r0, r8
 8002624:	4287      	cmp	r7, r0
 8002626:	d8b9      	bhi.n	800259c <HAL_SPI_TransmitReceive+0x174>
 8002628:	1c7b      	adds	r3, r7, #1
 800262a:	d0b7      	beq.n	800259c <HAL_SPI_TransmitReceive+0x174>
 800262c:	e79d      	b.n	800256a <HAL_SPI_TransmitReceive+0x142>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800262e:	782b      	ldrb	r3, [r5, #0]
 8002630:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr++;
 8002632:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002634:	3301      	adds	r3, #1
 8002636:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002638:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800263a:	3b01      	subs	r3, #1
 800263c:	e7ab      	b.n	8002596 <HAL_SPI_TransmitReceive+0x16e>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	7313      	strb	r3, [r2, #12]
          hspi->pTxBuffPtr++;
 8002642:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002644:	3301      	adds	r3, #1
 8002646:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 8002648:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800264a:	3b01      	subs	r3, #1
 800264c:	e7c1      	b.n	80025d2 <HAL_SPI_TransmitReceive+0x1aa>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800264e:	7b12      	ldrb	r2, [r2, #12]
 8002650:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002652:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002654:	3301      	adds	r3, #1
 8002656:	6423      	str	r3, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 8002658:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 800265c:	3b01      	subs	r3, #1
 800265e:	b29b      	uxth	r3, r3
 8002660:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002664:	e7d9      	b.n	800261a <HAL_SPI_TransmitReceive+0x1f2>
    errorcode = HAL_BUSY;
 8002666:	2002      	movs	r0, #2
 8002668:	e780      	b.n	800256c <HAL_SPI_TransmitReceive+0x144>
  __HAL_LOCK(hspi);
 800266a:	2002      	movs	r0, #2
}
 800266c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002670 <HAL_SPI_ErrorCallback>:
 8002670:	4770      	bx	lr
	...

08002674 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8002674:	6803      	ldr	r3, [r0, #0]
{
 8002676:	b530      	push	{r4, r5, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8002678:	6859      	ldr	r1, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 800267a:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800267c:	f002 0541 	and.w	r5, r2, #65	; 0x41
 8002680:	2d01      	cmp	r5, #1
{
 8002682:	b085      	sub	sp, #20
 8002684:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002686:	d105      	bne.n	8002694 <HAL_SPI_IRQHandler+0x20>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002688:	064d      	lsls	r5, r1, #25
 800268a:	d503      	bpl.n	8002694 <HAL_SPI_IRQHandler+0x20>
    hspi->RxISR(hspi);
 800268c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    hspi->TxISR(hspi);
 800268e:	4798      	blx	r3
}
 8002690:	b005      	add	sp, #20
 8002692:	bd30      	pop	{r4, r5, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002694:	0795      	lsls	r5, r2, #30
 8002696:	d504      	bpl.n	80026a2 <HAL_SPI_IRQHandler+0x2e>
 8002698:	0608      	lsls	r0, r1, #24
 800269a:	d502      	bpl.n	80026a2 <HAL_SPI_IRQHandler+0x2e>
    hspi->TxISR(hspi);
 800269c:	6d23      	ldr	r3, [r4, #80]	; 0x50
 800269e:	4620      	mov	r0, r4
 80026a0:	e7f5      	b.n	800268e <HAL_SPI_IRQHandler+0x1a>
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80026a2:	f412 7fb0 	tst.w	r2, #352	; 0x160
 80026a6:	d0f3      	beq.n	8002690 <HAL_SPI_IRQHandler+0x1c>
 80026a8:	068d      	lsls	r5, r1, #26
 80026aa:	d5f1      	bpl.n	8002690 <HAL_SPI_IRQHandler+0x1c>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80026ac:	0650      	lsls	r0, r2, #25
 80026ae:	d50f      	bpl.n	80026d0 <HAL_SPI_IRQHandler+0x5c>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80026b0:	f894 005d 	ldrb.w	r0, [r4, #93]	; 0x5d
 80026b4:	2803      	cmp	r0, #3
 80026b6:	f04f 0500 	mov.w	r5, #0
 80026ba:	d04c      	beq.n	8002756 <HAL_SPI_IRQHandler+0xe2>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80026bc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80026be:	f040 0004 	orr.w	r0, r0, #4
 80026c2:	6620      	str	r0, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026c4:	9500      	str	r5, [sp, #0]
 80026c6:	68d8      	ldr	r0, [r3, #12]
 80026c8:	9000      	str	r0, [sp, #0]
 80026ca:	6898      	ldr	r0, [r3, #8]
 80026cc:	9000      	str	r0, [sp, #0]
 80026ce:	9800      	ldr	r0, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80026d0:	0695      	lsls	r5, r2, #26
 80026d2:	d50c      	bpl.n	80026ee <HAL_SPI_IRQHandler+0x7a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80026d4:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80026d6:	f040 0001 	orr.w	r0, r0, #1
 80026da:	6620      	str	r0, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80026dc:	2000      	movs	r0, #0
 80026de:	9002      	str	r0, [sp, #8]
 80026e0:	6898      	ldr	r0, [r3, #8]
 80026e2:	9002      	str	r0, [sp, #8]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 80026ea:	6018      	str	r0, [r3, #0]
 80026ec:	9802      	ldr	r0, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80026ee:	05d0      	lsls	r0, r2, #23
 80026f0:	d508      	bpl.n	8002704 <HAL_SPI_IRQHandler+0x90>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80026f2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80026f4:	f042 0208 	orr.w	r2, r2, #8
 80026f8:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80026fa:	2200      	movs	r2, #0
 80026fc:	9203      	str	r2, [sp, #12]
 80026fe:	689a      	ldr	r2, [r3, #8]
 8002700:	9203      	str	r2, [sp, #12]
 8002702:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002704:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8002706:	2a00      	cmp	r2, #0
 8002708:	d0c2      	beq.n	8002690 <HAL_SPI_IRQHandler+0x1c>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002710:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8002712:	2201      	movs	r2, #1
 8002714:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002718:	078a      	lsls	r2, r1, #30
 800271a:	d023      	beq.n	8002764 <HAL_SPI_IRQHandler+0xf0>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800271c:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 800271e:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002720:	f022 0203 	bic.w	r2, r2, #3
 8002724:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8002726:	b140      	cbz	r0, 800273a <HAL_SPI_IRQHandler+0xc6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002728:	4b10      	ldr	r3, [pc, #64]	; (800276c <HAL_SPI_IRQHandler+0xf8>)
 800272a:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800272c:	f7fe fb32 	bl	8000d94 <HAL_DMA_Abort_IT>
 8002730:	b118      	cbz	r0, 800273a <HAL_SPI_IRQHandler+0xc6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002732:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800273a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800273c:	2800      	cmp	r0, #0
 800273e:	d0a7      	beq.n	8002690 <HAL_SPI_IRQHandler+0x1c>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002740:	4b0a      	ldr	r3, [pc, #40]	; (800276c <HAL_SPI_IRQHandler+0xf8>)
 8002742:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002744:	f7fe fb26 	bl	8000d94 <HAL_DMA_Abort_IT>
 8002748:	2800      	cmp	r0, #0
 800274a:	d0a1      	beq.n	8002690 <HAL_SPI_IRQHandler+0x1c>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800274c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800274e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002752:	6623      	str	r3, [r4, #96]	; 0x60
 8002754:	e79c      	b.n	8002690 <HAL_SPI_IRQHandler+0x1c>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002756:	9501      	str	r5, [sp, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	9201      	str	r2, [sp, #4]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	9b01      	ldr	r3, [sp, #4]
        return;
 8002762:	e795      	b.n	8002690 <HAL_SPI_IRQHandler+0x1c>
        HAL_SPI_ErrorCallback(hspi);
 8002764:	4620      	mov	r0, r4
 8002766:	f7ff ff83 	bl	8002670 <HAL_SPI_ErrorCallback>
 800276a:	e791      	b.n	8002690 <HAL_SPI_IRQHandler+0x1c>
 800276c:	08002771 	.word	0x08002771

08002770 <SPI_DMAAbortOnError>:
{
 8002770:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002772:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8002774:	2300      	movs	r3, #0
 8002776:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800277a:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 800277c:	f7ff ff78 	bl	8002670 <HAL_SPI_ErrorCallback>
 8002780:	bd08      	pop	{r3, pc}

08002782 <HAL_SPI_GetState>:
  return hspi->State;
 8002782:	f890 005d 	ldrb.w	r0, [r0, #93]	; 0x5d
}
 8002786:	4770      	bx	lr

08002788 <UART_EndRxTransfer>:
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002788:	6803      	ldr	r3, [r0, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002790:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002792:	689a      	ldr	r2, [r3, #8]
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800279a:	2320      	movs	r3, #32
 800279c:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800279e:	2300      	movs	r3, #0
 80027a0:	6603      	str	r3, [r0, #96]	; 0x60
 80027a2:	4770      	bx	lr

080027a4 <HAL_UART_TxCpltCallback>:
 80027a4:	4770      	bx	lr

080027a6 <HAL_UART_ErrorCallback>:
 80027a6:	4770      	bx	lr

080027a8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80027a8:	6803      	ldr	r3, [r0, #0]
 80027aa:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80027ac:	6819      	ldr	r1, [r3, #0]
{
 80027ae:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == 0U)
 80027b0:	0716      	lsls	r6, r2, #28
{
 80027b2:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80027b4:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 80027b6:	d10a      	bne.n	80027ce <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80027b8:	0696      	lsls	r6, r2, #26
 80027ba:	d564      	bpl.n	8002886 <HAL_UART_IRQHandler+0xde>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80027bc:	068e      	lsls	r6, r1, #26
 80027be:	d562      	bpl.n	8002886 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 80027c0:	6e03      	ldr	r3, [r0, #96]	; 0x60
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	f000 8082 	beq.w	80028cc <HAL_UART_IRQHandler+0x124>
}
 80027c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      huart->TxISR(huart);
 80027cc:	4718      	bx	r3
      && (((cr3its & USART_CR3_EIE) != 0U)
 80027ce:	f015 0001 	ands.w	r0, r5, #1
 80027d2:	d102      	bne.n	80027da <HAL_UART_IRQHandler+0x32>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80027d4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80027d8:	d055      	beq.n	8002886 <HAL_UART_IRQHandler+0xde>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80027da:	07d5      	lsls	r5, r2, #31
 80027dc:	d507      	bpl.n	80027ee <HAL_UART_IRQHandler+0x46>
 80027de:	05ce      	lsls	r6, r1, #23
 80027e0:	d505      	bpl.n	80027ee <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80027e2:	2501      	movs	r5, #1
 80027e4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80027e6:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80027e8:	f045 0501 	orr.w	r5, r5, #1
 80027ec:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80027ee:	0795      	lsls	r5, r2, #30
 80027f0:	d506      	bpl.n	8002800 <HAL_UART_IRQHandler+0x58>
 80027f2:	b128      	cbz	r0, 8002800 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80027f4:	2502      	movs	r5, #2
 80027f6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027f8:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 80027fa:	f045 0504 	orr.w	r5, r5, #4
 80027fe:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002800:	0756      	lsls	r6, r2, #29
 8002802:	d506      	bpl.n	8002812 <HAL_UART_IRQHandler+0x6a>
 8002804:	b128      	cbz	r0, 8002812 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002806:	2504      	movs	r5, #4
 8002808:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800280a:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
 800280c:	f045 0502 	orr.w	r5, r5, #2
 8002810:	67e5      	str	r5, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002812:	0715      	lsls	r5, r2, #28
 8002814:	d507      	bpl.n	8002826 <HAL_UART_IRQHandler+0x7e>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002816:	068e      	lsls	r6, r1, #26
 8002818:	d400      	bmi.n	800281c <HAL_UART_IRQHandler+0x74>
 800281a:	b120      	cbz	r0, 8002826 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800281c:	2008      	movs	r0, #8
 800281e:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002820:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002822:	4303      	orrs	r3, r0
 8002824:	67e3      	str	r3, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002826:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002828:	2b00      	cmp	r3, #0
 800282a:	d04f      	beq.n	80028cc <HAL_UART_IRQHandler+0x124>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800282c:	0695      	lsls	r5, r2, #26
 800282e:	d505      	bpl.n	800283c <HAL_UART_IRQHandler+0x94>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002830:	0688      	lsls	r0, r1, #26
 8002832:	d503      	bpl.n	800283c <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL)
 8002834:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002836:	b10b      	cbz	r3, 800283c <HAL_UART_IRQHandler+0x94>
          huart->RxISR(huart);
 8002838:	4620      	mov	r0, r4
 800283a:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800283c:	6822      	ldr	r2, [r4, #0]
      errorcode = huart->ErrorCode;
 800283e:	6fe5      	ldr	r5, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002840:	6892      	ldr	r2, [r2, #8]
 8002842:	0651      	lsls	r1, r2, #25
        UART_EndRxTransfer(huart);
 8002844:	4620      	mov	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002846:	d402      	bmi.n	800284e <HAL_UART_IRQHandler+0xa6>
 8002848:	f015 0508 	ands.w	r5, r5, #8
 800284c:	d017      	beq.n	800287e <HAL_UART_IRQHandler+0xd6>
        UART_EndRxTransfer(huart);
 800284e:	f7ff ff9b 	bl	8002788 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002852:	6823      	ldr	r3, [r4, #0]
 8002854:	689a      	ldr	r2, [r3, #8]
 8002856:	0652      	lsls	r2, r2, #25
 8002858:	d50d      	bpl.n	8002876 <HAL_UART_IRQHandler+0xce>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285a:	689a      	ldr	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800285c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800285e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002862:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002864:	b138      	cbz	r0, 8002876 <HAL_UART_IRQHandler+0xce>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002866:	4b1a      	ldr	r3, [pc, #104]	; (80028d0 <HAL_UART_IRQHandler+0x128>)
 8002868:	6383      	str	r3, [r0, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800286a:	f7fe fa93 	bl	8000d94 <HAL_DMA_Abort_IT>
 800286e:	b368      	cbz	r0, 80028cc <HAL_UART_IRQHandler+0x124>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002870:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002872:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002874:	e7a8      	b.n	80027c8 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002876:	4620      	mov	r0, r4
 8002878:	f7ff ff95 	bl	80027a6 <HAL_UART_ErrorCallback>
 800287c:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 800287e:	f7ff ff92 	bl	80027a6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002882:	67e5      	str	r5, [r4, #124]	; 0x7c
 8002884:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002886:	02d6      	lsls	r6, r2, #11
 8002888:	d509      	bpl.n	800289e <HAL_UART_IRQHandler+0xf6>
 800288a:	0268      	lsls	r0, r5, #9
 800288c:	d507      	bpl.n	800289e <HAL_UART_IRQHandler+0xf6>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800288e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 8002892:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002894:	621a      	str	r2, [r3, #32]
}
 8002896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800289a:	f000 ba9e 	b.w	8002dda <HAL_UARTEx_WakeupCallback>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800289e:	0616      	lsls	r6, r2, #24
 80028a0:	d505      	bpl.n	80028ae <HAL_UART_IRQHandler+0x106>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80028a2:	060d      	lsls	r5, r1, #24
 80028a4:	d503      	bpl.n	80028ae <HAL_UART_IRQHandler+0x106>
    if (huart->TxISR != NULL)
 80028a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80028a8:	b183      	cbz	r3, 80028cc <HAL_UART_IRQHandler+0x124>
      huart->TxISR(huart);
 80028aa:	4620      	mov	r0, r4
 80028ac:	e78c      	b.n	80027c8 <HAL_UART_IRQHandler+0x20>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80028ae:	0650      	lsls	r0, r2, #25
 80028b0:	d50c      	bpl.n	80028cc <HAL_UART_IRQHandler+0x124>
 80028b2:	064a      	lsls	r2, r1, #25
 80028b4:	d50a      	bpl.n	80028cc <HAL_UART_IRQHandler+0x124>
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028bc:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80028be:	2320      	movs	r3, #32
 80028c0:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80028c6:	4620      	mov	r0, r4
 80028c8:	f7ff ff6c 	bl	80027a4 <HAL_UART_TxCpltCallback>
 80028cc:	bd70      	pop	{r4, r5, r6, pc}
 80028ce:	bf00      	nop
 80028d0:	080028d5 	.word	0x080028d5

080028d4 <UART_DMAAbortOnError>:
{
 80028d4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80028d6:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80028d8:	2300      	movs	r3, #0
 80028da:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80028de:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80028e2:	f7ff ff60 	bl	80027a6 <HAL_UART_ErrorCallback>
 80028e6:	bd08      	pop	{r3, pc}

080028e8 <UART_SetConfig>:
  if (UART_INSTANCE_LOWPOWER(huart))
 80028e8:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028ea:	69c1      	ldr	r1, [r0, #28]
{
 80028ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ee:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f0:	6883      	ldr	r3, [r0, #8]
 80028f2:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028f4:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028f6:	4303      	orrs	r3, r0
 80028f8:	6960      	ldr	r0, [r4, #20]
 80028fa:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028fc:	48ba      	ldr	r0, [pc, #744]	; (8002be8 <UART_SetConfig+0x300>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80028fe:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002900:	4028      	ands	r0, r5
 8002902:	4303      	orrs	r3, r0
 8002904:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002906:	6853      	ldr	r3, [r2, #4]
 8002908:	68e0      	ldr	r0, [r4, #12]
 800290a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800290e:	4303      	orrs	r3, r0
 8002910:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002912:	4bb6      	ldr	r3, [pc, #728]	; (8002bec <UART_SetConfig+0x304>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002914:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002916:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 8002918:	bf1c      	itt	ne
 800291a:	6a23      	ldrne	r3, [r4, #32]
 800291c:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800291e:	6893      	ldr	r3, [r2, #8]
 8002920:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002924:	4303      	orrs	r3, r0
 8002926:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002928:	4bb1      	ldr	r3, [pc, #708]	; (8002bf0 <UART_SetConfig+0x308>)
 800292a:	429a      	cmp	r2, r3
 800292c:	d119      	bne.n	8002962 <UART_SetConfig+0x7a>
 800292e:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8002932:	4ab0      	ldr	r2, [pc, #704]	; (8002bf4 <UART_SetConfig+0x30c>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800293c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002940:	5cd3      	ldrb	r3, [r2, r3]
 8002942:	f040 8138 	bne.w	8002bb6 <UART_SetConfig+0x2ce>
    switch (clocksource)
 8002946:	2b08      	cmp	r3, #8
 8002948:	f200 808f 	bhi.w	8002a6a <UART_SetConfig+0x182>
 800294c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8002950:	00ca011a 	.word	0x00ca011a
 8002954:	008d00f9 	.word	0x008d00f9
 8002958:	008d0114 	.word	0x008d0114
 800295c:	008d008d 	.word	0x008d008d
 8002960:	0036      	.short	0x0036
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002962:	4ba5      	ldr	r3, [pc, #660]	; (8002bf8 <UART_SetConfig+0x310>)
 8002964:	429a      	cmp	r2, r3
 8002966:	d107      	bne.n	8002978 <UART_SetConfig+0x90>
 8002968:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800296c:	4aa3      	ldr	r2, [pc, #652]	; (8002bfc <UART_SetConfig+0x314>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f003 030c 	and.w	r3, r3, #12
 8002976:	e7e1      	b.n	800293c <UART_SetConfig+0x54>
 8002978:	4ba1      	ldr	r3, [pc, #644]	; (8002c00 <UART_SetConfig+0x318>)
 800297a:	429a      	cmp	r2, r3
 800297c:	d123      	bne.n	80029c6 <UART_SetConfig+0xde>
 800297e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800298a:	2b10      	cmp	r3, #16
 800298c:	f000 80f1 	beq.w	8002b72 <UART_SetConfig+0x28a>
 8002990:	d80b      	bhi.n	80029aa <UART_SetConfig+0xc2>
 8002992:	2b00      	cmp	r3, #0
 8002994:	f000 80f3 	beq.w	8002b7e <UART_SetConfig+0x296>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002998:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
        ret = HAL_ERROR;
 800299c:	f04f 0201 	mov.w	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80029a0:	f04f 0300 	mov.w	r3, #0
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029a4:	f000 80f8 	beq.w	8002b98 <UART_SetConfig+0x2b0>
 80029a8:	e0a8      	b.n	8002afc <UART_SetConfig+0x214>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029aa:	2b20      	cmp	r3, #32
 80029ac:	f000 80c6 	beq.w	8002b3c <UART_SetConfig+0x254>
 80029b0:	2b30      	cmp	r3, #48	; 0x30
 80029b2:	d1f1      	bne.n	8002998 <UART_SetConfig+0xb0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029b4:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80029b8:	f040 80b8 	bne.w	8002b2c <UART_SetConfig+0x244>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80029bc:	6860      	ldr	r0, [r4, #4]
 80029be:	0843      	lsrs	r3, r0, #1
 80029c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80029c4:	e0c3      	b.n	8002b4e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c6:	4b8f      	ldr	r3, [pc, #572]	; (8002c04 <UART_SetConfig+0x31c>)
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d11e      	bne.n	8002a0a <UART_SetConfig+0x122>
 80029cc:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 80029d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029d8:	2b40      	cmp	r3, #64	; 0x40
 80029da:	f000 80bb 	beq.w	8002b54 <UART_SetConfig+0x26c>
 80029de:	d80a      	bhi.n	80029f6 <UART_SetConfig+0x10e>
 80029e0:	b97b      	cbnz	r3, 8002a02 <UART_SetConfig+0x11a>
  if (UART_INSTANCE_LOWPOWER(huart))
 80029e2:	4b82      	ldr	r3, [pc, #520]	; (8002bec <UART_SetConfig+0x304>)
 80029e4:	429a      	cmp	r2, r3
 80029e6:	f040 80ca 	bne.w	8002b7e <UART_SetConfig+0x296>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80029ea:	f7ff f931 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
        break;
 80029ee:	2300      	movs	r3, #0
    if (lpuart_ker_ck_pres != 0U)
 80029f0:	bbb0      	cbnz	r0, 8002a60 <UART_SetConfig+0x178>
 80029f2:	4602      	mov	r2, r0
 80029f4:	e03a      	b.n	8002a6c <UART_SetConfig+0x184>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	f000 809d 	beq.w	8002b36 <UART_SetConfig+0x24e>
 80029fc:	2bc0      	cmp	r3, #192	; 0xc0
 80029fe:	f000 80b0 	beq.w	8002b62 <UART_SetConfig+0x27a>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a02:	4b7a      	ldr	r3, [pc, #488]	; (8002bec <UART_SetConfig+0x304>)
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1c7      	bne.n	8002998 <UART_SetConfig+0xb0>
 8002a08:	e02f      	b.n	8002a6a <UART_SetConfig+0x182>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a0a:	4b7f      	ldr	r3, [pc, #508]	; (8002c08 <UART_SetConfig+0x320>)
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d111      	bne.n	8002a34 <UART_SetConfig+0x14c>
 8002a10:	f503 33e0 	add.w	r3, r3, #114688	; 0x1c000
 8002a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a20:	f000 8098 	beq.w	8002b54 <UART_SetConfig+0x26c>
 8002a24:	d9dc      	bls.n	80029e0 <UART_SetConfig+0xf8>
 8002a26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2a:	f000 8084 	beq.w	8002b36 <UART_SetConfig+0x24e>
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a32:	e7e4      	b.n	80029fe <UART_SetConfig+0x116>
 8002a34:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <UART_SetConfig+0x304>)
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d1ae      	bne.n	8002998 <UART_SetConfig+0xb0>
 8002a3a:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a4a:	f000 8083 	beq.w	8002b54 <UART_SetConfig+0x26c>
 8002a4e:	d9c7      	bls.n	80029e0 <UART_SetConfig+0xf8>
 8002a50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a54:	d06f      	beq.n	8002b36 <UART_SetConfig+0x24e>
 8002a56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a5a:	e7d0      	b.n	80029fe <UART_SetConfig+0x116>
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002a5c:	486b      	ldr	r0, [pc, #428]	; (8002c0c <UART_SetConfig+0x324>)
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a5e:	2302      	movs	r3, #2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a60:	6862      	ldr	r2, [r4, #4]
 8002a62:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8002a66:	4281      	cmp	r1, r0
 8002a68:	d905      	bls.n	8002a76 <UART_SetConfig+0x18e>
        ret = HAL_ERROR;
 8002a6a:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002a70:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002a72:	4610      	mov	r0, r2
 8002a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002a76:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002a7a:	d8f6      	bhi.n	8002a6a <UART_SetConfig+0x182>
        switch (clocksource)
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d82e      	bhi.n	8002ade <UART_SetConfig+0x1f6>
 8002a80:	e8df f003 	tbb	[pc, r3]
 8002a84:	2d1c2d05 	.word	0x2d1c2d05
 8002a88:	2d2d2d24 	.word	0x2d2d2d24
 8002a8c:	27          	.byte	0x27
 8002a8d:	00          	.byte	0x00
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002a8e:	f7ff f8df 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002a92:	6862      	ldr	r2, [r4, #4]
 8002a94:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a98:	0856      	lsrs	r6, r2, #1
 8002a9a:	2700      	movs	r7, #0
 8002a9c:	fbe1 6700 	umlal	r6, r7, r1, r0
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	4630      	mov	r0, r6
 8002aa4:	4639      	mov	r1, r7
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002aa6:	f7fd fd97 	bl	80005d8 <__aeabi_uldivmod>
            break;
 8002aaa:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <UART_SetConfig+0x328>)
 8002aae:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 8002ab2:	4299      	cmp	r1, r3
 8002ab4:	d8d9      	bhi.n	8002a6a <UART_SetConfig+0x182>
          huart->Instance->BRR = usartdiv;
 8002ab6:	6823      	ldr	r3, [r4, #0]
 8002ab8:	60d8      	str	r0, [r3, #12]
 8002aba:	e7d7      	b.n	8002a6c <UART_SetConfig+0x184>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002abc:	4855      	ldr	r0, [pc, #340]	; (8002c14 <UART_SetConfig+0x32c>)
 8002abe:	0855      	lsrs	r5, r2, #1
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	1940      	adds	r0, r0, r5
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002ac6:	f141 0100 	adc.w	r1, r1, #0
 8002aca:	e7ec      	b.n	8002aa6 <UART_SetConfig+0x1be>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002acc:	f7fe fd7a 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8002ad0:	e7df      	b.n	8002a92 <UART_SetConfig+0x1aa>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002ad2:	0850      	lsrs	r0, r2, #1
 8002ad4:	2100      	movs	r1, #0
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002adc:	e7f3      	b.n	8002ac6 <UART_SetConfig+0x1de>
            ret = HAL_ERROR;
 8002ade:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	e7e3      	b.n	8002aac <UART_SetConfig+0x1c4>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002ae4:	f7ff f8c6 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002ae8:	e04e      	b.n	8002b88 <UART_SetConfig+0x2a0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002aea:	f7ff f8b1 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002aee:	6862      	ldr	r2, [r4, #4]
 8002af0:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002af4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002af8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002afa:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002afc:	f1a3 0010 	sub.w	r0, r3, #16
 8002b00:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002b04:	4288      	cmp	r0, r1
 8002b06:	d8b0      	bhi.n	8002a6a <UART_SetConfig+0x182>
      huart->Instance->BRR = usartdiv;
 8002b08:	6821      	ldr	r1, [r4, #0]
 8002b0a:	60cb      	str	r3, [r1, #12]
 8002b0c:	e7ae      	b.n	8002a6c <UART_SetConfig+0x184>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002b0e:	f7ff f8b1 	bl	8001c74 <HAL_RCC_GetPCLK2Freq>
 8002b12:	e7ec      	b.n	8002aee <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002b14:	6860      	ldr	r0, [r4, #4]
 8002b16:	0843      	lsrs	r3, r0, #1
 8002b18:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002b1c:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b20:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b24:	e7e8      	b.n	8002af8 <UART_SetConfig+0x210>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b26:	f7fe fd4d 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8002b2a:	e7e0      	b.n	8002aee <UART_SetConfig+0x206>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002b2c:	6860      	ldr	r0, [r4, #4]
 8002b2e:	0843      	lsrs	r3, r0, #1
 8002b30:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002b34:	e7f4      	b.n	8002b20 <UART_SetConfig+0x238>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b36:	4b2d      	ldr	r3, [pc, #180]	; (8002bec <UART_SetConfig+0x304>)
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d08f      	beq.n	8002a5c <UART_SetConfig+0x174>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b3c:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b40:	d1e8      	bne.n	8002b14 <UART_SetConfig+0x22c>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002b42:	6860      	ldr	r0, [r4, #4]
 8002b44:	0843      	lsrs	r3, r0, #1
 8002b46:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002b4a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002b4e:	fbb3 f3f0 	udiv	r3, r3, r0
 8002b52:	e01f      	b.n	8002b94 <UART_SetConfig+0x2ac>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <UART_SetConfig+0x304>)
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d10b      	bne.n	8002b72 <UART_SetConfig+0x28a>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002b5a:	f7fe fd33 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
        break;
 8002b5e:	2304      	movs	r3, #4
 8002b60:	e746      	b.n	80029f0 <UART_SetConfig+0x108>
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <UART_SetConfig+0x304>)
 8002b64:	429a      	cmp	r2, r3
 8002b66:	f47f af25 	bne.w	80029b4 <UART_SetConfig+0xcc>
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002b6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b6e:	2308      	movs	r3, #8
 8002b70:	e776      	b.n	8002a60 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b72:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b76:	d1d6      	bne.n	8002b26 <UART_SetConfig+0x23e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b78:	f7fe fd24 	bl	80015c4 <HAL_RCC_GetSysClockFreq>
 8002b7c:	e004      	b.n	8002b88 <UART_SetConfig+0x2a0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b7e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002b82:	d1b2      	bne.n	8002aea <UART_SetConfig+0x202>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002b84:	f7ff f864 	bl	8001c50 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002b88:	6861      	ldr	r1, [r4, #4]
 8002b8a:	084a      	lsrs	r2, r1, #1
 8002b8c:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002b90:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b94:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002b96:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b98:	f1a3 0010 	sub.w	r0, r3, #16
 8002b9c:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002ba0:	4288      	cmp	r0, r1
 8002ba2:	f63f af62 	bhi.w	8002a6a <UART_SetConfig+0x182>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ba6:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 8002baa:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bac:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	60c3      	str	r3, [r0, #12]
 8002bb4:	e75a      	b.n	8002a6c <UART_SetConfig+0x184>
    switch (clocksource)
 8002bb6:	2b08      	cmp	r3, #8
 8002bb8:	f63f af57 	bhi.w	8002a6a <UART_SetConfig+0x182>
 8002bbc:	a201      	add	r2, pc, #4	; (adr r2, 8002bc4 <UART_SetConfig+0x2dc>)
 8002bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc2:	bf00      	nop
 8002bc4:	08002aeb 	.word	0x08002aeb
 8002bc8:	08002b0f 	.word	0x08002b0f
 8002bcc:	08002b15 	.word	0x08002b15
 8002bd0:	08002a6b 	.word	0x08002a6b
 8002bd4:	08002b27 	.word	0x08002b27
 8002bd8:	08002a6b 	.word	0x08002a6b
 8002bdc:	08002a6b 	.word	0x08002a6b
 8002be0:	08002a6b 	.word	0x08002a6b
 8002be4:	08002b2d 	.word	0x08002b2d
 8002be8:	efff69f3 	.word	0xefff69f3
 8002bec:	40008000 	.word	0x40008000
 8002bf0:	40013800 	.word	0x40013800
 8002bf4:	08005608 	.word	0x08005608
 8002bf8:	40004400 	.word	0x40004400
 8002bfc:	0800560c 	.word	0x0800560c
 8002c00:	40004800 	.word	0x40004800
 8002c04:	40004c00 	.word	0x40004c00
 8002c08:	40005000 	.word	0x40005000
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	000ffcff 	.word	0x000ffcff
 8002c14:	f4240000 	.word	0xf4240000

08002c18 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c18:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002c1a:	07da      	lsls	r2, r3, #31
{
 8002c1c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c1e:	d506      	bpl.n	8002c2e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c20:	6801      	ldr	r1, [r0, #0]
 8002c22:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002c24:	684a      	ldr	r2, [r1, #4]
 8002c26:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002c2a:	4322      	orrs	r2, r4
 8002c2c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c2e:	079c      	lsls	r4, r3, #30
 8002c30:	d506      	bpl.n	8002c40 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c32:	6801      	ldr	r1, [r0, #0]
 8002c34:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002c36:	684a      	ldr	r2, [r1, #4]
 8002c38:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c3c:	4322      	orrs	r2, r4
 8002c3e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c40:	0759      	lsls	r1, r3, #29
 8002c42:	d506      	bpl.n	8002c52 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002c44:	6801      	ldr	r1, [r0, #0]
 8002c46:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002c48:	684a      	ldr	r2, [r1, #4]
 8002c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c4e:	4322      	orrs	r2, r4
 8002c50:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c52:	071a      	lsls	r2, r3, #28
 8002c54:	d506      	bpl.n	8002c64 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c56:	6801      	ldr	r1, [r0, #0]
 8002c58:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002c5a:	684a      	ldr	r2, [r1, #4]
 8002c5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c60:	4322      	orrs	r2, r4
 8002c62:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c64:	06dc      	lsls	r4, r3, #27
 8002c66:	d506      	bpl.n	8002c76 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c68:	6801      	ldr	r1, [r0, #0]
 8002c6a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002c6c:	688a      	ldr	r2, [r1, #8]
 8002c6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002c72:	4322      	orrs	r2, r4
 8002c74:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c76:	0699      	lsls	r1, r3, #26
 8002c78:	d506      	bpl.n	8002c88 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c7a:	6801      	ldr	r1, [r0, #0]
 8002c7c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002c7e:	688a      	ldr	r2, [r1, #8]
 8002c80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c84:	4322      	orrs	r2, r4
 8002c86:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c88:	065a      	lsls	r2, r3, #25
 8002c8a:	d50f      	bpl.n	8002cac <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c8c:	6801      	ldr	r1, [r0, #0]
 8002c8e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002c90:	684a      	ldr	r2, [r1, #4]
 8002c92:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002c96:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c98:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c9c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c9e:	d105      	bne.n	8002cac <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ca0:	684a      	ldr	r2, [r1, #4]
 8002ca2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002ca4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002ca8:	4322      	orrs	r2, r4
 8002caa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	d506      	bpl.n	8002cbe <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cb0:	6802      	ldr	r2, [r0, #0]
 8002cb2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002cb4:	6853      	ldr	r3, [r2, #4]
 8002cb6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	6053      	str	r3, [r2, #4]
 8002cbe:	bd10      	pop	{r4, pc}

08002cc0 <UART_WaitOnFlagUntilTimeout>:
{
 8002cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002cc4:	9d06      	ldr	r5, [sp, #24]
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	460f      	mov	r7, r1
 8002cca:	4616      	mov	r6, r2
 8002ccc:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cce:	6821      	ldr	r1, [r4, #0]
 8002cd0:	69ca      	ldr	r2, [r1, #28]
 8002cd2:	ea37 0302 	bics.w	r3, r7, r2
 8002cd6:	bf0c      	ite	eq
 8002cd8:	2201      	moveq	r2, #1
 8002cda:	2200      	movne	r2, #0
 8002cdc:	42b2      	cmp	r2, r6
 8002cde:	d002      	beq.n	8002ce6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8002ce0:	2000      	movs	r0, #0
}
 8002ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002ce6:	1c6b      	adds	r3, r5, #1
 8002ce8:	d0f2      	beq.n	8002cd0 <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cea:	f7fd ff2f 	bl	8000b4c <HAL_GetTick>
 8002cee:	eba0 0008 	sub.w	r0, r0, r8
 8002cf2:	4285      	cmp	r5, r0
 8002cf4:	d301      	bcc.n	8002cfa <UART_WaitOnFlagUntilTimeout+0x3a>
 8002cf6:	2d00      	cmp	r5, #0
 8002cf8:	d1e9      	bne.n	8002cce <UART_WaitOnFlagUntilTimeout+0xe>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002cfa:	6823      	ldr	r3, [r4, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002d02:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d04:	689a      	ldr	r2, [r3, #8]
 8002d06:	f022 0201 	bic.w	r2, r2, #1
 8002d0a:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002d10:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8002d12:	2300      	movs	r3, #0
 8002d14:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 8002d18:	2003      	movs	r0, #3
 8002d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002d1e <UART_CheckIdleState>:
{
 8002d1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002d20:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	2600      	movs	r6, #0
 8002d24:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8002d26:	f7fd ff11 	bl	8000b4c <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d2a:	6823      	ldr	r3, [r4, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002d30:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002d32:	d415      	bmi.n	8002d60 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d34:	6823      	ldr	r3, [r4, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	075b      	lsls	r3, r3, #29
 8002d3a:	d50a      	bpl.n	8002d52 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d40:	9300      	str	r3, [sp, #0]
 8002d42:	2200      	movs	r2, #0
 8002d44:	462b      	mov	r3, r5
 8002d46:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d4a:	4620      	mov	r0, r4
 8002d4c:	f7ff ffb8 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002d50:	b990      	cbnz	r0, 8002d78 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8002d52:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002d54:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8002d56:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8002d58:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8002d5e:	e00c      	b.n	8002d7a <UART_CheckIdleState+0x5c>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	4632      	mov	r2, r6
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d6e:	4620      	mov	r0, r4
 8002d70:	f7ff ffa6 	bl	8002cc0 <UART_WaitOnFlagUntilTimeout>
 8002d74:	2800      	cmp	r0, #0
 8002d76:	d0dd      	beq.n	8002d34 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002d78:	2003      	movs	r0, #3
}
 8002d7a:	b002      	add	sp, #8
 8002d7c:	bd70      	pop	{r4, r5, r6, pc}

08002d7e <HAL_UART_Init>:
{
 8002d7e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8002d80:	4604      	mov	r4, r0
 8002d82:	b340      	cbz	r0, 8002dd6 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002d84:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002d86:	b91b      	cbnz	r3, 8002d90 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002d88:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002d8c:	f002 f9e8 	bl	8005160 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8002d90:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002d92:	2324      	movs	r3, #36	; 0x24
 8002d94:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002d96:	6813      	ldr	r3, [r2, #0]
 8002d98:	f023 0301 	bic.w	r3, r3, #1
 8002d9c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9e:	4620      	mov	r0, r4
 8002da0:	f7ff fda2 	bl	80028e8 <UART_SetConfig>
 8002da4:	2801      	cmp	r0, #1
 8002da6:	d016      	beq.n	8002dd6 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002da8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002daa:	b113      	cbz	r3, 8002db2 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002dac:	4620      	mov	r0, r4
 8002dae:	f7ff ff33 	bl	8002c18 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db2:	6823      	ldr	r3, [r4, #0]
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbc:	689a      	ldr	r2, [r3, #8]
 8002dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dc2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8002dc4:	681a      	ldr	r2, [r3, #0]
 8002dc6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8002dca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8002dcc:	601a      	str	r2, [r3, #0]
}
 8002dce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8002dd2:	f7ff bfa4 	b.w	8002d1e <UART_CheckIdleState>
}
 8002dd6:	2001      	movs	r0, #1
 8002dd8:	bd10      	pop	{r4, pc}

08002dda <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002dda:	4770      	bx	lr

08002ddc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8002ddc:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <USB_CoreReset+0x2c>)
  uint32_t count = 0U;

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8002dde:	3b01      	subs	r3, #1
 8002de0:	d101      	bne.n	8002de6 <USB_CoreReset+0xa>
    {
      return HAL_TIMEOUT;
 8002de2:	2003      	movs	r0, #3
 8002de4:	4770      	bx	lr
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8002de6:	6902      	ldr	r2, [r0, #16]
 8002de8:	2a00      	cmp	r2, #0
 8002dea:	daf8      	bge.n	8002dde <USB_CoreReset+0x2>

  /* Core Soft Reset */
  count = 0U;
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8002dec:	6903      	ldr	r3, [r0, #16]
 8002dee:	4a06      	ldr	r2, [pc, #24]	; (8002e08 <USB_CoreReset+0x2c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6103      	str	r3, [r0, #16]

  do
  {
    if (++count > 200000U)
 8002df6:	3a01      	subs	r2, #1
 8002df8:	d0f3      	beq.n	8002de2 <USB_CoreReset+0x6>
    {
      return HAL_TIMEOUT;
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8002dfa:	6903      	ldr	r3, [r0, #16]
 8002dfc:	f013 0301 	ands.w	r3, r3, #1
 8002e00:	d1f9      	bne.n	8002df6 <USB_CoreReset+0x1a>

  return HAL_OK;
 8002e02:	4618      	mov	r0, r3
}
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	00030d41 	.word	0x00030d41

08002e0c <USB_CoreInit>:
{
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	b538      	push	{r3, r4, r5, lr}
 8002e10:	ad05      	add	r5, sp, #20
 8002e12:	e885 000e 	stmia.w	r5, {r1, r2, r3}
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e18:	2b01      	cmp	r3, #1
{
 8002e1a:	4604      	mov	r4, r0
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e1c:	d119      	bne.n	8002e52 <USB_CoreInit+0x46>
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e1e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e24:	6383      	str	r3, [r0, #56]	; 0x38
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e26:	68c3      	ldr	r3, [r0, #12]
 8002e28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e30:	60c3      	str	r3, [r0, #12]
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e32:	68c3      	ldr	r3, [r0, #12]
 8002e34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002e38:	60c3      	str	r3, [r0, #12]
    if (cfg.use_external_vbus == 1U)
 8002e3a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8002e3c:	2b01      	cmp	r3, #1
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e3e:	bf02      	ittt	eq
 8002e40:	68c3      	ldreq	r3, [r0, #12]
 8002e42:	f443 1380 	orreq.w	r3, r3, #1048576	; 0x100000
 8002e46:	60c3      	streq	r3, [r0, #12]
}
 8002e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e4c:	b004      	add	sp, #16
    ret = USB_CoreReset(USBx);
 8002e4e:	f7ff bfc5 	b.w	8002ddc <USB_CoreReset>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e52:	68c3      	ldr	r3, [r0, #12]
 8002e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002e58:	60c3      	str	r3, [r0, #12]
    ret = USB_CoreReset(USBx);
 8002e5a:	f7ff ffbf 	bl	8002ddc <USB_CoreReset>
    if (cfg.battery_charging_enable == 0U)
 8002e5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8002e60:	b93b      	cbnz	r3, 8002e72 <USB_CoreInit+0x66>
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002e62:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e68:	63a3      	str	r3, [r4, #56]	; 0x38
}
 8002e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e6e:	b004      	add	sp, #16
 8002e70:	4770      	bx	lr
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e78:	e7f6      	b.n	8002e68 <USB_CoreInit+0x5c>

08002e7a <USB_DisableGlobalInt>:
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002e7a:	6883      	ldr	r3, [r0, #8]
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6083      	str	r3, [r0, #8]
}
 8002e82:	2000      	movs	r0, #0
 8002e84:	4770      	bx	lr

08002e86 <USB_SetCurrentMode>:
{
 8002e86:	b508      	push	{r3, lr}
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e88:	68c3      	ldr	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002e8a:	2901      	cmp	r1, #1
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002e8c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8002e90:	60c3      	str	r3, [r0, #12]
  if (mode == USB_HOST_MODE)
 8002e92:	d108      	bne.n	8002ea6 <USB_SetCurrentMode+0x20>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002e94:	68c3      	ldr	r3, [r0, #12]
 8002e96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002e9a:	60c3      	str	r3, [r0, #12]
  HAL_Delay(50U);
 8002e9c:	2032      	movs	r0, #50	; 0x32
 8002e9e:	f7fd fe5b 	bl	8000b58 <HAL_Delay>
  return HAL_OK;
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd08      	pop	{r3, pc}
  else if (mode == USB_DEVICE_MODE)
 8002ea6:	b919      	cbnz	r1, 8002eb0 <USB_SetCurrentMode+0x2a>
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002ea8:	68c3      	ldr	r3, [r0, #12]
 8002eaa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002eae:	e7f4      	b.n	8002e9a <USB_SetCurrentMode+0x14>
    return HAL_ERROR;
 8002eb0:	2001      	movs	r0, #1
}
 8002eb2:	bd08      	pop	{r3, pc}

08002eb4 <USB_FlushTxFifo>:
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8002eb4:	0189      	lsls	r1, r1, #6
 8002eb6:	f041 0120 	orr.w	r1, r1, #32
 8002eba:	4a06      	ldr	r2, [pc, #24]	; (8002ed4 <USB_FlushTxFifo+0x20>)
 8002ebc:	6101      	str	r1, [r0, #16]
    if (++count > 200000U)
 8002ebe:	3a01      	subs	r2, #1
 8002ec0:	d005      	beq.n	8002ece <USB_FlushTxFifo+0x1a>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8002ec2:	6903      	ldr	r3, [r0, #16]
 8002ec4:	f013 0320 	ands.w	r3, r3, #32
 8002ec8:	d1f9      	bne.n	8002ebe <USB_FlushTxFifo+0xa>
  return HAL_OK;
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002ece:	2003      	movs	r0, #3
}
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	00030d41 	.word	0x00030d41

08002ed8 <USB_FlushRxFifo>:
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8002ed8:	2310      	movs	r3, #16
 8002eda:	4a06      	ldr	r2, [pc, #24]	; (8002ef4 <USB_FlushRxFifo+0x1c>)
 8002edc:	6103      	str	r3, [r0, #16]
    if (++count > 200000U)
 8002ede:	3a01      	subs	r2, #1
 8002ee0:	d005      	beq.n	8002eee <USB_FlushRxFifo+0x16>
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8002ee2:	6903      	ldr	r3, [r0, #16]
 8002ee4:	f013 0310 	ands.w	r3, r3, #16
 8002ee8:	d1f9      	bne.n	8002ede <USB_FlushRxFifo+0x6>
  return HAL_OK;
 8002eea:	4618      	mov	r0, r3
 8002eec:	4770      	bx	lr
      return HAL_TIMEOUT;
 8002eee:	2003      	movs	r0, #3
}
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	00030d41 	.word	0x00030d41

08002ef8 <USB_SetDevSpeed>:
  USBx_DEVICE->DCFG |= speed;
 8002ef8:	f8d0 3800 	ldr.w	r3, [r0, #2048]	; 0x800
 8002efc:	4319      	orrs	r1, r3
 8002efe:	f8c0 1800 	str.w	r1, [r0, #2048]	; 0x800
}
 8002f02:	2000      	movs	r0, #0
 8002f04:	4770      	bx	lr
	...

08002f08 <USB_DevInit>:
{
 8002f08:	b084      	sub	sp, #16
 8002f0a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f0e:	4604      	mov	r4, r0
 8002f10:	a809      	add	r0, sp, #36	; 0x24
 8002f12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  for (i = 0U; i < 15U; i++)
 8002f16:	2300      	movs	r3, #0
 8002f18:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8002f1a:	460f      	mov	r7, r1
    USBx->DIEPTXF[i] = 0U;
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8002f22:	eb04 0282 	add.w	r2, r4, r2, lsl #2
  for (i = 0U; i < 15U; i++)
 8002f26:	3301      	adds	r3, #1
 8002f28:	2b0f      	cmp	r3, #15
    USBx->DIEPTXF[i] = 0U;
 8002f2a:	6051      	str	r1, [r2, #4]
  for (i = 0U; i < 15U; i++)
 8002f2c:	d1f7      	bne.n	8002f1e <USB_DevInit+0x16>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002f2e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
  if (cfg.vbus_sensing_enable == 0U)
 8002f30:	2e00      	cmp	r6, #0
 8002f32:	d162      	bne.n	8002ffa <USB_DevInit+0xf2>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8002f34:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f38:	63a3      	str	r3, [r4, #56]	; 0x38
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8002f3a:	6823      	ldr	r3, [r4, #0]
 8002f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f40:	6023      	str	r3, [r4, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8002f42:	6823      	ldr	r3, [r4, #0]
 8002f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f48:	6023      	str	r3, [r4, #0]
  USBx_PCGCCTL = 0U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	f8c4 3e00 	str.w	r3, [r4, #3584]	; 0xe00
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f50:	f8d4 3800 	ldr.w	r3, [r4, #2048]	; 0x800
 8002f54:	f8c4 3800 	str.w	r3, [r4, #2048]	; 0x800
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8002f58:	2103      	movs	r1, #3
 8002f5a:	4620      	mov	r0, r4
 8002f5c:	f7ff ffcc 	bl	8002ef8 <USB_SetDevSpeed>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f60:	2110      	movs	r1, #16
 8002f62:	4620      	mov	r0, r4
 8002f64:	f7ff ffa6 	bl	8002eb4 <USB_FlushTxFifo>
 8002f68:	4601      	mov	r1, r0
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f6a:	4620      	mov	r0, r4
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8002f6c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8002f70:	f7ff ffb2 	bl	8002ed8 <USB_FlushRxFifo>
 8002f74:	2800      	cmp	r0, #0
 8002f76:	d144      	bne.n	8003002 <USB_DevInit+0xfa>
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8002f78:	1c08      	adds	r0, r1, #0
 8002f7a:	bf18      	it	ne
 8002f7c:	2001      	movne	r0, #1
  USBx_DEVICE->DIEPMSK = 0U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	612b      	str	r3, [r5, #16]
 8002f82:	f504 6210 	add.w	r2, r4, #2304	; 0x900
  USBx_DEVICE->DOEPMSK = 0U;
 8002f86:	616b      	str	r3, [r5, #20]
      USBx_INEP(i)->DIEPCTL = 0U;
 8002f88:	4619      	mov	r1, r3
  USBx_DEVICE->DAINTMSK = 0U;
 8002f8a:	61eb      	str	r3, [r5, #28]
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8002f8c:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8002f90:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8002f94:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002f98:	42bb      	cmp	r3, r7
 8002f9a:	d134      	bne.n	8003006 <USB_DevInit+0xfe>
 8002f9c:	2100      	movs	r1, #0
 8002f9e:	f504 6230 	add.w	r2, r4, #2816	; 0xb00
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8002fa2:	460f      	mov	r7, r1
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8002fa4:	f04f 4e90 	mov.w	lr, #1207959552	; 0x48000000
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8002fa8:	f04f 6c00 	mov.w	ip, #134217728	; 0x8000000
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8002fac:	f64f 387f 	movw	r8, #64383	; 0xfb7f
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8002fb0:	428b      	cmp	r3, r1
 8002fb2:	d13b      	bne.n	800302c <USB_DevInit+0x124>
  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8002fb4:	692b      	ldr	r3, [r5, #16]
 8002fb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fba:	612b      	str	r3, [r5, #16]
  USBx->GINTMSK = 0U;
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	61a3      	str	r3, [r4, #24]
  USBx->GINTSTS = 0xBFFFFFFFU;
 8002fc0:	f06f 4380 	mvn.w	r3, #1073741824	; 0x40000000
 8002fc4:	6163      	str	r3, [r4, #20]
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8002fc6:	69a3      	ldr	r3, [r4, #24]
 8002fc8:	f043 0310 	orr.w	r3, r3, #16
 8002fcc:	61a3      	str	r3, [r4, #24]
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8002fce:	69a2      	ldr	r2, [r4, #24]
 8002fd0:	4b20      	ldr	r3, [pc, #128]	; (8003054 <USB_DevInit+0x14c>)
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	61a3      	str	r3, [r4, #24]
  if (cfg.Sof_enable != 0U)
 8002fd6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8002fd8:	b11b      	cbz	r3, 8002fe2 <USB_DevInit+0xda>
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8002fda:	69a3      	ldr	r3, [r4, #24]
 8002fdc:	f043 0308 	orr.w	r3, r3, #8
 8002fe0:	61a3      	str	r3, [r4, #24]
  if (cfg.vbus_sensing_enable == 1U)
 8002fe2:	2e01      	cmp	r6, #1
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8002fe4:	bf01      	itttt	eq
 8002fe6:	69a3      	ldreq	r3, [r4, #24]
 8002fe8:	f043 4380 	orreq.w	r3, r3, #1073741824	; 0x40000000
 8002fec:	f043 0304 	orreq.w	r3, r3, #4
 8002ff0:	61a3      	streq	r3, [r4, #24]
}
 8002ff2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002ff6:	b004      	add	sp, #16
 8002ff8:	4770      	bx	lr
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8002ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ffe:	63a3      	str	r3, [r4, #56]	; 0x38
 8003000:	e7a3      	b.n	8002f4a <USB_DevInit+0x42>
 8003002:	2001      	movs	r0, #1
 8003004:	e7bb      	b.n	8002f7e <USB_DevInit+0x76>
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003006:	f8d2 9000 	ldr.w	r9, [r2]
 800300a:	f1b9 0f00 	cmp.w	r9, #0
 800300e:	da0b      	bge.n	8003028 <USB_DevInit+0x120>
      if (i == 0U)
 8003010:	b93b      	cbnz	r3, 8003022 <USB_DevInit+0x11a>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003012:	f8c2 c000 	str.w	ip, [r2]
    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003016:	6111      	str	r1, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003018:	3301      	adds	r3, #1
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800301a:	f8c2 8008 	str.w	r8, [r2, #8]
 800301e:	3220      	adds	r2, #32
 8003020:	e7ba      	b.n	8002f98 <USB_DevInit+0x90>
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003022:	f8c2 e000 	str.w	lr, [r2]
 8003026:	e7f6      	b.n	8003016 <USB_DevInit+0x10e>
      USBx_INEP(i)->DIEPCTL = 0U;
 8003028:	6011      	str	r1, [r2, #0]
 800302a:	e7f4      	b.n	8003016 <USB_DevInit+0x10e>
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800302c:	f8d2 9000 	ldr.w	r9, [r2]
 8003030:	f1b9 0f00 	cmp.w	r9, #0
 8003034:	da0b      	bge.n	800304e <USB_DevInit+0x146>
      if (i == 0U)
 8003036:	b939      	cbnz	r1, 8003048 <USB_DevInit+0x140>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003038:	f8c2 c000 	str.w	ip, [r2]
    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800303c:	6117      	str	r7, [r2, #16]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800303e:	3101      	adds	r1, #1
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003040:	f8c2 8008 	str.w	r8, [r2, #8]
 8003044:	3220      	adds	r2, #32
 8003046:	e7b3      	b.n	8002fb0 <USB_DevInit+0xa8>
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003048:	f8c2 e000 	str.w	lr, [r2]
 800304c:	e7f6      	b.n	800303c <USB_DevInit+0x134>
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800304e:	6017      	str	r7, [r2, #0]
 8003050:	e7f4      	b.n	800303c <USB_DevInit+0x134>
 8003052:	bf00      	nop
 8003054:	803c3800 	.word	0x803c3800

08003058 <USB_DevDisconnect>:
{
 8003058:	b508      	push	{r3, lr}
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800305a:	f8d0 3804 	ldr.w	r3, [r0, #2052]	; 0x804
 800305e:	f043 0302 	orr.w	r3, r3, #2
 8003062:	f8c0 3804 	str.w	r3, [r0, #2052]	; 0x804
  HAL_Delay(3U);
 8003066:	2003      	movs	r0, #3
 8003068:	f7fd fd76 	bl	8000b58 <HAL_Delay>
}
 800306c:	2000      	movs	r0, #0
 800306e:	bd08      	pop	{r3, pc}

08003070 <aci_gap_init_IDB05A1>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

tBleStatus aci_gap_init_IDB05A1(uint8_t role, uint8_t privacy_enabled, uint8_t device_name_char_len, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 8003070:	b570      	push	{r4, r5, r6, lr}
 8003072:	b08a      	sub	sp, #40	; 0x28
 
  cp.role = role;
  cp.privacy_enabled = privacy_enabled;
  cp.device_name_char_len = device_name_char_len;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003074:	2400      	movs	r4, #0
  cp.role = role;
 8003076:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.privacy_enabled = privacy_enabled;
 800307a:	f88d 1005 	strb.w	r1, [sp, #5]
  cp.device_name_char_len = device_name_char_len;
 800307e:	f88d 2006 	strb.w	r2, [sp, #6]
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003082:	4621      	mov	r1, r4
 8003084:	2218      	movs	r2, #24
 8003086:	a804      	add	r0, sp, #16
{
 8003088:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800308a:	9402      	str	r4, [sp, #8]
 800308c:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003090:	f002 f9c7 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003094:	233f      	movs	r3, #63	; 0x3f
 8003096:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 800309a:	238a      	movs	r3, #138	; 0x8a
 800309c:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 80030a0:	ab01      	add	r3, sp, #4
 80030a2:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 80030a4:	2303      	movs	r3, #3
 80030a6:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80030a8:	ad02      	add	r5, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 80030aa:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 80030ac:	4621      	mov	r1, r4
 80030ae:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 80030b0:	9508      	str	r5, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 80030b2:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 80030b4:	f000 fb94 	bl	80037e0 <hci_send_req>
 80030b8:	42a0      	cmp	r0, r4
 80030ba:	db15      	blt.n	80030e8 <aci_gap_init_IDB05A1+0x78>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80030bc:	f89d 0008 	ldrb.w	r0, [sp, #8]
 80030c0:	b980      	cbnz	r0, 80030e4 <aci_gap_init_IDB05A1+0x74>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 80030c2:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80030c4:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *service_handle = btohs(resp.service_handle);
 80030c8:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80030cc:	8032      	strh	r2, [r6, #0]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 80030ce:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80030d2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80030d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80030d8:	8013      	strh	r3, [r2, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 80030da:	9b03      	ldr	r3, [sp, #12]
 80030dc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80030de:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80030e2:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80030e4:	b00a      	add	sp, #40	; 0x28
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 80030e8:	20ff      	movs	r0, #255	; 0xff
 80030ea:	e7fb      	b.n	80030e4 <aci_gap_init_IDB05A1+0x74>

080030ec <aci_gap_init_IDB04A1>:

tBleStatus aci_gap_init_IDB04A1(uint8_t role, uint16_t* service_handle, uint16_t* dev_name_char_handle, uint16_t* appearance_char_handle)
{
 80030ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80030f0:	b08a      	sub	sp, #40	; 0x28
  gap_init_cp_IDB04A1 cp;
  gap_init_rp resp;

  cp.role = role;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 80030f2:	2400      	movs	r4, #0
  cp.role = role;
 80030f4:	f88d 0004 	strb.w	r0, [sp, #4]
{
 80030f8:	4688      	mov	r8, r1
 80030fa:	4616      	mov	r6, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80030fc:	4621      	mov	r1, r4
 80030fe:	2218      	movs	r2, #24
 8003100:	a804      	add	r0, sp, #16
{
 8003102:	461d      	mov	r5, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003104:	9402      	str	r4, [sp, #8]
 8003106:	f8cd 400b 	str.w	r4, [sp, #11]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800310a:	f002 f98a 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800310e:	233f      	movs	r3, #63	; 0x3f
 8003110:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_GAP_INIT;
 8003114:	238a      	movs	r3, #138	; 0x8a
 8003116:	f8ad 3012 	strh.w	r3, [sp, #18]
  rq.cparam = &cp;
 800311a:	ab01      	add	r3, sp, #4
 800311c:	9306      	str	r3, [sp, #24]
  rq.clen = sizeof(cp);
 800311e:	2301      	movs	r3, #1
 8003120:	9307      	str	r3, [sp, #28]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003122:	af02      	add	r7, sp, #8
  rq.rparam = &resp;
  rq.rlen = GAP_INIT_RP_SIZE;
 8003124:	2307      	movs	r3, #7
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003126:	4621      	mov	r1, r4
 8003128:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 800312a:	9708      	str	r7, [sp, #32]
  rq.rlen = GAP_INIT_RP_SIZE;
 800312c:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800312e:	f000 fb57 	bl	80037e0 <hci_send_req>
 8003132:	42a0      	cmp	r0, r4
 8003134:	db15      	blt.n	8003162 <aci_gap_init_IDB04A1+0x76>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 8003136:	f89d 0008 	ldrb.w	r0, [sp, #8]
 800313a:	b978      	cbnz	r0, 800315c <aci_gap_init_IDB04A1+0x70>
    return resp.status;
  }
  
  *service_handle = btohs(resp.service_handle);
 800313c:	9a02      	ldr	r2, [sp, #8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800313e:	f89d 300c 	ldrb.w	r3, [sp, #12]
  *service_handle = btohs(resp.service_handle);
 8003142:	f3c2 220f 	ubfx	r2, r2, #8, #16
 8003146:	f8a8 2000 	strh.w	r2, [r8]
  *dev_name_char_handle = btohs(resp.dev_name_char_handle);
 800314a:	f89d 200b 	ldrb.w	r2, [sp, #11]
 800314e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8003152:	8032      	strh	r2, [r6, #0]
  *appearance_char_handle = btohs(resp.appearance_char_handle);
 8003154:	9a03      	ldr	r2, [sp, #12]
 8003156:	f3c2 220f 	ubfx	r2, r2, #8, #16
 800315a:	802a      	strh	r2, [r5, #0]
  
  return 0;
}
 800315c:	b00a      	add	sp, #40	; 0x28
 800315e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return BLE_STATUS_TIMEOUT;
 8003162:	20ff      	movs	r0, #255	; 0xff
 8003164:	e7fa      	b.n	800315c <aci_gap_init_IDB04A1+0x70>

08003166 <aci_gap_set_discoverable>:

tBleStatus aci_gap_set_discoverable(uint8_t AdvType, uint16_t AdvIntervMin, uint16_t AdvIntervMax,
                             uint8_t OwnAddrType, uint8_t AdvFilterPolicy, uint8_t LocalNameLen,
                             const char *LocalName, uint8_t ServiceUUIDLen, uint8_t* ServiceUUIDList,
                             uint16_t SlaveConnIntervMin, uint16_t SlaveConnIntervMax)
{
 8003166:	b570      	push	{r4, r5, r6, lr}
 8003168:	b092      	sub	sp, #72	; 0x48
 800316a:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 800316e:	f89d 4064 	ldrb.w	r4, [sp, #100]	; 0x64
  struct hci_request rq;
  uint8_t status;    
  uint8_t buffer[40];
  uint8_t indx = 0;
  
  if ((LocalNameLen+ServiceUUIDLen+14) > sizeof(buffer))
 8003172:	192e      	adds	r6, r5, r4
 8003174:	2e1a      	cmp	r6, #26
 8003176:	dc4f      	bgt.n	8003218 <aci_gap_set_discoverable+0xb2>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvType;
 8003178:	f88d 0020 	strb.w	r0, [sp, #32]
  indx++;
  
  AdvIntervMin = htobs(AdvIntervMin);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMin, 2);
 800317c:	f8ad 1021 	strh.w	r1, [sp, #33]	; 0x21
  indx +=  2;
    
  AdvIntervMax = htobs(AdvIntervMax);
  BLUENRG_memcpy(buffer + indx, &AdvIntervMax, 2);
 8003180:	f8ad 2023 	strh.w	r2, [sp, #35]	; 0x23
  indx +=  2;
    
  buffer[indx] = OwnAddrType;
 8003184:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  indx++;
    
  buffer[indx] = LocalNameLen;
  indx++;
    
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003188:	462a      	mov	r2, r5
  buffer[indx] = AdvFilterPolicy;
 800318a:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800318e:	9918      	ldr	r1, [sp, #96]	; 0x60
  buffer[indx] = AdvFilterPolicy;
 8003190:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 8003194:	a80a      	add	r0, sp, #40	; 0x28
  buffer[indx] = LocalNameLen;
 8003196:	f88d 5027 	strb.w	r5, [sp, #39]	; 0x27
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 800319a:	f002 f937 	bl	800540c <memcpy>
  indx +=  LocalNameLen;
 800319e:	f105 0308 	add.w	r3, r5, #8
  
  buffer[indx] = ServiceUUIDLen;
 80031a2:	aa12      	add	r2, sp, #72	; 0x48
 80031a4:	fa52 f383 	uxtab	r3, r2, r3
  indx++;
 80031a8:	3509      	adds	r5, #9
  BLUENRG_memcpy(buffer + indx, LocalName, LocalNameLen);
 80031aa:	ae08      	add	r6, sp, #32
  indx++;
 80031ac:	b2ed      	uxtb	r5, r5
  buffer[indx] = ServiceUUIDLen;
 80031ae:	f803 4c28 	strb.w	r4, [r3, #-40]

  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80031b2:	4622      	mov	r2, r4
 80031b4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80031b6:	1970      	adds	r0, r6, r5
  indx +=  ServiceUUIDLen;  
 80031b8:	442c      	add	r4, r5
  BLUENRG_memcpy(buffer + indx, ServiceUUIDList, ServiceUUIDLen);
 80031ba:	f002 f927 	bl	800540c <memcpy>
  indx +=  ServiceUUIDLen;  
 80031be:	b2e4      	uxtb	r4, r4

  SlaveConnIntervMin = htobs(SlaveConnIntervMin);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMin, 2);
 80031c0:	ab12      	add	r3, sp, #72	; 0x48
 80031c2:	4423      	add	r3, r4
 80031c4:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 80031c8:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;
 80031cc:	1ca3      	adds	r3, r4, #2
  
  SlaveConnIntervMax = htobs(SlaveConnIntervMax);
  BLUENRG_memcpy(buffer + indx, &SlaveConnIntervMax, 2);
 80031ce:	aa12      	add	r2, sp, #72	; 0x48
 80031d0:	fa52 f383 	uxtab	r3, r2, r3
 80031d4:	f8bd 2070 	ldrh.w	r2, [sp, #112]	; 0x70
 80031d8:	f823 2c28 	strh.w	r2, [r3, #-40]
  indx +=  2;    

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80031dc:	2100      	movs	r1, #0
 80031de:	2218      	movs	r2, #24
 80031e0:	a802      	add	r0, sp, #8
 80031e2:	f002 f91e 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80031e6:	233f      	movs	r3, #63	; 0x3f
 80031e8:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_SET_DISCOVERABLE;
 80031ec:	2383      	movs	r3, #131	; 0x83
 80031ee:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  2;    
 80031f2:	3404      	adds	r4, #4
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80031f4:	f10d 0307 	add.w	r3, sp, #7
 80031f8:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80031fa:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80031fc:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80031fe:	2100      	movs	r1, #0
 8003200:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 8003202:	9604      	str	r6, [sp, #16]
  rq.clen = indx;
 8003204:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003206:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003208:	f000 faea 	bl	80037e0 <hci_send_req>
 800320c:	2800      	cmp	r0, #0
 800320e:	db05      	blt.n	800321c <aci_gap_set_discoverable+0xb6>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003210:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 8003214:	b012      	add	sp, #72	; 0x48
 8003216:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003218:	2042      	movs	r0, #66	; 0x42
 800321a:	e7fb      	b.n	8003214 <aci_gap_set_discoverable+0xae>
    return BLE_STATUS_TIMEOUT;
 800321c:	20ff      	movs	r0, #255	; 0xff
 800321e:	e7f9      	b.n	8003214 <aci_gap_set_discoverable+0xae>

08003220 <aci_gap_set_auth_requirement>:
                                        uint8_t min_encryption_key_size,
                                        uint8_t max_encryption_key_size,
                                        uint8_t use_fixed_pin,
                                        uint32_t fixed_pin,
                                        uint8_t bonding_mode)
{
 8003220:	b510      	push	{r4, lr}
 8003222:	b08e      	sub	sp, #56	; 0x38
  struct hci_request rq;
  gap_set_auth_requirement_cp cp;    
  uint8_t status;
    
  cp.mitm_mode = mitm_mode;
 8003224:	f88d 001c 	strb.w	r0, [sp, #28]
  cp.oob_enable = oob_enable;
 8003228:	f88d 101d 	strb.w	r1, [sp, #29]
  BLUENRG_memcpy(cp.oob_data, oob_data, 16);
 800322c:	f102 0010 	add.w	r0, r2, #16
 8003230:	f10d 011e 	add.w	r1, sp, #30
 8003234:	f852 4b04 	ldr.w	r4, [r2], #4
 8003238:	f841 4b04 	str.w	r4, [r1], #4
 800323c:	4282      	cmp	r2, r0
 800323e:	d1f9      	bne.n	8003234 <aci_gap_set_auth_requirement+0x14>
  cp.min_encryption_key_size = min_encryption_key_size;
 8003240:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
  cp.max_encryption_key_size = max_encryption_key_size;
 8003244:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8003248:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
  cp.use_fixed_pin = use_fixed_pin;
 800324c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8003250:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
  cp.fixed_pin = htobl(fixed_pin);
 8003254:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003256:	f8cd 3031 	str.w	r3, [sp, #49]	; 0x31
  cp.bonding_mode = bonding_mode;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800325a:	2218      	movs	r2, #24
  cp.bonding_mode = bonding_mode;
 800325c:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8003260:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003264:	2100      	movs	r1, #0
 8003266:	a801      	add	r0, sp, #4
 8003268:	f002 f8db 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800326c:	233f      	movs	r3, #63	; 0x3f
 800326e:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GAP_SET_AUTH_REQUIREMENT;
 8003272:	2386      	movs	r3, #134	; 0x86
 8003274:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = &cp;
 8003278:	ab07      	add	r3, sp, #28
 800327a:	9303      	str	r3, [sp, #12]
  rq.clen = sizeof(cp);
 800327c:	231a      	movs	r3, #26
 800327e:	9304      	str	r3, [sp, #16]
  rq.rparam = &status;
 8003280:	f10d 0303 	add.w	r3, sp, #3
 8003284:	9305      	str	r3, [sp, #20]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003286:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003288:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800328a:	a801      	add	r0, sp, #4
  rq.rlen = 1;
 800328c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800328e:	f000 faa7 	bl	80037e0 <hci_send_req>
 8003292:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  if (status) {
 8003294:	bfac      	ite	ge
 8003296:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 800329a:	20ff      	movlt	r0, #255	; 0xff
    return status;
  }
    
  return 0;
}
 800329c:	b00e      	add	sp, #56	; 0x38
 800329e:	bd10      	pop	{r4, pc}

080032a0 <aci_gap_update_adv_data>:
  return status;

}

tBleStatus aci_gap_update_adv_data(uint8_t AdvLen, const uint8_t *AdvData)
{
 80032a0:	b530      	push	{r4, r5, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[32];
  uint8_t indx = 0;
    
  if (AdvLen > (sizeof(buffer)-1))
 80032a2:	281f      	cmp	r0, #31
{
 80032a4:	b091      	sub	sp, #68	; 0x44
 80032a6:	4604      	mov	r4, r0
  if (AdvLen > (sizeof(buffer)-1))
 80032a8:	d825      	bhi.n	80032f6 <aci_gap_update_adv_data+0x56>
    return BLE_STATUS_INVALID_PARAMS;

  buffer[indx] = AdvLen;
 80032aa:	ad10      	add	r5, sp, #64	; 0x40
  indx++;
    
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80032ac:	4602      	mov	r2, r0
  buffer[indx] = AdvLen;
 80032ae:	f805 0d20 	strb.w	r0, [r5, #-32]!
  BLUENRG_memcpy(buffer + indx, AdvData, AdvLen);
 80032b2:	f10d 0021 	add.w	r0, sp, #33	; 0x21
 80032b6:	f002 f8a9 	bl	800540c <memcpy>
  indx +=  AdvLen;
    
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80032ba:	2218      	movs	r2, #24
 80032bc:	2100      	movs	r1, #0
 80032be:	a802      	add	r0, sp, #8
 80032c0:	f002 f8af 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80032c4:	233f      	movs	r3, #63	; 0x3f
 80032c6:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GAP_UPDATE_ADV_DATA;
 80032ca:	238e      	movs	r3, #142	; 0x8e
 80032cc:	f8ad 300a 	strh.w	r3, [sp, #10]
  indx +=  AdvLen;
 80032d0:	3401      	adds	r4, #1
  rq.cparam = (void *)buffer;
  rq.clen = indx;
  rq.rparam = &status;
 80032d2:	f10d 0307 	add.w	r3, sp, #7
 80032d6:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80032d8:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80032da:	2301      	movs	r3, #1
    
  if (hci_send_req(&rq, FALSE) < 0)
 80032dc:	2100      	movs	r1, #0
 80032de:	a802      	add	r0, sp, #8
  rq.cparam = (void *)buffer;
 80032e0:	9504      	str	r5, [sp, #16]
  rq.clen = indx;
 80032e2:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80032e4:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80032e6:	f000 fa7b 	bl	80037e0 <hci_send_req>
 80032ea:	2800      	cmp	r0, #0
 80032ec:	db05      	blt.n	80032fa <aci_gap_update_adv_data+0x5a>
    return BLE_STATUS_TIMEOUT;
    
  return status;
 80032ee:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 80032f2:	b011      	add	sp, #68	; 0x44
 80032f4:	bd30      	pop	{r4, r5, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80032f6:	2042      	movs	r0, #66	; 0x42
 80032f8:	e7fb      	b.n	80032f2 <aci_gap_update_adv_data+0x52>
    return BLE_STATUS_TIMEOUT;
 80032fa:	20ff      	movs	r0, #255	; 0xff
 80032fc:	e7f9      	b.n	80032f2 <aci_gap_update_adv_data+0x52>

080032fe <aci_gatt_init>:
#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)


tBleStatus aci_gatt_init(void)
{
 80032fe:	b500      	push	{lr}
 8003300:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003302:	2218      	movs	r2, #24
 8003304:	2100      	movs	r1, #0
 8003306:	a802      	add	r0, sp, #8
 8003308:	f002 f88b 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800330c:	233f      	movs	r3, #63	; 0x3f
 800330e:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_INIT;
 8003312:	f240 1301 	movw	r3, #257	; 0x101
 8003316:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 800331a:	f10d 0307 	add.w	r3, sp, #7
 800331e:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 8003320:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003322:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 8003324:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 8003326:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003328:	f000 fa5a 	bl	80037e0 <hci_send_req>
 800332c:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 800332e:	bfac      	ite	ge
 8003330:	f89d 0007 	ldrbge.w	r0, [sp, #7]
    return BLE_STATUS_TIMEOUT;
 8003334:	20ff      	movlt	r0, #255	; 0xff
}
 8003336:	b009      	add	sp, #36	; 0x24
 8003338:	f85d fb04 	ldr.w	pc, [sp], #4

0800333c <aci_gatt_add_serv>:

tBleStatus aci_gatt_add_serv(uint8_t service_uuid_type, const uint8_t* service_uuid, uint8_t service_type, uint8_t max_attr_records, uint16_t *serviceHandle)
{
 800333c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800333e:	b08d      	sub	sp, #52	; 0x34
    
  if(service_uuid_type == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 8003340:	2801      	cmp	r0, #1
  buffer[indx] = service_uuid_type;
 8003342:	ae0c      	add	r6, sp, #48	; 0x30
    uuid_len = 16;
 8003344:	bf0c      	ite	eq
 8003346:	2402      	moveq	r4, #2
 8003348:	2410      	movne	r4, #16
  buffer[indx] = service_uuid_type;
 800334a:	f806 0d2c 	strb.w	r0, [r6, #-44]!
{
 800334e:	4617      	mov	r7, r2
  }        
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003350:	f10d 0005 	add.w	r0, sp, #5
 8003354:	4622      	mov	r2, r4
{
 8003356:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, service_uuid, uuid_len);
 8003358:	f002 f858 	bl	800540c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = service_type;
 800335c:	ab0c      	add	r3, sp, #48	; 0x30
 800335e:	4423      	add	r3, r4
 8003360:	f803 7c2b 	strb.w	r7, [r3, #-43]
  indx++;
    
  buffer[indx] = max_attr_records;
 8003364:	ab0c      	add	r3, sp, #48	; 0x30
 8003366:	191a      	adds	r2, r3, r4

  BLUENRG_memset(&rq, 0, sizeof(rq));
  rq.ogf = OGF_VENDOR_CMD;
  rq.ocf = OCF_GATT_ADD_SERV;
  rq.cparam = (void *)buffer;
  rq.clen = indx;
 8003368:	3403      	adds	r4, #3
  buffer[indx] = max_attr_records;
 800336a:	f802 5c2a 	strb.w	r5, [r2, #-42]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 800336e:	2500      	movs	r5, #0
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003370:	2218      	movs	r2, #24
 8003372:	4629      	mov	r1, r5
 8003374:	eb0d 0002 	add.w	r0, sp, r2
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003378:	f8ad 5000 	strh.w	r5, [sp]
 800337c:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003380:	f002 f84f 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 8003384:	233f      	movs	r3, #63	; 0x3f
 8003386:	f8ad 3018 	strh.w	r3, [sp, #24]
  rq.ocf = OCF_GATT_ADD_SERV;
 800338a:	f44f 7381 	mov.w	r3, #258	; 0x102
 800338e:	f8ad 301a 	strh.w	r3, [sp, #26]
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_SERV_RP_SIZE;

  if (hci_send_req(&rq, FALSE) < 0)
 8003392:	4629      	mov	r1, r5
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 8003394:	2303      	movs	r3, #3
  if (hci_send_req(&rq, FALSE) < 0)
 8003396:	a806      	add	r0, sp, #24
  rq.cparam = (void *)buffer;
 8003398:	9608      	str	r6, [sp, #32]
  rq.clen = indx;
 800339a:	9409      	str	r4, [sp, #36]	; 0x24
  rq.rparam = &resp;
 800339c:	f8cd d028 	str.w	sp, [sp, #40]	; 0x28
  rq.rlen = GATT_ADD_SERV_RP_SIZE;
 80033a0:	930b      	str	r3, [sp, #44]	; 0x2c
  if (hci_send_req(&rq, FALSE) < 0)
 80033a2:	f000 fa1d 	bl	80037e0 <hci_send_req>
 80033a6:	42a8      	cmp	r0, r5
 80033a8:	db09      	blt.n	80033be <aci_gatt_add_serv+0x82>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 80033aa:	f89d 0000 	ldrb.w	r0, [sp]
 80033ae:	b920      	cbnz	r0, 80033ba <aci_gatt_add_serv+0x7e>
    return resp.status;
  }
    
  *serviceHandle = btohs(resp.handle);
 80033b0:	9b00      	ldr	r3, [sp, #0]
 80033b2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80033b4:	f3c3 230f 	ubfx	r3, r3, #8, #16
 80033b8:	8013      	strh	r3, [r2, #0]

  return 0;
}
 80033ba:	b00d      	add	sp, #52	; 0x34
 80033bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return BLE_STATUS_TIMEOUT;
 80033be:	20ff      	movs	r0, #255	; 0xff
 80033c0:	e7fb      	b.n	80033ba <aci_gatt_add_serv+0x7e>

080033c2 <aci_gatt_add_char>:
			     uint8_t secPermissions,
			     uint8_t gattEvtMask,
			     uint8_t encryKeySize,
			     uint8_t isVariable,
			     uint16_t* charHandle)                     
{
 80033c2:	b570      	push	{r4, r5, r6, lr}
    
  if(charUuidType == UUID_TYPE_16){
    uuid_len = 2;
  }
  else {
    uuid_len = 16;
 80033c4:	2901      	cmp	r1, #1
{
 80033c6:	b08e      	sub	sp, #56	; 0x38
    uuid_len = 16;
 80033c8:	bf0c      	ite	eq
 80033ca:	2402      	moveq	r4, #2
 80033cc:	2410      	movne	r4, #16
{
 80033ce:	4616      	mov	r6, r2
  BLUENRG_memcpy(buffer + indx, &serviceHandle, 2);
 80033d0:	f8ad 001c 	strh.w	r0, [sp, #28]
  }        
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80033d4:	4622      	mov	r2, r4
  buffer[indx] = charUuidType;
 80033d6:	f88d 101e 	strb.w	r1, [sp, #30]
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80033da:	f10d 001f 	add.w	r0, sp, #31
 80033de:	4631      	mov	r1, r6
{
 80033e0:	461d      	mov	r5, r3
  BLUENRG_memcpy(buffer + indx, charUuid, uuid_len);
 80033e2:	f002 f813 	bl	800540c <memcpy>
  indx +=  uuid_len;
    
  buffer[indx] = charValueLen;
 80033e6:	ab0e      	add	r3, sp, #56	; 0x38
 80033e8:	191a      	adds	r2, r3, r4
  indx++;
    
  buffer[indx] = charProperties;
 80033ea:	4613      	mov	r3, r2
  buffer[indx] = charValueLen;
 80033ec:	f802 5c19 	strb.w	r5, [r2, #-25]
  buffer[indx] = charProperties;
 80033f0:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 80033f4:	f803 2c18 	strb.w	r2, [r3, #-24]
  indx++;
    
  buffer[indx] = secPermissions;
 80033f8:	ab0e      	add	r3, sp, #56	; 0x38
 80033fa:	4423      	add	r3, r4
 80033fc:	f89d 204c 	ldrb.w	r2, [sp, #76]	; 0x4c
 8003400:	f803 2c17 	strb.w	r2, [r3, #-23]
  indx++;
    
  buffer[indx] = gattEvtMask;
 8003404:	ab0e      	add	r3, sp, #56	; 0x38
 8003406:	4423      	add	r3, r4
 8003408:	f89d 2050 	ldrb.w	r2, [sp, #80]	; 0x50
 800340c:	f803 2c16 	strb.w	r2, [r3, #-22]
  indx++;
    
  buffer[indx] = encryKeySize;
 8003410:	ab0e      	add	r3, sp, #56	; 0x38
 8003412:	4423      	add	r3, r4
 8003414:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8003418:	f803 2c15 	strb.w	r2, [r3, #-21]
  indx++;
    
  buffer[indx] = isVariable;
 800341c:	ab0e      	add	r3, sp, #56	; 0x38
 800341e:	4423      	add	r3, r4
  indx++;
    
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003420:	2500      	movs	r5, #0
  buffer[indx] = isVariable;
 8003422:	f89d 2058 	ldrb.w	r2, [sp, #88]	; 0x58
 8003426:	f803 2c14 	strb.w	r2, [r3, #-20]

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800342a:	4629      	mov	r1, r5
 800342c:	2218      	movs	r2, #24
 800342e:	a801      	add	r0, sp, #4
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003430:	f8ad 5000 	strh.w	r5, [sp]
 8003434:	f88d 5002 	strb.w	r5, [sp, #2]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003438:	f001 fff3 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800343c:	233f      	movs	r3, #63	; 0x3f
 800343e:	f8ad 3004 	strh.w	r3, [sp, #4]
  rq.ocf = OCF_GATT_ADD_CHAR;
 8003442:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003446:	f8ad 3006 	strh.w	r3, [sp, #6]
  rq.cparam = (void *)buffer;
 800344a:	ab07      	add	r3, sp, #28
 800344c:	9303      	str	r3, [sp, #12]
  rq.clen = indx;
 800344e:	3409      	adds	r4, #9
  rq.rparam = &resp;
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 8003450:	2303      	movs	r3, #3

  if (hci_send_req(&rq, FALSE) < 0)
 8003452:	4629      	mov	r1, r5
 8003454:	a801      	add	r0, sp, #4
  rq.clen = indx;
 8003456:	9404      	str	r4, [sp, #16]
  rq.rparam = &resp;
 8003458:	f8cd d014 	str.w	sp, [sp, #20]
  rq.rlen = GATT_ADD_CHAR_RP_SIZE;
 800345c:	9306      	str	r3, [sp, #24]
  if (hci_send_req(&rq, FALSE) < 0)
 800345e:	f000 f9bf 	bl	80037e0 <hci_send_req>
 8003462:	42a8      	cmp	r0, r5
 8003464:	db09      	blt.n	800347a <aci_gatt_add_char+0xb8>
    return BLE_STATUS_TIMEOUT;

  if (resp.status) {
 8003466:	f89d 0000 	ldrb.w	r0, [sp]
 800346a:	b920      	cbnz	r0, 8003476 <aci_gatt_add_char+0xb4>
    return resp.status;
  }
    
  *charHandle = btohs(resp.handle);
 800346c:	9b00      	ldr	r3, [sp, #0]
 800346e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8003470:	f3c3 230f 	ubfx	r3, r3, #8, #16
 8003474:	8013      	strh	r3, [r2, #0]

  return 0;
}
 8003476:	b00e      	add	sp, #56	; 0x38
 8003478:	bd70      	pop	{r4, r5, r6, pc}
    return BLE_STATUS_TIMEOUT;
 800347a:	20ff      	movs	r0, #255	; 0xff
 800347c:	e7fb      	b.n	8003476 <aci_gatt_add_char+0xb4>

0800347e <aci_gatt_update_char_value>:
tBleStatus aci_gatt_update_char_value(uint16_t servHandle, 
				      uint16_t charHandle,
				      uint8_t charValOffset,
				      uint8_t charValueLen,   
                                      const void *charValue)
{
 800347e:	b510      	push	{r4, lr}
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003480:	2b7a      	cmp	r3, #122	; 0x7a
{
 8003482:	b0a8      	sub	sp, #160	; 0xa0
 8003484:	461c      	mov	r4, r3
  if ((charValueLen+6) > HCI_MAX_PAYLOAD_SIZE)
 8003486:	dc2d      	bgt.n	80034e4 <aci_gatt_update_char_value+0x66>
    return BLE_STATUS_INVALID_PARAMS;

  servHandle = htobs(servHandle);
  BLUENRG_memcpy(buffer + indx, &servHandle, 2);
 8003488:	f8ad 0020 	strh.w	r0, [sp, #32]
  indx += 2;
    
  charHandle = htobs(charHandle);
  BLUENRG_memcpy(buffer + indx, &charHandle, 2);
 800348c:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
  indx += 2;
    
  buffer[indx] = charValOffset;
 8003490:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
  indx++;
    
  buffer[indx] = charValueLen;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 8003494:	992a      	ldr	r1, [sp, #168]	; 0xa8
  buffer[indx] = charValueLen;
 8003496:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  BLUENRG_memcpy(buffer + indx, charValue, charValueLen);
 800349a:	461a      	mov	r2, r3
 800349c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
 80034a0:	f001 ffb4 	bl	800540c <memcpy>
  indx +=  charValueLen;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 80034a4:	2218      	movs	r2, #24
 80034a6:	2100      	movs	r1, #0
 80034a8:	a802      	add	r0, sp, #8
 80034aa:	f001 ffba 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80034ae:	233f      	movs	r3, #63	; 0x3f
 80034b0:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_GATT_UPD_CHAR_VAL;
 80034b4:	f44f 7383 	mov.w	r3, #262	; 0x106
 80034b8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 80034bc:	ab08      	add	r3, sp, #32
 80034be:	9304      	str	r3, [sp, #16]
  indx +=  charValueLen;
 80034c0:	3406      	adds	r4, #6
  rq.clen = indx;
  rq.rparam = &status;
 80034c2:	f10d 0307 	add.w	r3, sp, #7
 80034c6:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 80034c8:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 80034ca:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 80034cc:	2100      	movs	r1, #0
 80034ce:	a802      	add	r0, sp, #8
  rq.clen = indx;
 80034d0:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 80034d2:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80034d4:	f000 f984 	bl	80037e0 <hci_send_req>
 80034d8:	2800      	cmp	r0, #0
 80034da:	db05      	blt.n	80034e8 <aci_gatt_update_char_value+0x6a>
    return BLE_STATUS_TIMEOUT;

  if (status) {
 80034dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return status;
  }

  return 0;
}
 80034e0:	b028      	add	sp, #160	; 0xa0
 80034e2:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 80034e4:	2042      	movs	r0, #66	; 0x42
 80034e6:	e7fb      	b.n	80034e0 <aci_gatt_update_char_value+0x62>
    return BLE_STATUS_TIMEOUT;
 80034e8:	20ff      	movs	r0, #255	; 0xff
 80034ea:	e7f9      	b.n	80034e0 <aci_gatt_update_char_value+0x62>

080034ec <aci_gatt_allow_read>:

  return 0;
}

tBleStatus aci_gatt_allow_read(uint16_t conn_handle)
{
 80034ec:	b500      	push	{lr}
 80034ee:	b089      	sub	sp, #36	; 0x24
    gatt_allow_read_cp cp;
    uint8_t status;
    
    cp.conn_handle = htobs(conn_handle);

    BLUENRG_memset(&rq, 0, sizeof(rq));
 80034f0:	2218      	movs	r2, #24
    cp.conn_handle = htobs(conn_handle);
 80034f2:	f8ad 0004 	strh.w	r0, [sp, #4]
    BLUENRG_memset(&rq, 0, sizeof(rq));
 80034f6:	2100      	movs	r1, #0
 80034f8:	a802      	add	r0, sp, #8
 80034fa:	f001 ff92 	bl	8005422 <memset>
    rq.ogf = OGF_VENDOR_CMD;
 80034fe:	233f      	movs	r3, #63	; 0x3f
 8003500:	f8ad 3008 	strh.w	r3, [sp, #8]
    rq.ocf = OCF_GATT_ALLOW_READ;
 8003504:	f240 1327 	movw	r3, #295	; 0x127
 8003508:	f8ad 300a 	strh.w	r3, [sp, #10]
    rq.cparam = &cp;
 800350c:	ab01      	add	r3, sp, #4
 800350e:	9304      	str	r3, [sp, #16]
    rq.clen = GATT_ALLOW_READ_CP_SIZE;
 8003510:	2302      	movs	r3, #2
 8003512:	9305      	str	r3, [sp, #20]
    rq.rparam = &status;
 8003514:	f10d 0303 	add.w	r3, sp, #3
 8003518:	9306      	str	r3, [sp, #24]
    rq.rlen = 1;

    if (hci_send_req(&rq, FALSE) < 0)
 800351a:	2100      	movs	r1, #0
    rq.rlen = 1;
 800351c:	2301      	movs	r3, #1
    if (hci_send_req(&rq, FALSE) < 0)
 800351e:	a802      	add	r0, sp, #8
    rq.rlen = 1;
 8003520:	9307      	str	r3, [sp, #28]
    if (hci_send_req(&rq, FALSE) < 0)
 8003522:	f000 f95d 	bl	80037e0 <hci_send_req>
 8003526:	2800      	cmp	r0, #0
      return BLE_STATUS_TIMEOUT;

    return status;
 8003528:	bfac      	ite	ge
 800352a:	f89d 0003 	ldrbge.w	r0, [sp, #3]
      return BLE_STATUS_TIMEOUT;
 800352e:	20ff      	movlt	r0, #255	; 0xff
}
 8003530:	b009      	add	sp, #36	; 0x24
 8003532:	f85d fb04 	ldr.w	pc, [sp], #4

08003536 <aci_hal_write_config_data>:
}

tBleStatus aci_hal_write_config_data(uint8_t offset, 
                                    uint8_t len,
                                    const uint8_t *val)
{
 8003536:	b510      	push	{r4, lr}
 8003538:	460c      	mov	r4, r1
  struct hci_request rq;
  uint8_t status;
  uint8_t buffer[HCI_MAX_PAYLOAD_SIZE];
  uint8_t indx = 0;
    
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 800353a:	2c7e      	cmp	r4, #126	; 0x7e
{
 800353c:	b0a8      	sub	sp, #160	; 0xa0
 800353e:	4611      	mov	r1, r2
  if ((len+2) > HCI_MAX_PAYLOAD_SIZE)
 8003540:	dc27      	bgt.n	8003592 <aci_hal_write_config_data+0x5c>
  indx++;
    
  buffer[indx] = len;
  indx++;
        
  BLUENRG_memcpy(buffer + indx, val, len);
 8003542:	4622      	mov	r2, r4
  buffer[indx] = offset;
 8003544:	f88d 0020 	strb.w	r0, [sp, #32]
  BLUENRG_memcpy(buffer + indx, val, len);
 8003548:	f10d 0022 	add.w	r0, sp, #34	; 0x22
  buffer[indx] = len;
 800354c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
  BLUENRG_memcpy(buffer + indx, val, len);
 8003550:	f001 ff5c 	bl	800540c <memcpy>
  indx +=  len;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003554:	2218      	movs	r2, #24
 8003556:	2100      	movs	r1, #0
 8003558:	a802      	add	r0, sp, #8
 800355a:	f001 ff62 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 800355e:	233f      	movs	r3, #63	; 0x3f
 8003560:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_WRITE_CONFIG_DATA;
 8003564:	230c      	movs	r3, #12
 8003566:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = (void *)buffer;
 800356a:	ab08      	add	r3, sp, #32
 800356c:	9304      	str	r3, [sp, #16]
  indx +=  len;
 800356e:	3402      	adds	r4, #2
  rq.clen = indx;
  rq.rparam = &status;
 8003570:	f10d 0307 	add.w	r3, sp, #7
 8003574:	9306      	str	r3, [sp, #24]
  rq.clen = indx;
 8003576:	b2e4      	uxtb	r4, r4
  rq.rlen = 1;
 8003578:	2301      	movs	r3, #1

  if (hci_send_req(&rq, FALSE) < 0)
 800357a:	2100      	movs	r1, #0
 800357c:	a802      	add	r0, sp, #8
  rq.clen = indx;
 800357e:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003580:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003582:	f000 f92d 	bl	80037e0 <hci_send_req>
 8003586:	2800      	cmp	r0, #0
 8003588:	db05      	blt.n	8003596 <aci_hal_write_config_data+0x60>
    return BLE_STATUS_TIMEOUT;

  return status;
 800358a:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
 800358e:	b028      	add	sp, #160	; 0xa0
 8003590:	bd10      	pop	{r4, pc}
    return BLE_STATUS_INVALID_PARAMS;
 8003592:	2042      	movs	r0, #66	; 0x42
 8003594:	e7fb      	b.n	800358e <aci_hal_write_config_data+0x58>
    return BLE_STATUS_TIMEOUT;
 8003596:	20ff      	movs	r0, #255	; 0xff
 8003598:	e7f9      	b.n	800358e <aci_hal_write_config_data+0x58>

0800359a <aci_hal_set_tx_power_level>:
  
  return 0;
}

tBleStatus aci_hal_set_tx_power_level(uint8_t en_high_power, uint8_t pa_level)
{
 800359a:	b500      	push	{lr}
 800359c:	b089      	sub	sp, #36	; 0x24
  uint8_t status;
    
  cp.en_high_power = en_high_power;
  cp.pa_level = pa_level;

  BLUENRG_memset(&rq, 0, sizeof(rq));
 800359e:	2218      	movs	r2, #24
  cp.en_high_power = en_high_power;
 80035a0:	f88d 0004 	strb.w	r0, [sp, #4]
  cp.pa_level = pa_level;
 80035a4:	f88d 1005 	strb.w	r1, [sp, #5]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 80035a8:	a802      	add	r0, sp, #8
 80035aa:	2100      	movs	r1, #0
 80035ac:	f001 ff39 	bl	8005422 <memset>
  rq.ogf = OGF_VENDOR_CMD;
 80035b0:	233f      	movs	r3, #63	; 0x3f
 80035b2:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_HAL_SET_TX_POWER_LEVEL;
 80035b6:	230f      	movs	r3, #15
 80035b8:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &cp;
 80035bc:	ab01      	add	r3, sp, #4
 80035be:	9304      	str	r3, [sp, #16]
  rq.clen = HAL_SET_TX_POWER_LEVEL_CP_SIZE;
 80035c0:	2302      	movs	r3, #2
 80035c2:	9305      	str	r3, [sp, #20]
  rq.rparam = &status;
 80035c4:	f10d 0303 	add.w	r3, sp, #3
 80035c8:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;

  if (hci_send_req(&rq, FALSE) < 0)
 80035ca:	2100      	movs	r1, #0
  rq.rlen = 1;
 80035cc:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 80035ce:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 80035d0:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 80035d2:	f000 f905 	bl	80037e0 <hci_send_req>
 80035d6:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;

  return status;
 80035d8:	bfac      	ite	ge
 80035da:	f89d 0003 	ldrbge.w	r0, [sp, #3]
    return BLE_STATUS_TIMEOUT;
 80035de:	20ff      	movlt	r0, #255	; 0xff
}
 80035e0:	b009      	add	sp, #36	; 0x24
 80035e2:	f85d fb04 	ldr.w	pc, [sp], #4

080035e6 <getBlueNRGVersion>:
#include "hci.h"
#include "hci_le.h"
#include "string.h"

uint8_t getBlueNRGVersion(uint8_t *hwVersion, uint16_t *fwVersion)
{
 80035e6:	b530      	push	{r4, r5, lr}
 80035e8:	b085      	sub	sp, #20
  uint8_t status;
  uint8_t hci_version, lmp_pal_version;
  uint16_t hci_revision, manufacturer_name, lmp_pal_subversion;

  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80035ea:	f10d 030e 	add.w	r3, sp, #14
 80035ee:	9300      	str	r3, [sp, #0]
{
 80035f0:	4605      	mov	r5, r0
 80035f2:	460c      	mov	r4, r1
  status = hci_le_read_local_version(&hci_version, &hci_revision, &lmp_pal_version, 
 80035f4:	ab03      	add	r3, sp, #12
 80035f6:	f10d 0209 	add.w	r2, sp, #9
 80035fa:	f10d 010a 	add.w	r1, sp, #10
 80035fe:	a802      	add	r0, sp, #8
 8003600:	f000 f82f 	bl	8003662 <hci_le_read_local_version>
 8003604:	b2c0      	uxtb	r0, r0
				     &manufacturer_name, &lmp_pal_subversion);

  if (status == BLE_STATUS_SUCCESS) {
 8003606:	b968      	cbnz	r0, 8003624 <getBlueNRGVersion+0x3e>
    *hwVersion = hci_revision >> 8;
 8003608:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    *fwVersion = (hci_revision & 0xFF) << 8;              // Major Version Number
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800360c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    *hwVersion = hci_revision >> 8;
 8003610:	0a0b      	lsrs	r3, r1, #8
 8003612:	702b      	strb	r3, [r5, #0]
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003614:	f002 030f 	and.w	r3, r2, #15
 8003618:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    *fwVersion |= ((lmp_pal_subversion >> 4) & 0xF) << 4; // Minor Version Number
 800361c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
    *fwVersion |= lmp_pal_subversion & 0xF;               // Patch Version Number
 8003620:	4313      	orrs	r3, r2
 8003622:	8023      	strh	r3, [r4, #0]
  }
  return status;
}
 8003624:	b005      	add	sp, #20
 8003626:	bd30      	pop	{r4, r5, pc}

08003628 <hci_reset>:

#define MIN(a,b)            ((a) < (b) )? (a) : (b)
#define MAX(a,b)            ((a) > (b) )? (a) : (b)

int hci_reset(void)
{
 8003628:	b500      	push	{lr}
 800362a:	b089      	sub	sp, #36	; 0x24
  struct hci_request rq;
  uint8_t status;
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800362c:	2218      	movs	r2, #24
 800362e:	2100      	movs	r1, #0
 8003630:	a802      	add	r0, sp, #8
 8003632:	f001 fef6 	bl	8005422 <memset>
  rq.ogf = OGF_HOST_CTL;
 8003636:	2303      	movs	r3, #3
 8003638:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_RESET;
 800363c:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.rparam = &status;
 8003640:	f10d 0307 	add.w	r3, sp, #7
 8003644:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003646:	2100      	movs	r1, #0
  rq.rlen = 1;
 8003648:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800364a:	a802      	add	r0, sp, #8
  rq.rlen = 1;
 800364c:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 800364e:	f000 f8c7 	bl	80037e0 <hci_send_req>
 8003652:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;  
 8003654:	bfac      	ite	ge
 8003656:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 800365a:	20ff      	movlt	r0, #255	; 0xff
}
 800365c:	b009      	add	sp, #36	; 0x24
 800365e:	f85d fb04 	ldr.w	pc, [sp], #4

08003662 <hci_le_read_local_version>:
  return status;  
}

int hci_le_read_local_version(uint8_t *hci_version, uint16_t *hci_revision, uint8_t *lmp_pal_version, 
                              uint16_t *manufacturer_name, uint16_t *lmp_pal_subversion)
{
 8003662:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  struct hci_request rq;
  read_local_version_rp resp;
  
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003666:	2400      	movs	r4, #0
{
 8003668:	b08b      	sub	sp, #44	; 0x2c
 800366a:	4681      	mov	r9, r0
 800366c:	4688      	mov	r8, r1
 800366e:	4617      	mov	r7, r2
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003670:	4621      	mov	r1, r4
 8003672:	2218      	movs	r2, #24
 8003674:	a804      	add	r0, sp, #16
{
 8003676:	461e      	mov	r6, r3
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003678:	9401      	str	r4, [sp, #4]
 800367a:	9402      	str	r4, [sp, #8]
 800367c:	f88d 400c 	strb.w	r4, [sp, #12]
  BLUENRG_memset(&rq, 0, sizeof(rq));
 8003680:	f001 fecf 	bl	8005422 <memset>
  rq.ogf = OGF_INFO_PARAM;
 8003684:	2304      	movs	r3, #4
 8003686:	f8ad 3010 	strh.w	r3, [sp, #16]
  rq.ocf = OCF_READ_LOCAL_VERSION;
 800368a:	2301      	movs	r3, #1
 800368c:	f8ad 3012 	strh.w	r3, [sp, #18]
  BLUENRG_memset(&resp, 0, sizeof(resp));
 8003690:	ad01      	add	r5, sp, #4
  rq.cparam = NULL;
  rq.clen = 0;
  rq.rparam = &resp;
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 8003692:	2309      	movs	r3, #9
  
  if (hci_send_req(&rq, FALSE) < 0)
 8003694:	4621      	mov	r1, r4
 8003696:	a804      	add	r0, sp, #16
  rq.rparam = &resp;
 8003698:	9508      	str	r5, [sp, #32]
  rq.rlen = READ_LOCAL_VERSION_RP_SIZE;
 800369a:	9309      	str	r3, [sp, #36]	; 0x24
  if (hci_send_req(&rq, FALSE) < 0)
 800369c:	f000 f8a0 	bl	80037e0 <hci_send_req>
 80036a0:	42a0      	cmp	r0, r4
 80036a2:	db1c      	blt.n	80036de <hci_le_read_local_version+0x7c>
    return BLE_STATUS_TIMEOUT;
  
  if (resp.status) {
 80036a4:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80036a8:	b9b0      	cbnz	r0, 80036d8 <hci_le_read_local_version+0x76>
    return resp.status;
  }
  
  
  *hci_version = resp.hci_version;
 80036aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80036ae:	f889 3000 	strb.w	r3, [r9]
  *hci_revision =  btohs(resp.hci_revision);
 80036b2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80036b6:	f8a8 3000 	strh.w	r3, [r8]
  *lmp_pal_version = resp.lmp_pal_version;
 80036ba:	f89d 3008 	ldrb.w	r3, [sp, #8]
 80036be:	703b      	strb	r3, [r7, #0]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80036c0:	9a02      	ldr	r2, [sp, #8]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80036c2:	f89d 300b 	ldrb.w	r3, [sp, #11]
  *manufacturer_name = btohs(resp.manufacturer_name);
 80036c6:	f3c2 220f 	ubfx	r2, r2, #8, #16
 80036ca:	8032      	strh	r2, [r6, #0]
  *lmp_pal_subversion = btohs(resp.lmp_pal_subversion);
 80036cc:	f89d 200c 	ldrb.w	r2, [sp, #12]
 80036d0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80036d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80036d6:	8013      	strh	r3, [r2, #0]
  
  return 0;
}
 80036d8:	b00b      	add	sp, #44	; 0x2c
 80036da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return BLE_STATUS_TIMEOUT;
 80036de:	20ff      	movs	r0, #255	; 0xff
 80036e0:	e7fa      	b.n	80036d8 <hci_le_read_local_version+0x76>

080036e2 <hci_le_set_scan_resp_data>:
  
  return 0;
}

int hci_le_set_scan_resp_data(uint8_t length, const uint8_t data[])
{
 80036e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80036e4:	b091      	sub	sp, #68	; 0x44
  struct hci_request rq;
  le_set_scan_response_data_cp scan_resp_cp;
  uint8_t status;
  
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80036e6:	ad08      	add	r5, sp, #32
 80036e8:	2420      	movs	r4, #32
{
 80036ea:	4606      	mov	r6, r0
 80036ec:	460f      	mov	r7, r1
  BLUENRG_memset(&scan_resp_cp, 0, sizeof(scan_resp_cp));
 80036ee:	4622      	mov	r2, r4
 80036f0:	2100      	movs	r1, #0
 80036f2:	4628      	mov	r0, r5
 80036f4:	f001 fe95 	bl	8005422 <memset>
  scan_resp_cp.length = length;
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 80036f8:	2e1f      	cmp	r6, #31
 80036fa:	4632      	mov	r2, r6
 80036fc:	4639      	mov	r1, r7
 80036fe:	bf28      	it	cs
 8003700:	221f      	movcs	r2, #31
 8003702:	f10d 0021 	add.w	r0, sp, #33	; 0x21
  scan_resp_cp.length = length;
 8003706:	f88d 6020 	strb.w	r6, [sp, #32]
  BLUENRG_memcpy(scan_resp_cp.data, data, MIN(31,length));
 800370a:	f001 fe7f 	bl	800540c <memcpy>
  
  BLUENRG_memset(&rq, 0, sizeof(rq));
 800370e:	2218      	movs	r2, #24
 8003710:	2100      	movs	r1, #0
 8003712:	a802      	add	r0, sp, #8
 8003714:	f001 fe85 	bl	8005422 <memset>
  rq.ogf = OGF_LE_CTL;
 8003718:	2308      	movs	r3, #8
 800371a:	f8ad 3008 	strh.w	r3, [sp, #8]
  rq.ocf = OCF_LE_SET_SCAN_RESPONSE_DATA;
 800371e:	2309      	movs	r3, #9
 8003720:	f8ad 300a 	strh.w	r3, [sp, #10]
  rq.cparam = &scan_resp_cp;
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
  rq.rparam = &status;
 8003724:	f10d 0307 	add.w	r3, sp, #7
 8003728:	9306      	str	r3, [sp, #24]
  rq.rlen = 1;
  
  if (hci_send_req(&rq, FALSE) < 0)
 800372a:	2100      	movs	r1, #0
  rq.rlen = 1;
 800372c:	2301      	movs	r3, #1
  if (hci_send_req(&rq, FALSE) < 0)
 800372e:	a802      	add	r0, sp, #8
  rq.cparam = &scan_resp_cp;
 8003730:	9504      	str	r5, [sp, #16]
  rq.clen = LE_SET_SCAN_RESPONSE_DATA_CP_SIZE;
 8003732:	9405      	str	r4, [sp, #20]
  rq.rlen = 1;
 8003734:	9307      	str	r3, [sp, #28]
  if (hci_send_req(&rq, FALSE) < 0)
 8003736:	f000 f853 	bl	80037e0 <hci_send_req>
 800373a:	2800      	cmp	r0, #0
    return BLE_STATUS_TIMEOUT;
  
  return status;
 800373c:	bfac      	ite	ge
 800373e:	f89d 0007 	ldrbge.w	r0, [sp, #7]
 8003742:	20ff      	movlt	r0, #255	; 0xff
}
 8003744:	b011      	add	sp, #68	; 0x44
 8003746:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003748 <move_list.constprop.0>:
  *
  * @param  dest_list
  * @param  src_list
  * @retval None
  */
static void move_list(tListNode * dest_list, tListNode * src_list)
 8003748:	b537      	push	{r0, r1, r2, r4, r5, lr}
  pListNode tmp_node;
  
  while (!list_is_empty(src_list))
  {
    list_remove_tail(src_list, &tmp_node);
    list_insert_head(dest_list, tmp_node);
 800374a:	4d08      	ldr	r5, [pc, #32]	; (800376c <move_list.constprop.0+0x24>)
static void move_list(tListNode * dest_list, tListNode * src_list)
 800374c:	4604      	mov	r4, r0
  while (!list_is_empty(src_list))
 800374e:	4620      	mov	r0, r4
 8003750:	f000 f959 	bl	8003a06 <list_is_empty>
 8003754:	b108      	cbz	r0, 800375a <move_list.constprop.0+0x12>
  }
}
 8003756:	b003      	add	sp, #12
 8003758:	bd30      	pop	{r4, r5, pc}
    list_remove_tail(src_list, &tmp_node);
 800375a:	a901      	add	r1, sp, #4
 800375c:	4620      	mov	r0, r4
 800375e:	f000 f991 	bl	8003a84 <list_remove_tail>
    list_insert_head(dest_list, tmp_node);
 8003762:	9901      	ldr	r1, [sp, #4]
 8003764:	4628      	mov	r0, r5
 8003766:	f000 f958 	bl	8003a1a <list_insert_head>
 800376a:	e7f0      	b.n	800374e <move_list.constprop.0+0x6>
 800376c:	20000584 	.word	0x20000584

08003770 <hci_init>:
}

/********************** HCI Transport layer functions *****************************/

void hci_init(void(* UserEvtRx)(void* pData), void* pConf)
{
 8003770:	b570      	push	{r4, r5, r6, lr}
  uint8_t index;
  
  if(UserEvtRx != NULL)
 8003772:	b108      	cbz	r0, 8003778 <hci_init+0x8>
  {
    hciContext.UserEvtRx = UserEvtRx;
 8003774:	4b0f      	ldr	r3, [pc, #60]	; (80037b4 <hci_init+0x44>)
 8003776:	61d8      	str	r0, [r3, #28]
  }
  
  /* Initialize TL BLE layer */
  hci_tl_lowlevel_init();
 8003778:	f001 f93a 	bl	80049f0 <hci_tl_lowlevel_init>
  
  /* Initialize list heads of ready and free hci data packet queues */
  list_init_head(&hciReadPktPool);
 800377c:	480e      	ldr	r0, [pc, #56]	; (80037b8 <hci_init+0x48>)
  list_init_head(&hciReadPktRxQueue);
  
  /* Initialize the queue of free hci data packets */
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
  {
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800377e:	4e0f      	ldr	r6, [pc, #60]	; (80037bc <hci_init+0x4c>)
 8003780:	4d0d      	ldr	r5, [pc, #52]	; (80037b8 <hci_init+0x48>)
  list_init_head(&hciReadPktPool);
 8003782:	f000 f93d 	bl	8003a00 <list_init_head>
  list_init_head(&hciReadPktRxQueue);
 8003786:	480e      	ldr	r0, [pc, #56]	; (80037c0 <hci_init+0x50>)
 8003788:	f000 f93a 	bl	8003a00 <list_init_head>
 800378c:	2400      	movs	r4, #0
    list_insert_tail(&hciReadPktPool, (tListNode *)&hciReadPacketBuffer[index]);
 800378e:	1931      	adds	r1, r6, r4
 8003790:	4628      	mov	r0, r5
 8003792:	348c      	adds	r4, #140	; 0x8c
 8003794:	f000 f94d 	bl	8003a32 <list_insert_tail>
  for (index = 0; index < HCI_READ_PACKET_NUM_MAX; index++)
 8003798:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 800379c:	d1f7      	bne.n	800378e <hci_init+0x1e>
  } 
  
  /* Initialize low level driver */
  if (hciContext.io.Init)  hciContext.io.Init(NULL);
 800379e:	4c05      	ldr	r4, [pc, #20]	; (80037b4 <hci_init+0x44>)
 80037a0:	6822      	ldr	r2, [r4, #0]
 80037a2:	b10a      	cbz	r2, 80037a8 <hci_init+0x38>
 80037a4:	2000      	movs	r0, #0
 80037a6:	4790      	blx	r2
  if (hciContext.io.Reset) hciContext.io.Reset();
 80037a8:	68a3      	ldr	r3, [r4, #8]
 80037aa:	b113      	cbz	r3, 80037b2 <hci_init+0x42>
}
 80037ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (hciContext.io.Reset) hciContext.io.Reset();
 80037b0:	4718      	bx	r3
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
 80037b4:	200000c0 	.word	0x200000c0
 80037b8:	2000057c 	.word	0x2000057c
 80037bc:	200000e0 	.word	0x200000e0
 80037c0:	20000584 	.word	0x20000584

080037c4 <hci_register_io_bus>:

void hci_register_io_bus(tHciIO* fops)
{
  /* Register bus function */
  hciContext.io.Init    = fops->Init; 
 80037c4:	4b05      	ldr	r3, [pc, #20]	; (80037dc <hci_register_io_bus+0x18>)
 80037c6:	6802      	ldr	r2, [r0, #0]
 80037c8:	601a      	str	r2, [r3, #0]
  hciContext.io.Receive = fops->Receive;  
 80037ca:	68c2      	ldr	r2, [r0, #12]
 80037cc:	60da      	str	r2, [r3, #12]
  hciContext.io.Send    = fops->Send;
 80037ce:	6902      	ldr	r2, [r0, #16]
 80037d0:	611a      	str	r2, [r3, #16]
  hciContext.io.GetTick = fops->GetTick;
 80037d2:	6982      	ldr	r2, [r0, #24]
 80037d4:	619a      	str	r2, [r3, #24]
  hciContext.io.Reset   = fops->Reset;    
 80037d6:	6882      	ldr	r2, [r0, #8]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	4770      	bx	lr
 80037dc:	200000c0 	.word	0x200000c0

080037e0 <hci_send_req>:
}

int hci_send_req(struct hci_request* r, BOOL async)
{
 80037e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037e4:	b0a5      	sub	sp, #148	; 0x94
  uint8_t *ptr;
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 80037e6:	8846      	ldrh	r6, [r0, #2]
 80037e8:	f8b0 8000 	ldrh.w	r8, [r0]
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 80037ec:	4f59      	ldr	r7, [pc, #356]	; (8003954 <hci_send_req+0x174>)
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80037ee:	f8df 916c 	ldr.w	r9, [pc, #364]	; 800395c <hci_send_req+0x17c>
  hci_event_pckt *event_pckt;
  hci_uart_pckt *hci_hdr;

  tHciDataPacket * hciReadPacket = NULL;
 80037f2:	2300      	movs	r3, #0
{
 80037f4:	4604      	mov	r4, r0
  tListNode hciTempQueue;
  
  list_init_head(&hciTempQueue);
 80037f6:	a802      	add	r0, sp, #8
{
 80037f8:	460d      	mov	r5, r1
  tHciDataPacket * hciReadPacket = NULL;
 80037fa:	9301      	str	r3, [sp, #4]
  list_init_head(&hciTempQueue);
 80037fc:	f000 f900 	bl	8003a00 <list_init_head>
  while(list_get_size(&hciReadPktPool) < HCI_READ_PACKET_NUM_MAX/2){
 8003800:	4638      	mov	r0, r7
 8003802:	f000 f951 	bl	8003aa8 <list_get_size>
 8003806:	2801      	cmp	r0, #1
 8003808:	dd53      	ble.n	80038b2 <hci_send_req+0xd2>
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 800380a:	8863      	ldrh	r3, [r4, #2]
 800380c:	8822      	ldrh	r2, [r4, #0]

  free_event_list();
  
  send_cmd(r->ogf, r->ocf, r->clen, r->cparam);
 800380e:	7b27      	ldrb	r7, [r4, #12]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003810:	68a1      	ldr	r1, [r4, #8]
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003812:	f88d 7013 	strb.w	r7, [sp, #19]
  hc.opcode = htobs(cmd_opcode_pack(ogf, ocf));
 8003816:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800381a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
  payload[0] = HCI_COMMAND_PKT;
 800381e:	2201      	movs	r2, #1
 8003820:	f88d 2010 	strb.w	r2, [sp, #16]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 8003824:	a805      	add	r0, sp, #20
 8003826:	463a      	mov	r2, r7
  BLUENRG_memcpy(payload + 1, &hc, sizeof(hc));
 8003828:	f8ad 3011 	strh.w	r3, [sp, #17]
  BLUENRG_memcpy(payload + HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE, param, plen);
 800382c:	f001 fdee 	bl	800540c <memcpy>
  if (hciContext.io.Send)
 8003830:	4b49      	ldr	r3, [pc, #292]	; (8003958 <hci_send_req+0x178>)
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	b113      	cbz	r3, 800383c <hci_send_req+0x5c>
    hciContext.io.Send (payload, HCI_HDR_SIZE + HCI_COMMAND_HDR_SIZE + plen);
 8003836:	1d39      	adds	r1, r7, #4
 8003838:	a804      	add	r0, sp, #16
 800383a:	4798      	blx	r3
  
  if (async)
 800383c:	2d00      	cmp	r5, #0
 800383e:	d178      	bne.n	8003932 <hci_send_req+0x152>
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 8003840:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8003844:	ea45 2588 	orr.w	r5, r5, r8, lsl #10
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
      {
        goto failed;
      }
      
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003848:	4e44      	ldr	r6, [pc, #272]	; (800395c <hci_send_req+0x17c>)
    
    /* If there are no more packets to be processed, be sure there is at list one
       packet in the pool to process the expected event.
       If no free packets are available, discard the processed event and insert it
       into the pool. */
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 800384a:	4f42      	ldr	r7, [pc, #264]	; (8003954 <hci_send_req+0x174>)
  uint16_t opcode = htobs(cmd_opcode_pack(r->ogf, r->ocf));
 800384c:	b2ad      	uxth	r5, r5
    uint32_t tickstart = HAL_GetTick();
 800384e:	f7fd f97d 	bl	8000b4c <HAL_GetTick>
 8003852:	4680      	mov	r8, r0
      if ((HAL_GetTick() - tickstart) > HCI_DEFAULT_TIMEOUT_MS)
 8003854:	f7fd f97a 	bl	8000b4c <HAL_GetTick>
 8003858:	eba0 0008 	sub.w	r0, r0, r8
 800385c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8003860:	d84a      	bhi.n	80038f8 <hci_send_req+0x118>
      if (!list_is_empty(&hciReadPktRxQueue)) 
 8003862:	4630      	mov	r0, r6
 8003864:	f000 f8cf 	bl	8003a06 <list_is_empty>
 8003868:	2800      	cmp	r0, #0
 800386a:	d1f3      	bne.n	8003854 <hci_send_req+0x74>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&hciReadPacket);    
 800386c:	a901      	add	r1, sp, #4
 800386e:	4630      	mov	r0, r6
 8003870:	f000 f8f6 	bl	8003a60 <list_remove_head>
    hci_hdr = (void *)hciReadPacket->dataBuff;
 8003874:	9901      	ldr	r1, [sp, #4]
    if (hci_hdr->type == HCI_EVENT_PKT)
 8003876:	7a0b      	ldrb	r3, [r1, #8]
 8003878:	2b04      	cmp	r3, #4
 800387a:	d109      	bne.n	8003890 <hci_send_req+0xb0>
      switch (event_pckt->evt) 
 800387c:	7a48      	ldrb	r0, [r1, #9]
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 800387e:	f891 3088 	ldrb.w	r3, [r1, #136]	; 0x88
      switch (event_pckt->evt) 
 8003882:	280f      	cmp	r0, #15
      len = hciReadPacket->data_len - (1 + HCI_EVENT_HDR_SIZE);
 8003884:	f1a3 0203 	sub.w	r2, r3, #3
      switch (event_pckt->evt) 
 8003888:	d02c      	beq.n	80038e4 <hci_send_req+0x104>
 800388a:	d81b      	bhi.n	80038c4 <hci_send_req+0xe4>
 800388c:	280e      	cmp	r0, #14
 800388e:	d052      	beq.n	8003936 <hci_send_req+0x156>
    if (list_is_empty(&hciReadPktPool) && list_is_empty(&hciReadPktRxQueue)) {
 8003890:	4638      	mov	r0, r7
 8003892:	f000 f8b8 	bl	8003a06 <list_is_empty>
 8003896:	2800      	cmp	r0, #0
 8003898:	d058      	beq.n	800394c <hci_send_req+0x16c>
 800389a:	4630      	mov	r0, r6
 800389c:	f000 f8b3 	bl	8003a06 <list_is_empty>
 80038a0:	2800      	cmp	r0, #0
 80038a2:	d053      	beq.n	800394c <hci_send_req+0x16c>
      list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 80038a4:	9901      	ldr	r1, [sp, #4]
 80038a6:	4638      	mov	r0, r7
    else {
      /* Insert the packet in a different queue. These packets will be
      inserted back in the main queue just before exiting from send_req(), so that
      these events can be processed by the application.
    */
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 80038a8:	f000 f8c3 	bl	8003a32 <list_insert_tail>
      hciReadPacket=NULL;
 80038ac:	2300      	movs	r3, #0
 80038ae:	9301      	str	r3, [sp, #4]
 80038b0:	e7cd      	b.n	800384e <hci_send_req+0x6e>
    list_remove_head(&hciReadPktRxQueue, (tListNode **)&pckt);    
 80038b2:	a904      	add	r1, sp, #16
 80038b4:	4648      	mov	r0, r9
 80038b6:	f000 f8d3 	bl	8003a60 <list_remove_head>
    list_insert_tail(&hciReadPktPool, (tListNode *)pckt);
 80038ba:	9904      	ldr	r1, [sp, #16]
 80038bc:	4638      	mov	r0, r7
 80038be:	f000 f8b8 	bl	8003a32 <list_insert_tail>
 80038c2:	e79d      	b.n	8003800 <hci_send_req+0x20>
      switch (event_pckt->evt) 
 80038c4:	2810      	cmp	r0, #16
 80038c6:	d017      	beq.n	80038f8 <hci_send_req+0x118>
 80038c8:	283e      	cmp	r0, #62	; 0x3e
 80038ca:	d1e1      	bne.n	8003890 <hci_send_req+0xb0>
        if (me->subevent != r->event)
 80038cc:	7ac8      	ldrb	r0, [r1, #11]
 80038ce:	6862      	ldr	r2, [r4, #4]
 80038d0:	4290      	cmp	r0, r2
 80038d2:	d1dd      	bne.n	8003890 <hci_send_req+0xb0>
        len -= 1;
 80038d4:	1f1a      	subs	r2, r3, #4
        r->rlen = MIN(len, r->rlen);
 80038d6:	6963      	ldr	r3, [r4, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf28      	it	cs
 80038dc:	461a      	movcs	r2, r3
 80038de:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 80038e0:	310c      	adds	r1, #12
 80038e2:	e01c      	b.n	800391e <hci_send_req+0x13e>
        if (cs->opcode != opcode)
 80038e4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
 80038e8:	42ab      	cmp	r3, r5
 80038ea:	d105      	bne.n	80038f8 <hci_send_req+0x118>
        if (r->event != EVT_CMD_STATUS) {
 80038ec:	6863      	ldr	r3, [r4, #4]
 80038ee:	2b0f      	cmp	r3, #15
 80038f0:	d00f      	beq.n	8003912 <hci_send_req+0x132>
          if (cs->status) {
 80038f2:	7acb      	ldrb	r3, [r1, #11]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d0cb      	beq.n	8003890 <hci_send_req+0xb0>
    }
  }
  
failed: 
  if (hciReadPacket!=NULL) {
 80038f8:	9901      	ldr	r1, [sp, #4]
 80038fa:	b111      	cbz	r1, 8003902 <hci_send_req+0x122>
    list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);
 80038fc:	4815      	ldr	r0, [pc, #84]	; (8003954 <hci_send_req+0x174>)
 80038fe:	f000 f88c 	bl	8003a1a <list_insert_head>
  }
  move_list(&hciReadPktRxQueue, &hciTempQueue);  
 8003902:	a802      	add	r0, sp, #8
 8003904:	f7ff ff20 	bl	8003748 <move_list.constprop.0>
  return -1;
 8003908:	f04f 30ff 	mov.w	r0, #4294967295
done:
  /* Insert the packet back into the pool.*/
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
  move_list(&hciReadPktRxQueue, &hciTempQueue);
  return 0;
}
 800390c:	b025      	add	sp, #148	; 0x94
 800390e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        r->rlen = MIN(len, r->rlen);
 8003912:	6963      	ldr	r3, [r4, #20]
 8003914:	429a      	cmp	r2, r3
 8003916:	bf28      	it	cs
 8003918:	461a      	movcs	r2, r3
 800391a:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 800391c:	310b      	adds	r1, #11
        BLUENRG_memcpy(r->rparam, me->data, r->rlen);
 800391e:	6920      	ldr	r0, [r4, #16]
 8003920:	f001 fd74 	bl	800540c <memcpy>
  list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket); 
 8003924:	480b      	ldr	r0, [pc, #44]	; (8003954 <hci_send_req+0x174>)
 8003926:	9901      	ldr	r1, [sp, #4]
 8003928:	f000 f877 	bl	8003a1a <list_insert_head>
  move_list(&hciReadPktRxQueue, &hciTempQueue);
 800392c:	a802      	add	r0, sp, #8
 800392e:	f7ff ff0b 	bl	8003748 <move_list.constprop.0>
    return 0;
 8003932:	2000      	movs	r0, #0
 8003934:	e7ea      	b.n	800390c <hci_send_req+0x12c>
        if (cc->opcode != opcode)
 8003936:	898a      	ldrh	r2, [r1, #12]
 8003938:	42aa      	cmp	r2, r5
 800393a:	d1dd      	bne.n	80038f8 <hci_send_req+0x118>
        len -= EVT_CMD_COMPLETE_SIZE;
 800393c:	1f9a      	subs	r2, r3, #6
        r->rlen = MIN(len, r->rlen);
 800393e:	6963      	ldr	r3, [r4, #20]
 8003940:	429a      	cmp	r2, r3
 8003942:	bf28      	it	cs
 8003944:	461a      	movcs	r2, r3
 8003946:	6162      	str	r2, [r4, #20]
        BLUENRG_memcpy(r->rparam, ptr, r->rlen);
 8003948:	310e      	adds	r1, #14
 800394a:	e7e8      	b.n	800391e <hci_send_req+0x13e>
    list_insert_tail(&hciTempQueue, (tListNode *)hciReadPacket);
 800394c:	9901      	ldr	r1, [sp, #4]
 800394e:	a802      	add	r0, sp, #8
 8003950:	e7aa      	b.n	80038a8 <hci_send_req+0xc8>
 8003952:	bf00      	nop
 8003954:	2000057c 	.word	0x2000057c
 8003958:	200000c0 	.word	0x200000c0
 800395c:	20000584 	.word	0x20000584

08003960 <hci_user_evt_proc>:

void hci_user_evt_proc(void)
{
 8003960:	b573      	push	{r0, r1, r4, r5, r6, lr}
  tHciDataPacket * hciReadPacket = NULL;
 8003962:	2300      	movs	r3, #0
     
  /* process any pending events read */
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 8003964:	4c0b      	ldr	r4, [pc, #44]	; (8003994 <hci_user_evt_proc+0x34>)
  {
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
    if (hciContext.UserEvtRx != NULL)
 8003966:	4d0c      	ldr	r5, [pc, #48]	; (8003998 <hci_user_evt_proc+0x38>)
    {
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
    }
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 8003968:	4e0c      	ldr	r6, [pc, #48]	; (800399c <hci_user_evt_proc+0x3c>)
  tHciDataPacket * hciReadPacket = NULL;
 800396a:	9301      	str	r3, [sp, #4]
  while (list_is_empty(&hciReadPktRxQueue) == FALSE)
 800396c:	4620      	mov	r0, r4
 800396e:	f000 f84a 	bl	8003a06 <list_is_empty>
 8003972:	b108      	cbz	r0, 8003978 <hci_user_evt_proc+0x18>
  }
}
 8003974:	b002      	add	sp, #8
 8003976:	bd70      	pop	{r4, r5, r6, pc}
    list_remove_head (&hciReadPktRxQueue, (tListNode **)&hciReadPacket);
 8003978:	a901      	add	r1, sp, #4
 800397a:	4620      	mov	r0, r4
 800397c:	f000 f870 	bl	8003a60 <list_remove_head>
    if (hciContext.UserEvtRx != NULL)
 8003980:	69eb      	ldr	r3, [r5, #28]
 8003982:	b113      	cbz	r3, 800398a <hci_user_evt_proc+0x2a>
      hciContext.UserEvtRx(hciReadPacket->dataBuff);
 8003984:	9801      	ldr	r0, [sp, #4]
 8003986:	3008      	adds	r0, #8
 8003988:	4798      	blx	r3
    list_insert_tail(&hciReadPktPool, (tListNode *)hciReadPacket);
 800398a:	9901      	ldr	r1, [sp, #4]
 800398c:	4630      	mov	r0, r6
 800398e:	f000 f850 	bl	8003a32 <list_insert_tail>
 8003992:	e7eb      	b.n	800396c <hci_user_evt_proc+0xc>
 8003994:	20000584 	.word	0x20000584
 8003998:	200000c0 	.word	0x200000c0
 800399c:	2000057c 	.word	0x2000057c

080039a0 <hci_notify_asynch_evt>:

int32_t hci_notify_asynch_evt(void* pdata)
{
 80039a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  tHciDataPacket * hciReadPacket = NULL;
 80039a2:	2300      	movs	r3, #0
  uint8_t data_len;
  
  int32_t ret = 0;
  
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80039a4:	4813      	ldr	r0, [pc, #76]	; (80039f4 <hci_notify_asynch_evt+0x54>)
  tHciDataPacket * hciReadPacket = NULL;
 80039a6:	9301      	str	r3, [sp, #4]
  if (list_is_empty (&hciReadPktPool) == FALSE)
 80039a8:	f000 f82d 	bl	8003a06 <list_is_empty>
 80039ac:	b9d8      	cbnz	r0, 80039e6 <hci_notify_asynch_evt+0x46>
  {
    /* Queuing a packet to read */
    list_remove_head (&hciReadPktPool, (tListNode **)&hciReadPacket);
 80039ae:	a901      	add	r1, sp, #4
 80039b0:	4810      	ldr	r0, [pc, #64]	; (80039f4 <hci_notify_asynch_evt+0x54>)
 80039b2:	f000 f855 	bl	8003a60 <list_remove_head>
    
    if (hciContext.io.Receive)
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <hci_notify_asynch_evt+0x58>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	b193      	cbz	r3, 80039e2 <hci_notify_asynch_evt+0x42>
    {
      data_len = hciContext.io.Receive(hciReadPacket->dataBuff, HCI_READ_PACKET_SIZE);
 80039bc:	9801      	ldr	r0, [sp, #4]
 80039be:	2180      	movs	r1, #128	; 0x80
 80039c0:	3008      	adds	r0, #8
 80039c2:	4798      	blx	r3
 80039c4:	b2c5      	uxtb	r5, r0
      if (data_len > 0)
      {                    
        hciReadPacket->data_len = data_len;
 80039c6:	9901      	ldr	r1, [sp, #4]
      if (data_len > 0)
 80039c8:	b185      	cbz	r5, 80039ec <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80039ca:	7a0b      	ldrb	r3, [r1, #8]
        hciReadPacket->data_len = data_len;
 80039cc:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
  if (hci_pckt[HCI_PCK_TYPE_OFFSET] != HCI_EVENT_PKT)
 80039d0:	2b04      	cmp	r3, #4
 80039d2:	d10b      	bne.n	80039ec <hci_notify_asynch_evt+0x4c>
  if (hci_pckt[EVENT_PARAMETER_TOT_LEN_OFFSET] != hciReadPacket->data_len - (1+HCI_EVENT_HDR_SIZE))
 80039d4:	7a8b      	ldrb	r3, [r1, #10]
 80039d6:	1ee8      	subs	r0, r5, #3
 80039d8:	4283      	cmp	r3, r0
 80039da:	d107      	bne.n	80039ec <hci_notify_asynch_evt+0x4c>
        if (verify_packet(hciReadPacket) == 0)
          list_insert_tail(&hciReadPktRxQueue, (tListNode *)hciReadPacket);
 80039dc:	4807      	ldr	r0, [pc, #28]	; (80039fc <hci_notify_asynch_evt+0x5c>)
 80039de:	f000 f828 	bl	8003a32 <list_insert_tail>
  int32_t ret = 0;
 80039e2:	2000      	movs	r0, #0
 80039e4:	e000      	b.n	80039e8 <hci_notify_asynch_evt+0x48>
      }
    }
  }
  else 
  {
    ret = 1;
 80039e6:	2001      	movs	r0, #1
  }
  return ret;

}
 80039e8:	b003      	add	sp, #12
 80039ea:	bd30      	pop	{r4, r5, pc}
          list_insert_head(&hciReadPktPool, (tListNode *)hciReadPacket);          
 80039ec:	4801      	ldr	r0, [pc, #4]	; (80039f4 <hci_notify_asynch_evt+0x54>)
 80039ee:	f000 f814 	bl	8003a1a <list_insert_head>
 80039f2:	e7f6      	b.n	80039e2 <hci_notify_asynch_evt+0x42>
 80039f4:	2000057c 	.word	0x2000057c
 80039f8:	200000c0 	.word	0x200000c0
 80039fc:	20000584 	.word	0x20000584

08003a00 <list_init_head>:
/******************************************************************************
 * Function Definitions 
******************************************************************************/
void list_init_head (tListNode * listHead)
{
  listHead->next = listHead;
 8003a00:	6000      	str	r0, [r0, #0]
  listHead->prev = listHead;	
 8003a02:	6040      	str	r0, [r0, #4]
 8003a04:	4770      	bx	lr

08003a06 <list_is_empty>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a06:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a0a:	b672      	cpsid	i
  
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
   
  if(listHead->next == listHead)
 8003a0c:	6803      	ldr	r3, [r0, #0]
  {
    return_value = 1;
 8003a0e:	1a1b      	subs	r3, r3, r0
 8003a10:	4258      	negs	r0, r3
 8003a12:	4158      	adcs	r0, r3
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a14:	f382 8810 	msr	PRIMASK, r2
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return return_value;
}
 8003a18:	4770      	bx	lr

08003a1a <list_insert_head>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a1a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a1e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead->next;
 8003a20:	6802      	ldr	r2, [r0, #0]
 8003a22:	600a      	str	r2, [r1, #0]
  node->prev = listHead;
 8003a24:	6048      	str	r0, [r1, #4]
  listHead->next = node;
 8003a26:	6001      	str	r1, [r0, #0]
  (node->next)->prev = node;
 8003a28:	680a      	ldr	r2, [r1, #0]
 8003a2a:	6051      	str	r1, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2c:	f383 8810 	msr	PRIMASK, r3
 8003a30:	4770      	bx	lr

08003a32 <list_insert_tail>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a32:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a36:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  node->next = listHead;
  node->prev = listHead->prev;
 8003a38:	6842      	ldr	r2, [r0, #4]
 8003a3a:	604a      	str	r2, [r1, #4]
  node->next = listHead;
 8003a3c:	6008      	str	r0, [r1, #0]
  listHead->prev = node;
 8003a3e:	6041      	str	r1, [r0, #4]
  (node->prev)->next = node;
 8003a40:	684a      	ldr	r2, [r1, #4]
 8003a42:	6011      	str	r1, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a44:	f383 8810 	msr	PRIMASK, r3
 8003a48:	4770      	bx	lr

08003a4a <list_remove_node>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a4a:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a4e:	b672      	cpsid	i
{
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  (node->prev)->next = node->next;
 8003a50:	e890 000a 	ldmia.w	r0, {r1, r3}
 8003a54:	6019      	str	r1, [r3, #0]
  (node->next)->prev = node->prev;
 8003a56:	6801      	ldr	r1, [r0, #0]
 8003a58:	604b      	str	r3, [r1, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a5a:	f382 8810 	msr	PRIMASK, r2
 8003a5e:	4770      	bx	lr

08003a60 <list_remove_head>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_head (tListNode * listHead, tListNode ** node )
{
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a64:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a68:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->next;
 8003a6a:	6803      	ldr	r3, [r0, #0]
 8003a6c:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->next);
 8003a6e:	6800      	ldr	r0, [r0, #0]
 8003a70:	f7ff ffeb 	bl	8003a4a <list_remove_node>
  (*node)->next = NULL;
 8003a74:	6822      	ldr	r2, [r4, #0]
 8003a76:	2300      	movs	r3, #0
 8003a78:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003a7a:	6822      	ldr	r2, [r4, #0]
 8003a7c:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	f385 8810 	msr	PRIMASK, r5
 8003a82:	bd38      	pop	{r3, r4, r5, pc}

08003a84 <list_remove_tail>:
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
}

void list_remove_tail (tListNode * listHead, tListNode ** node )
{
 8003a84:	b538      	push	{r3, r4, r5, lr}
 8003a86:	460c      	mov	r4, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a88:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003a8c:	b672      	cpsid	i
  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/
  
  *node = listHead->prev;
 8003a8e:	6843      	ldr	r3, [r0, #4]
 8003a90:	600b      	str	r3, [r1, #0]
  list_remove_node (listHead->prev);
 8003a92:	6840      	ldr	r0, [r0, #4]
 8003a94:	f7ff ffd9 	bl	8003a4a <list_remove_node>
  (*node)->next = NULL;
 8003a98:	6822      	ldr	r2, [r4, #0]
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	6013      	str	r3, [r2, #0]
  (*node)->prev = NULL;
 8003a9e:	6822      	ldr	r2, [r4, #0]
 8003aa0:	6053      	str	r3, [r2, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aa2:	f385 8810 	msr	PRIMASK, r5
 8003aa6:	bd38      	pop	{r3, r4, r5, pc}

08003aa8 <list_get_size>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003aa8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8003aac:	b672      	cpsid	i

  uint32_t uwPRIMASK_Bit;
  uwPRIMASK_Bit = __get_PRIMASK();  /**< backup PRIMASK bit */
  __disable_irq();                  /**< Disable all interrupts by setting PRIMASK bit on Cortex*/

  temp = listHead->next;
 8003aae:	6802      	ldr	r2, [r0, #0]
  int size = 0;
 8003ab0:	2300      	movs	r3, #0
  while (temp != listHead)
 8003ab2:	4282      	cmp	r2, r0
 8003ab4:	d103      	bne.n	8003abe <list_get_size+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ab6:	f381 8810 	msr	PRIMASK, r1
  }
  
  __set_PRIMASK(uwPRIMASK_Bit);     /**< Restore PRIMASK bit*/
  
  return (size);
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	4770      	bx	lr
    size++;
 8003abe:	3301      	adds	r3, #1
    temp = temp->next;		
 8003ac0:	6812      	ldr	r2, [r2, #0]
 8003ac2:	e7f6      	b.n	8003ab2 <list_get_size+0xa>

08003ac4 <MX_BlueNRG_MS_Init>:
  PRINT_CSV("%02d:%02d:%02d.%03d", ms/(60*60*1000)%24, ms/(60*1000)%60, (ms/1000)%60, ms%1000);
}
#endif

void MX_BlueNRG_MS_Init(void)
{
 8003ac4:	b530      	push	{r4, r5, lr}
 * @param  None
 * @retval None
 */
static void User_Init(void)
{
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8003ac6:	2101      	movs	r1, #1
{
 8003ac8:	b089      	sub	sp, #36	; 0x24
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 8003aca:	2000      	movs	r0, #0
 8003acc:	f7fc ff3c 	bl	8000948 <BSP_PB_Init>
  BSP_LED_Init(LED2);
 8003ad0:	2000      	movs	r0, #0
 8003ad2:	f7fc ff09 	bl	80008e8 <BSP_LED_Init>
  
  BSP_COM_Init(COM1);
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f7fc ffac 	bl	8000a34 <BSP_COM_Init>
  user_button_init_state = BSP_PB_GetState(BUTTON_KEY);
 8003adc:	2000      	movs	r0, #0
 8003ade:	f7fc ff7f 	bl	80009e0 <BSP_PB_GetState>
 8003ae2:	4b37      	ldr	r3, [pc, #220]	; (8003bc0 <MX_BlueNRG_MS_Init+0xfc>)
 8003ae4:	b2c0      	uxtb	r0, r0
 8003ae6:	7018      	strb	r0, [r3, #0]
  hci_init(user_notify, NULL);
 8003ae8:	2100      	movs	r1, #0
 8003aea:	4836      	ldr	r0, [pc, #216]	; (8003bc4 <MX_BlueNRG_MS_Init+0x100>)
 8003aec:	f7ff fe40 	bl	8003770 <hci_init>
  getBlueNRGVersion(&hwVersion, &fwVersion);
 8003af0:	f10d 011e 	add.w	r1, sp, #30
 8003af4:	f10d 0017 	add.w	r0, sp, #23
 8003af8:	f7ff fd75 	bl	80035e6 <getBlueNRGVersion>
  hci_reset(); 
 8003afc:	f7ff fd94 	bl	8003628 <hci_reset>
  HAL_Delay(100);
 8003b00:	2064      	movs	r0, #100	; 0x64
 8003b02:	f7fd f829 	bl	8000b58 <HAL_Delay>
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8003b06:	f89d 4017 	ldrb.w	r4, [sp, #23]
  Set_Random_Address(bdaddr, hwVersion, fwVersion);
 8003b0a:	f8bd 501e 	ldrh.w	r5, [sp, #30]
  if (hwVersion > 0x30) { /* X-NUCLEO-IDB05A1 expansion board is used */
 8003b0e:	2c30      	cmp	r4, #48	; 0x30
    bnrg_expansion_board = IDB05A1;    
 8003b10:	bf82      	ittt	hi
 8003b12:	4b2d      	ldrhi	r3, [pc, #180]	; (8003bc8 <MX_BlueNRG_MS_Init+0x104>)
 8003b14:	2201      	movhi	r2, #1
 8003b16:	701a      	strbhi	r2, [r3, #0]
static void Set_Random_Address(uint8_t* bdaddr, uint8_t hwVersion, uint16_t fwVersion)
{  
  uint8_t i;
  
  /* Initialize a random seed */
  srand (HAL_GetTick() + hwVersion + fwVersion);
 8003b18:	f7fd f818 	bl	8000b4c <HAL_GetTick>
 8003b1c:	442c      	add	r4, r5
 8003b1e:	4420      	add	r0, r4
 8003b20:	f001 fc88 	bl	8005434 <srand>
  
  for (i=0; i<5; i++) {
    bdaddr[i] = rand()&0xFF;
 8003b24:	4d29      	ldr	r5, [pc, #164]	; (8003bcc <MX_BlueNRG_MS_Init+0x108>)
  srand (HAL_GetTick() + hwVersion + fwVersion);
 8003b26:	2400      	movs	r4, #0
    bdaddr[i] = rand()&0xFF;
 8003b28:	f001 fcac 	bl	8005484 <rand>
 8003b2c:	5528      	strb	r0, [r5, r4]
 8003b2e:	3401      	adds	r4, #1
  for (i=0; i<5; i++) {
 8003b30:	2c05      	cmp	r4, #5
 8003b32:	d1f9      	bne.n	8003b28 <MX_BlueNRG_MS_Init+0x64>
  }
  bdaddr[i] = 0xD0; 
 8003b34:	23d0      	movs	r3, #208	; 0xd0
 8003b36:	716b      	strb	r3, [r5, #5]
  ret = aci_hal_write_config_data(CONFIG_DATA_PUBADDR_OFFSET,
 8003b38:	4a24      	ldr	r2, [pc, #144]	; (8003bcc <MX_BlueNRG_MS_Init+0x108>)
 8003b3a:	2106      	movs	r1, #6
 8003b3c:	2000      	movs	r0, #0
 8003b3e:	f7ff fcfa 	bl	8003536 <aci_hal_write_config_data>
  ret = aci_gatt_init();    
 8003b42:	f7ff fbdc 	bl	80032fe <aci_gatt_init>
  if (bnrg_expansion_board == IDB05A1) {
 8003b46:	4b20      	ldr	r3, [pc, #128]	; (8003bc8 <MX_BlueNRG_MS_Init+0x104>)
 8003b48:	7818      	ldrb	r0, [r3, #0]
 8003b4a:	2801      	cmp	r0, #1
 8003b4c:	ab07      	add	r3, sp, #28
 8003b4e:	f10d 021a 	add.w	r2, sp, #26
 8003b52:	d113      	bne.n	8003b7c <MX_BlueNRG_MS_Init+0xb8>
    ret = aci_gap_init_IDB05A1(GAP_PERIPHERAL_ROLE_IDB05A1, 0, 0x07, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8003b54:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003b58:	2100      	movs	r1, #0
 8003b5a:	ab06      	add	r3, sp, #24
 8003b5c:	2207      	movs	r2, #7
 8003b5e:	f7ff fa87 	bl	8003070 <aci_gap_init_IDB05A1>
  ret = aci_gatt_update_char_value(service_handle, dev_name_char_handle, 0,
 8003b62:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <MX_BlueNRG_MS_Init+0x10c>)
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f8bd 101a 	ldrh.w	r1, [sp, #26]
 8003b6c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
 8003b70:	2307      	movs	r3, #7
 8003b72:	f7ff fc84 	bl	800347e <aci_gatt_update_char_value>
  if (ret) {
 8003b76:	4602      	mov	r2, r0
 8003b78:	b128      	cbz	r0, 8003b86 <MX_BlueNRG_MS_Init+0xc2>
 8003b7a:	e7fe      	b.n	8003b7a <MX_BlueNRG_MS_Init+0xb6>
    ret = aci_gap_init_IDB04A1(GAP_PERIPHERAL_ROLE_IDB04A1, &service_handle, &dev_name_char_handle, &appearance_char_handle);
 8003b7c:	a906      	add	r1, sp, #24
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f7ff fab4 	bl	80030ec <aci_gap_init_IDB04A1>
 8003b84:	e7ed      	b.n	8003b62 <MX_BlueNRG_MS_Init+0x9e>
  ret = aci_gap_set_auth_requirement(MITM_PROTECTION_REQUIRED,
 8003b86:	4b13      	ldr	r3, [pc, #76]	; (8003bd4 <MX_BlueNRG_MS_Init+0x110>)
 8003b88:	9302      	str	r3, [sp, #8]
 8003b8a:	2401      	movs	r4, #1
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	9001      	str	r0, [sp, #4]
 8003b90:	9300      	str	r3, [sp, #0]
 8003b92:	4601      	mov	r1, r0
 8003b94:	9403      	str	r4, [sp, #12]
 8003b96:	2307      	movs	r3, #7
 8003b98:	4620      	mov	r0, r4
 8003b9a:	f7ff fb41 	bl	8003220 <aci_gap_set_auth_requirement>
  if (ret) {
 8003b9e:	b100      	cbz	r0, 8003ba2 <MX_BlueNRG_MS_Init+0xde>
 8003ba0:	e7fe      	b.n	8003ba0 <MX_BlueNRG_MS_Init+0xdc>
  ret = Add_HWServW2ST_Service();
 8003ba2:	f000 fbe5 	bl	8004370 <Add_HWServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) {
 8003ba6:	b100      	cbz	r0, 8003baa <MX_BlueNRG_MS_Init+0xe6>
 8003ba8:	e7fe      	b.n	8003ba8 <MX_BlueNRG_MS_Init+0xe4>
  ret = Add_SWServW2ST_Service();
 8003baa:	f000 fc83 	bl	80044b4 <Add_SWServW2ST_Service>
  if(ret == BLE_STATUS_SUCCESS) {
 8003bae:	b100      	cbz	r0, 8003bb2 <MX_BlueNRG_MS_Init+0xee>
 8003bb0:	e7fe      	b.n	8003bb0 <MX_BlueNRG_MS_Init+0xec>
  ret = aci_hal_set_tx_power_level(1,4);
 8003bb2:	2104      	movs	r1, #4
 8003bb4:	4620      	mov	r0, r4
 8003bb6:	f7ff fcf0 	bl	800359a <aci_hal_set_tx_power_level>
}
 8003bba:	b009      	add	sp, #36	; 0x24
 8003bbc:	bd30      	pop	{r4, r5, pc}
 8003bbe:	bf00      	nop
 8003bc0:	20000014 	.word	0x20000014
 8003bc4:	08004fa9 	.word	0x08004fa9
 8003bc8:	2000039c 	.word	0x2000039c
 8003bcc:	2000058c 	.word	0x2000058c
 8003bd0:	08005619 	.word	0x08005619
 8003bd4:	0001e240 	.word	0x0001e240

08003bd8 <MX_BlueNRG_MS_Process>:
{
 8003bd8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (set_connectable)
 8003bdc:	4cd6      	ldr	r4, [pc, #856]	; (8003f38 <MX_BlueNRG_MS_Process+0x360>)
 8003bde:	7823      	ldrb	r3, [r4, #0]
 8003be0:	b11b      	cbz	r3, 8003bea <MX_BlueNRG_MS_Process+0x12>
    Set_DeviceConnectable();
 8003be2:	f001 f961 	bl	8004ea8 <Set_DeviceConnectable>
    set_connectable = FALSE;
 8003be6:	2300      	movs	r3, #0
 8003be8:	7023      	strb	r3, [r4, #0]
    BSP_LED_Toggle(LED2);
 8003bea:	2000      	movs	r0, #0
 8003bec:	f7fc fea2 	bl	8000934 <BSP_LED_Toggle>
    if (connected)
 8003bf0:	4bd2      	ldr	r3, [pc, #840]	; (8003f3c <MX_BlueNRG_MS_Process+0x364>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	f000 81fd 	beq.w	8003ff4 <MX_BlueNRG_MS_Process+0x41c>
      srand(HAL_GetTick());
 8003bfa:	f7fc ffa7 	bl	8000b4c <HAL_GetTick>
 8003bfe:	f001 fc19 	bl	8005434 <srand>
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003c02:	f001 fc3f 	bl	8005484 <rand>
 8003c06:	4604      	mov	r4, r0
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c08:	f001 fc3c 	bl	8005484 <rand>
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003c0c:	2605      	movs	r6, #5
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c0e:	4605      	mov	r5, r0
  *data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX;     /* T sensor emulation */
 8003c10:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003c14:	2300      	movs	r3, #0
 8003c16:	fb84 0106 	smull	r0, r1, r4, r6
 8003c1a:	f7fc fcdd 	bl	80005d8 <__aeabi_uldivmod>
 8003c1e:	f7fc fc55 	bl	80004cc <__aeabi_ul2d>
 8003c22:	2200      	movs	r2, #0
 8003c24:	4bc6      	ldr	r3, [pc, #792]	; (8003f40 <MX_BlueNRG_MS_Process+0x368>)
 8003c26:	f7fc fad5 	bl	80001d4 <__adddf3>
 8003c2a:	f7fc fc85 	bl	8000538 <__aeabi_d2f>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003c2e:	ee07 0a10 	vmov	s14, r0
 8003c32:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 8003c36:	ee67 7a27 	vmul.f32	s15, s14, s15
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c3a:	2050      	movs	r0, #80	; 0x50
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003c3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c40:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003c44:	2300      	movs	r3, #0
 8003c46:	fb85 0100 	smull	r0, r1, r5, r0
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003c4a:	edcd 7a00 	vstr	s15, [sp]
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c4e:	f7fc fcc3 	bl	80005d8 <__aeabi_uldivmod>
 8003c52:	f7fc fc3b 	bl	80004cc <__aeabi_ul2d>
 8003c56:	4bbb      	ldr	r3, [pc, #748]	; (8003f44 <MX_BlueNRG_MS_Process+0x36c>)
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003c58:	f9bd 4000 	ldrsh.w	r4, [sp]
 8003c5c:	4dba      	ldr	r5, [pc, #744]	; (8003f48 <MX_BlueNRG_MS_Process+0x370>)
  *data_p = 1000.0 + ((uint64_t)rand()*80)/RAND_MAX; /* P sensor emulation */
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f7fc fab8 	bl	80001d4 <__adddf3>
 8003c64:	f7fc fc68 	bl	8000538 <__aeabi_d2f>
      BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10));
 8003c68:	eddf 7ab8 	vldr	s15, [pc, #736]	; 8003f4c <MX_BlueNRG_MS_Process+0x374>
 8003c6c:	ee07 0a10 	vmov	s14, r0
 8003c70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c74:	4621      	mov	r1, r4
 8003c76:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c7a:	f04f 0803 	mov.w	r8, #3
 8003c7e:	ee17 0a90 	vmov	r0, s15
 8003c82:	f000 fd07 	bl	8004694 <BlueMS_Environmental_Update>
      Set_Random_Motion_Values(counter);
 8003c86:	4bb2      	ldr	r3, [pc, #712]	; (8003f50 <MX_BlueNRG_MS_Process+0x378>)
 8003c88:	681c      	ldr	r4, [r3, #0]
  if (cnt < 20) {
 8003c8a:	2c13      	cmp	r4, #19
 8003c8c:	f200 81b7 	bhi.w	8003ffe <MX_BlueNRG_MS_Process+0x426>
    x_axes.AXIS_X +=  (10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003c90:	f001 fbf8 	bl	8005484 <rand>
 8003c94:	fba4 8908 	umull	r8, r9, r4, r8
 8003c98:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003c9c:	fb00 f309 	mul.w	r3, r0, r9
 8003ca0:	fb08 330b 	mla	r3, r8, fp, r3
 8003ca4:	fba0 0108 	umull	r0, r1, r0, r8
 8003ca8:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003cac:	4419      	add	r1, r3
 8003cae:	2300      	movs	r3, #0
 8003cb0:	f7fc fc92 	bl	80005d8 <__aeabi_uldivmod>
 8003cb4:	682b      	ldr	r3, [r5, #0]
 8003cb6:	300a      	adds	r0, #10
 8003cb8:	4403      	add	r3, r0
 8003cba:	602b      	str	r3, [r5, #0]
    x_axes.AXIS_Y += -(10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003cbc:	f001 fbe2 	bl	8005484 <rand>
 8003cc0:	fba4 6706 	umull	r6, r7, r4, r6
 8003cc4:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003cc8:	fb00 f307 	mul.w	r3, r0, r7
 8003ccc:	fb06 330b 	mla	r3, r6, fp, r3
 8003cd0:	fba0 0106 	umull	r0, r1, r0, r6
 8003cd4:	4419      	add	r1, r3
 8003cd6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003cda:	2300      	movs	r3, #0
 8003cdc:	f7fc fc7c 	bl	80005d8 <__aeabi_uldivmod>
 8003ce0:	686b      	ldr	r3, [r5, #4]
 8003ce2:	f06f 0209 	mvn.w	r2, #9
 8003ce6:	1a10      	subs	r0, r2, r0
 8003ce8:	4403      	add	r3, r0
 8003cea:	606b      	str	r3, [r5, #4]
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003cec:	f001 fbca 	bl	8005484 <rand>
 8003cf0:	2307      	movs	r3, #7
 8003cf2:	fba4 2303 	umull	r2, r3, r4, r3
 8003cf6:	e9cd 2300 	strd	r2, r3, [sp]
 8003cfa:	9b01      	ldr	r3, [sp, #4]
 8003cfc:	9a00      	ldr	r2, [sp, #0]
 8003cfe:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003d02:	4343      	muls	r3, r0
 8003d04:	fb02 330b 	mla	r3, r2, fp, r3
 8003d08:	fba0 0102 	umull	r0, r1, r0, r2
 8003d0c:	4419      	add	r1, r3
 8003d0e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d12:	2300      	movs	r3, #0
 8003d14:	f7fc fc60 	bl	80005d8 <__aeabi_uldivmod>
 8003d18:	68ab      	ldr	r3, [r5, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8003d1a:	f8df b240 	ldr.w	fp, [pc, #576]	; 8003f5c <MX_BlueNRG_MS_Process+0x384>
    x_axes.AXIS_Z +=  (10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003d1e:	300a      	adds	r0, #10
 8003d20:	4403      	add	r3, r0
 8003d22:	60ab      	str	r3, [r5, #8]
    g_axes.AXIS_X +=  (100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 8003d24:	f001 fbae 	bl	8005484 <rand>
 8003d28:	1922      	adds	r2, r4, r4
 8003d2a:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	415b      	adcs	r3, r3
 8003d34:	4351      	muls	r1, r2
 8003d36:	fb00 1303 	mla	r3, r0, r3, r1
 8003d3a:	fba2 0100 	umull	r0, r1, r2, r0
 8003d3e:	4419      	add	r1, r3
 8003d40:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d44:	2300      	movs	r3, #0
 8003d46:	f7fc fc47 	bl	80005d8 <__aeabi_uldivmod>
 8003d4a:	f8db 3000 	ldr.w	r3, [fp]
 8003d4e:	3064      	adds	r0, #100	; 0x64
 8003d50:	4403      	add	r3, r0
 8003d52:	f8cb 3000 	str.w	r3, [fp]
    g_axes.AXIS_Y += -(100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8003d56:	f001 fb95 	bl	8005484 <rand>
 8003d5a:	0fa5      	lsrs	r5, r4, #30
 8003d5c:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8003d60:	17c2      	asrs	r2, r0, #31
 8003d62:	fb00 f305 	mul.w	r3, r0, r5
 8003d66:	fb0a 3302 	mla	r3, sl, r2, r3
 8003d6a:	fba0 010a 	umull	r0, r1, r0, sl
 8003d6e:	4419      	add	r1, r3
 8003d70:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003d74:	2300      	movs	r3, #0
 8003d76:	f7fc fc2f 	bl	80005d8 <__aeabi_uldivmod>
 8003d7a:	f8db 3004 	ldr.w	r3, [fp, #4]
 8003d7e:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8003d82:	1a10      	subs	r0, r2, r0
 8003d84:	4403      	add	r3, r0
 8003d86:	f8cb 3004 	str.w	r3, [fp, #4]
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8003d8a:	f001 fb7b 	bl	8005484 <rand>
 8003d8e:	4686      	mov	lr, r0
 8003d90:	2006      	movs	r0, #6
 8003d92:	fba4 2300 	umull	r2, r3, r4, r0
 8003d96:	4670      	mov	r0, lr
 8003d98:	17c1      	asrs	r1, r0, #31
 8003d9a:	4351      	muls	r1, r2
 8003d9c:	fb0e 1303 	mla	r3, lr, r3, r1
 8003da0:	fba2 010e 	umull	r0, r1, r2, lr
 8003da4:	4419      	add	r1, r3
 8003da6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003daa:	2300      	movs	r3, #0
 8003dac:	f7fc fc14 	bl	80005d8 <__aeabi_uldivmod>
 8003db0:	f8db 3008 	ldr.w	r3, [fp, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003db4:	4c67      	ldr	r4, [pc, #412]	; (8003f54 <MX_BlueNRG_MS_Process+0x37c>)
    g_axes.AXIS_Z +=  (100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 8003db6:	3064      	adds	r0, #100	; 0x64
 8003db8:	4403      	add	r3, r0
 8003dba:	f8cb 3008 	str.w	r3, [fp, #8]
    m_axes.AXIS_X +=  (3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003dbe:	f001 fb61 	bl	8005484 <rand>
 8003dc2:	17c2      	asrs	r2, r0, #31
 8003dc4:	fb00 f309 	mul.w	r3, r0, r9
 8003dc8:	fb08 3302 	mla	r3, r8, r2, r3
 8003dcc:	fba0 0108 	umull	r0, r1, r0, r8
 8003dd0:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003dd4:	4419      	add	r1, r3
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f7fc fbfe 	bl	80005d8 <__aeabi_uldivmod>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	3003      	adds	r0, #3
 8003de0:	4403      	add	r3, r0
 8003de2:	6023      	str	r3, [r4, #0]
    m_axes.AXIS_Y += -(3  + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 8003de4:	f001 fb4e 	bl	8005484 <rand>
 8003de8:	17c3      	asrs	r3, r0, #31
 8003dea:	4345      	muls	r5, r0
 8003dec:	fb0a 5503 	mla	r5, sl, r3, r5
 8003df0:	fba0 010a 	umull	r0, r1, r0, sl
 8003df4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003df8:	2300      	movs	r3, #0
 8003dfa:	4429      	add	r1, r5
 8003dfc:	f7fc fbec 	bl	80005d8 <__aeabi_uldivmod>
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	f06f 0202 	mvn.w	r2, #2
 8003e06:	1a10      	subs	r0, r2, r0
 8003e08:	4403      	add	r3, r0
 8003e0a:	6063      	str	r3, [r4, #4]
    m_axes.AXIS_Z +=  (3  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003e0c:	f001 fb3a 	bl	8005484 <rand>
 8003e10:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003e14:	fb00 f307 	mul.w	r3, r0, r7
 8003e18:	fb06 330b 	mla	r3, r6, fp, r3
 8003e1c:	fba0 0106 	umull	r0, r1, r0, r6
 8003e20:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e24:	4419      	add	r1, r3
 8003e26:	2300      	movs	r3, #0
 8003e28:	f7fc fbd6 	bl	80005d8 <__aeabi_uldivmod>
 8003e2c:	68a3      	ldr	r3, [r4, #8]
 8003e2e:	3003      	adds	r0, #3
 8003e30:	4403      	add	r3, r0
 8003e32:	60a3      	str	r3, [r4, #8]
    q_axes.AXIS_X -= (100  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003e34:	f001 fb26 	bl	8005484 <rand>
 8003e38:	fb00 f309 	mul.w	r3, r0, r9
 8003e3c:	ea4f 7be0 	mov.w	fp, r0, asr #31
 8003e40:	fb08 330b 	mla	r3, r8, fp, r3
 8003e44:	fba0 0108 	umull	r0, r1, r0, r8
 8003e48:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e4c:	4419      	add	r1, r3
 8003e4e:	2300      	movs	r3, #0
 8003e50:	f7fc fbc2 	bl	80005d8 <__aeabi_uldivmod>
 8003e54:	4c40      	ldr	r4, [pc, #256]	; (8003f58 <MX_BlueNRG_MS_Process+0x380>)
 8003e56:	6823      	ldr	r3, [r4, #0]
 8003e58:	3064      	adds	r0, #100	; 0x64
 8003e5a:	1a1b      	subs	r3, r3, r0
 8003e5c:	6023      	str	r3, [r4, #0]
    q_axes.AXIS_Y += (100  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003e5e:	f001 fb11 	bl	8005484 <rand>
 8003e62:	fb00 f307 	mul.w	r3, r0, r7
 8003e66:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8003e6a:	fb06 3309 	mla	r3, r6, r9, r3
 8003e6e:	fba0 0106 	umull	r0, r1, r0, r6
 8003e72:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003e76:	4419      	add	r1, r3
 8003e78:	2300      	movs	r3, #0
 8003e7a:	f7fc fbad 	bl	80005d8 <__aeabi_uldivmod>
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	3064      	adds	r0, #100	; 0x64
 8003e82:	4403      	add	r3, r0
 8003e84:	6063      	str	r3, [r4, #4]
    q_axes.AXIS_Z -= (100  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8003e86:	f001 fafd 	bl	8005484 <rand>
 8003e8a:	9b01      	ldr	r3, [sp, #4]
 8003e8c:	9a00      	ldr	r2, [sp, #0]
 8003e8e:	17c7      	asrs	r7, r0, #31
 8003e90:	4343      	muls	r3, r0
 8003e92:	fb02 3307 	mla	r3, r2, r7, r3
 8003e96:	fba0 0102 	umull	r0, r1, r0, r2
 8003e9a:	4419      	add	r1, r3
 8003e9c:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	f7fc fb99 	bl	80005d8 <__aeabi_uldivmod>
 8003ea6:	68a3      	ldr	r3, [r4, #8]
 8003ea8:	3064      	adds	r0, #100	; 0x64
 8003eaa:	1a1b      	subs	r3, r3, r0
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8003eac:	60a3      	str	r3, [r4, #8]
      Acc_Update(&x_axes, &g_axes, &m_axes);      
 8003eae:	4c26      	ldr	r4, [pc, #152]	; (8003f48 <MX_BlueNRG_MS_Process+0x370>)
 8003eb0:	4a28      	ldr	r2, [pc, #160]	; (8003f54 <MX_BlueNRG_MS_Process+0x37c>)
 8003eb2:	492a      	ldr	r1, [pc, #168]	; (8003f5c <MX_BlueNRG_MS_Process+0x384>)
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f000 fb5f 	bl	8004578 <Acc_Update>
      Quat_Update(&q_axes);
 8003eba:	4827      	ldr	r0, [pc, #156]	; (8003f58 <MX_BlueNRG_MS_Process+0x380>)
 8003ebc:	f000 fbb8 	bl	8004630 <Quat_Update>
      counter ++;
 8003ec0:	4a23      	ldr	r2, [pc, #140]	; (8003f50 <MX_BlueNRG_MS_Process+0x378>)
 8003ec2:	6813      	ldr	r3, [r2, #0]
 8003ec4:	3301      	adds	r3, #1
      if (counter == 40) {
 8003ec6:	2b28      	cmp	r3, #40	; 0x28
      counter ++;
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4620      	mov	r0, r4
      if (counter == 40) {
 8003ecc:	f040 808e 	bne.w	8003fec <MX_BlueNRG_MS_Process+0x414>
        counter = 0;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	6013      	str	r3, [r2, #0]
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8003ed4:	6823      	ldr	r3, [r4, #0]
 8003ed6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003eda:	fb93 f2f1 	sdiv	r2, r3, r1
 8003ede:	fb01 3212 	mls	r2, r1, r2, r3
 8003ee2:	2a00      	cmp	r2, #0
 8003ee4:	f040 819c 	bne.w	8004220 <MX_BlueNRG_MS_Process+0x648>
 8003ee8:	425b      	negs	r3, r3
 8003eea:	6003      	str	r3, [r0, #0]
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8003eec:	6843      	ldr	r3, [r0, #4]
 8003eee:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003ef2:	fb93 f2f1 	sdiv	r2, r3, r1
 8003ef6:	fb01 3212 	mls	r2, r1, r2, r3
 8003efa:	2a00      	cmp	r2, #0
 8003efc:	f040 8192 	bne.w	8004224 <MX_BlueNRG_MS_Process+0x64c>
 8003f00:	425b      	negs	r3, r3
 8003f02:	6043      	str	r3, [r0, #4]
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8003f04:	6883      	ldr	r3, [r0, #8]
 8003f06:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f0a:	fb93 f2f1 	sdiv	r2, r3, r1
 8003f0e:	fb01 3212 	mls	r2, r1, r2, r3
 8003f12:	2a00      	cmp	r2, #0
 8003f14:	f040 8189 	bne.w	800422a <MX_BlueNRG_MS_Process+0x652>
 8003f18:	425b      	negs	r3, r3
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003f1a:	4a10      	ldr	r2, [pc, #64]	; (8003f5c <MX_BlueNRG_MS_Process+0x384>)
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 8003f1c:	6083      	str	r3, [r0, #8]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003f1e:	6813      	ldr	r3, [r2, #0]
 8003f20:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f24:	fb93 f1f0 	sdiv	r1, r3, r0
 8003f28:	fb00 3111 	mls	r1, r0, r1, r3
 8003f2c:	2900      	cmp	r1, #0
 8003f2e:	f040 817e 	bne.w	800422e <MX_BlueNRG_MS_Process+0x656>
 8003f32:	425b      	negs	r3, r3
 8003f34:	e014      	b.n	8003f60 <MX_BlueNRG_MS_Process+0x388>
 8003f36:	bf00      	nop
 8003f38:	20000015 	.word	0x20000015
 8003f3c:	200004ac 	.word	0x200004ac
 8003f40:	403b0000 	.word	0x403b0000
 8003f44:	408f4000 	.word	0x408f4000
 8003f48:	200004dc 	.word	0x200004dc
 8003f4c:	42c80000 	.word	0x42c80000
 8003f50:	200003a0 	.word	0x200003a0
 8003f54:	200004c0 	.word	0x200004c0
 8003f58:	200004d0 	.word	0x200004d0
 8003f5c:	200004b4 	.word	0x200004b4
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003f60:	6854      	ldr	r4, [r2, #4]
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 8003f62:	6013      	str	r3, [r2, #0]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003f64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003f68:	fb94 f1f0 	sdiv	r1, r4, r0
 8003f6c:	fb00 4111 	mls	r1, r0, r1, r4
 8003f70:	2900      	cmp	r1, #0
 8003f72:	f040 815e 	bne.w	8004232 <MX_BlueNRG_MS_Process+0x65a>
 8003f76:	4264      	negs	r4, r4
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8003f78:	6890      	ldr	r0, [r2, #8]
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8003f7a:	6054      	str	r4, [r2, #4]
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8003f7c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8003f80:	fb90 f5f1 	sdiv	r5, r0, r1
 8003f84:	fb01 0515 	mls	r5, r1, r5, r0
 8003f88:	2d00      	cmp	r5, #0
 8003f8a:	f040 8155 	bne.w	8004238 <MX_BlueNRG_MS_Process+0x660>
 8003f8e:	4240      	negs	r0, r0
 8003f90:	6090      	str	r0, [r2, #8]
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8003f92:	fb93 f2f1 	sdiv	r2, r3, r1
 8003f96:	fb01 3112 	mls	r1, r1, r2, r3
 8003f9a:	4aac      	ldr	r2, [pc, #688]	; (800424c <MX_BlueNRG_MS_Process+0x674>)
 8003f9c:	2900      	cmp	r1, #0
 8003f9e:	f040 814d 	bne.w	800423c <MX_BlueNRG_MS_Process+0x664>
 8003fa2:	6813      	ldr	r3, [r2, #0]
 8003fa4:	425b      	negs	r3, r3
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003fa6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 8003faa:	6013      	str	r3, [r2, #0]
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003fac:	fb94 f3f1 	sdiv	r3, r4, r1
 8003fb0:	fb01 4413 	mls	r4, r1, r3, r4
 8003fb4:	2c00      	cmp	r4, #0
 8003fb6:	f040 8143 	bne.w	8004240 <MX_BlueNRG_MS_Process+0x668>
 8003fba:	6853      	ldr	r3, [r2, #4]
 8003fbc:	425b      	negs	r3, r3
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8003fbe:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8003fc2:	6053      	str	r3, [r2, #4]
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8003fc4:	fb90 f3f1 	sdiv	r3, r0, r1
 8003fc8:	fb01 0013 	mls	r0, r1, r3, r0
 8003fcc:	2800      	cmp	r0, #0
 8003fce:	f040 813a 	bne.w	8004246 <MX_BlueNRG_MS_Process+0x66e>
 8003fd2:	6893      	ldr	r3, [r2, #8]
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	6093      	str	r3, [r2, #8]
  q_axes.AXIS_X = -q_axes.AXIS_X;
 8003fd8:	4b9d      	ldr	r3, [pc, #628]	; (8004250 <MX_BlueNRG_MS_Process+0x678>)
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	4252      	negs	r2, r2
 8003fde:	601a      	str	r2, [r3, #0]
  q_axes.AXIS_Y = -q_axes.AXIS_Y;
 8003fe0:	685a      	ldr	r2, [r3, #4]
 8003fe2:	4252      	negs	r2, r2
 8003fe4:	605a      	str	r2, [r3, #4]
  q_axes.AXIS_Z = -q_axes.AXIS_Z;
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	4252      	negs	r2, r2
 8003fea:	609a      	str	r2, [r3, #8]
      HAL_Delay(1000); /* wait 1 sec before sending new data */
 8003fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ff0:	f7fc fdb2 	bl	8000b58 <HAL_Delay>
}
 8003ff4:	b003      	add	sp, #12
 8003ff6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hci_user_evt_proc();
 8003ffa:	f7ff bcb1 	b.w	8003960 <hci_user_evt_proc>
    x_axes.AXIS_X += -(10  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8003ffe:	f001 fa41 	bl	8005484 <rand>
 8004002:	fba4 ab08 	umull	sl, fp, r4, r8
 8004006:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800400a:	fb00 f30b 	mul.w	r3, r0, fp
 800400e:	fb0a 3309 	mla	r3, sl, r9, r3
 8004012:	fba0 010a 	umull	r0, r1, r0, sl
 8004016:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800401a:	4419      	add	r1, r3
 800401c:	2300      	movs	r3, #0
 800401e:	f7fc fadb 	bl	80005d8 <__aeabi_uldivmod>
 8004022:	f06f 0809 	mvn.w	r8, #9
 8004026:	682b      	ldr	r3, [r5, #0]
 8004028:	ebb8 0000 	subs.w	r0, r8, r0
 800402c:	4403      	add	r3, r0
 800402e:	602b      	str	r3, [r5, #0]
    x_axes.AXIS_Y +=  (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 8004030:	f001 fa28 	bl	8005484 <rand>
 8004034:	fba4 2306 	umull	r2, r3, r4, r6
 8004038:	e9cd 2300 	strd	r2, r3, [sp]
 800403c:	9b01      	ldr	r3, [sp, #4]
 800403e:	9a00      	ldr	r2, [sp, #0]
 8004040:	17c7      	asrs	r7, r0, #31
 8004042:	4343      	muls	r3, r0
 8004044:	fb02 3307 	mla	r3, r2, r7, r3
 8004048:	fba0 0102 	umull	r0, r1, r0, r2
 800404c:	4419      	add	r1, r3
 800404e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004052:	2300      	movs	r3, #0
 8004054:	f7fc fac0 	bl	80005d8 <__aeabi_uldivmod>
 8004058:	686b      	ldr	r3, [r5, #4]
 800405a:	300a      	adds	r0, #10
 800405c:	4403      	add	r3, r0
 800405e:	606b      	str	r3, [r5, #4]
    x_axes.AXIS_Z += -(10  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8004060:	f001 fa10 	bl	8005484 <rand>
 8004064:	2607      	movs	r6, #7
 8004066:	fba4 6706 	umull	r6, r7, r4, r6
 800406a:	17c2      	asrs	r2, r0, #31
 800406c:	fb00 f307 	mul.w	r3, r0, r7
 8004070:	fb06 3302 	mla	r3, r6, r2, r3
 8004074:	fba0 0106 	umull	r0, r1, r0, r6
 8004078:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800407c:	4419      	add	r1, r3
 800407e:	2300      	movs	r3, #0
 8004080:	f7fc faaa 	bl	80005d8 <__aeabi_uldivmod>
 8004084:	68ab      	ldr	r3, [r5, #8]
 8004086:	ebb8 0000 	subs.w	r0, r8, r0
 800408a:	4418      	add	r0, r3
 800408c:	60a8      	str	r0, [r5, #8]
    g_axes.AXIS_X += -(100 + ((uint64_t)rand()*2*cnt)/RAND_MAX);
 800408e:	f001 f9f9 	bl	8005484 <rand>
 8004092:	1922      	adds	r2, r4, r4
 8004094:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8004098:	f04f 0300 	mov.w	r3, #0
 800409c:	fb02 f109 	mul.w	r1, r2, r9
 80040a0:	415b      	adcs	r3, r3
 80040a2:	fb00 1303 	mla	r3, r0, r3, r1
 80040a6:	fba2 0100 	umull	r0, r1, r2, r0
 80040aa:	4419      	add	r1, r3
 80040ac:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040b0:	2300      	movs	r3, #0
 80040b2:	4d68      	ldr	r5, [pc, #416]	; (8004254 <MX_BlueNRG_MS_Process+0x67c>)
 80040b4:	f7fc fa90 	bl	80005d8 <__aeabi_uldivmod>
 80040b8:	f06f 0863 	mvn.w	r8, #99	; 0x63
 80040bc:	682b      	ldr	r3, [r5, #0]
 80040be:	ebb8 0000 	subs.w	r0, r8, r0
 80040c2:	4403      	add	r3, r0
 80040c4:	602b      	str	r3, [r5, #0]
    g_axes.AXIS_Y +=  (100 + ((uint64_t)rand()*4*cnt)/RAND_MAX);
 80040c6:	f001 f9dd 	bl	8005484 <rand>
 80040ca:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 80040ce:	17c2      	asrs	r2, r0, #31
 80040d0:	fb0e f202 	mul.w	r2, lr, r2
 80040d4:	0fa3      	lsrs	r3, r4, #30
 80040d6:	fb00 2303 	mla	r3, r0, r3, r2
 80040da:	fbae 0100 	umull	r0, r1, lr, r0
 80040de:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80040e2:	4419      	add	r1, r3
 80040e4:	2300      	movs	r3, #0
 80040e6:	f7fc fa77 	bl	80005d8 <__aeabi_uldivmod>
 80040ea:	686b      	ldr	r3, [r5, #4]
 80040ec:	3064      	adds	r0, #100	; 0x64
 80040ee:	4403      	add	r3, r0
 80040f0:	606b      	str	r3, [r5, #4]
    g_axes.AXIS_Z += -(100 + ((uint64_t)rand()*6*cnt)/RAND_MAX);
 80040f2:	f001 f9c7 	bl	8005484 <rand>
 80040f6:	4686      	mov	lr, r0
 80040f8:	2006      	movs	r0, #6
 80040fa:	fba4 2300 	umull	r2, r3, r4, r0
 80040fe:	4670      	mov	r0, lr
 8004100:	17c1      	asrs	r1, r0, #31
 8004102:	4351      	muls	r1, r2
 8004104:	fb0e 1303 	mla	r3, lr, r3, r1
 8004108:	fba2 010e 	umull	r0, r1, r2, lr
 800410c:	4419      	add	r1, r3
 800410e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004112:	2300      	movs	r3, #0
 8004114:	f7fc fa60 	bl	80005d8 <__aeabi_uldivmod>
 8004118:	68ab      	ldr	r3, [r5, #8]
 800411a:	ebb8 0000 	subs.w	r0, r8, r0
 800411e:	4418      	add	r0, r3
 8004120:	60a8      	str	r0, [r5, #8]
    m_axes.AXIS_X += -(3  + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 8004122:	f001 f9af 	bl	8005484 <rand>
 8004126:	ea4f 79e0 	mov.w	r9, r0, asr #31
 800412a:	fb00 f307 	mul.w	r3, r0, r7
 800412e:	fb06 3309 	mla	r3, r6, r9, r3
 8004132:	fba0 0106 	umull	r0, r1, r0, r6
 8004136:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800413a:	4419      	add	r1, r3
 800413c:	2300      	movs	r3, #0
 800413e:	f7fc fa4b 	bl	80005d8 <__aeabi_uldivmod>
 8004142:	4d42      	ldr	r5, [pc, #264]	; (800424c <MX_BlueNRG_MS_Process+0x674>)
 8004144:	f06f 0802 	mvn.w	r8, #2
 8004148:	682b      	ldr	r3, [r5, #0]
 800414a:	ebb8 0000 	subs.w	r0, r8, r0
 800414e:	4403      	add	r3, r0
 8004150:	602b      	str	r3, [r5, #0]
    m_axes.AXIS_Y +=  (3  + ((uint64_t)rand()*9*cnt)/RAND_MAX);
 8004152:	f001 f997 	bl	8005484 <rand>
 8004156:	4686      	mov	lr, r0
 8004158:	2009      	movs	r0, #9
 800415a:	fba4 2300 	umull	r2, r3, r4, r0
 800415e:	4670      	mov	r0, lr
 8004160:	17c1      	asrs	r1, r0, #31
 8004162:	4351      	muls	r1, r2
 8004164:	fb0e 1303 	mla	r3, lr, r3, r1
 8004168:	fba2 010e 	umull	r0, r1, r2, lr
 800416c:	4419      	add	r1, r3
 800416e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004172:	2300      	movs	r3, #0
 8004174:	f7fc fa30 	bl	80005d8 <__aeabi_uldivmod>
 8004178:	686b      	ldr	r3, [r5, #4]
 800417a:	3003      	adds	r0, #3
 800417c:	4403      	add	r3, r0
 800417e:	606b      	str	r3, [r5, #4]
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 8004180:	f001 f980 	bl	8005484 <rand>
 8004184:	17c4      	asrs	r4, r0, #31
 8004186:	fb00 f30b 	mul.w	r3, r0, fp
 800418a:	fb0a 3304 	mla	r3, sl, r4, r3
 800418e:	fba0 010a 	umull	r0, r1, r0, sl
 8004192:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004196:	4419      	add	r1, r3
 8004198:	2300      	movs	r3, #0
 800419a:	f7fc fa1d 	bl	80005d8 <__aeabi_uldivmod>
 800419e:	68ab      	ldr	r3, [r5, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80041a0:	4c2b      	ldr	r4, [pc, #172]	; (8004250 <MX_BlueNRG_MS_Process+0x678>)
    m_axes.AXIS_Z += -(3  + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80041a2:	ebb8 0000 	subs.w	r0, r8, r0
 80041a6:	4418      	add	r0, r3
 80041a8:	60a8      	str	r0, [r5, #8]
    q_axes.AXIS_X += (200 + ((uint64_t)rand()*7*cnt)/RAND_MAX);
 80041aa:	f001 f96b 	bl	8005484 <rand>
 80041ae:	fb00 f307 	mul.w	r3, r0, r7
 80041b2:	ea4f 79e0 	mov.w	r9, r0, asr #31
 80041b6:	fb06 3309 	mla	r3, r6, r9, r3
 80041ba:	fba0 0106 	umull	r0, r1, r0, r6
 80041be:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041c2:	4419      	add	r1, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	f7fc fa07 	bl	80005d8 <__aeabi_uldivmod>
 80041ca:	6823      	ldr	r3, [r4, #0]
 80041cc:	30c8      	adds	r0, #200	; 0xc8
 80041ce:	4403      	add	r3, r0
 80041d0:	6023      	str	r3, [r4, #0]
    q_axes.AXIS_Y -= (150 + ((uint64_t)rand()*3*cnt)/RAND_MAX);
 80041d2:	f001 f957 	bl	8005484 <rand>
 80041d6:	17c7      	asrs	r7, r0, #31
 80041d8:	fb00 f30b 	mul.w	r3, r0, fp
 80041dc:	fb0a 3307 	mla	r3, sl, r7, r3
 80041e0:	fba0 010a 	umull	r0, r1, r0, sl
 80041e4:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80041e8:	4419      	add	r1, r3
 80041ea:	2300      	movs	r3, #0
 80041ec:	f7fc f9f4 	bl	80005d8 <__aeabi_uldivmod>
 80041f0:	6863      	ldr	r3, [r4, #4]
 80041f2:	3096      	adds	r0, #150	; 0x96
 80041f4:	1a1b      	subs	r3, r3, r0
 80041f6:	6063      	str	r3, [r4, #4]
    q_axes.AXIS_Z += (10  + ((uint64_t)rand()*5*cnt)/RAND_MAX);
 80041f8:	f001 f944 	bl	8005484 <rand>
 80041fc:	9b01      	ldr	r3, [sp, #4]
 80041fe:	9a00      	ldr	r2, [sp, #0]
 8004200:	17c7      	asrs	r7, r0, #31
 8004202:	4343      	muls	r3, r0
 8004204:	fb02 3307 	mla	r3, r2, r7, r3
 8004208:	fba0 0102 	umull	r0, r1, r0, r2
 800420c:	4419      	add	r1, r3
 800420e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8004212:	2300      	movs	r3, #0
 8004214:	f7fc f9e0 	bl	80005d8 <__aeabi_uldivmod>
 8004218:	68a3      	ldr	r3, [r4, #8]
 800421a:	300a      	adds	r0, #10
 800421c:	4403      	add	r3, r0
 800421e:	e645      	b.n	8003eac <MX_BlueNRG_MS_Process+0x2d4>
  x_axes.AXIS_X = (x_axes.AXIS_X)%2000 == 0 ? -x_axes.AXIS_X : 10;
 8004220:	230a      	movs	r3, #10
 8004222:	e662      	b.n	8003eea <MX_BlueNRG_MS_Process+0x312>
  x_axes.AXIS_Y = (x_axes.AXIS_Y)%2000 == 0 ? -x_axes.AXIS_Y : -10;
 8004224:	f06f 0309 	mvn.w	r3, #9
 8004228:	e66b      	b.n	8003f02 <MX_BlueNRG_MS_Process+0x32a>
  x_axes.AXIS_Z = (x_axes.AXIS_Z)%2000 == 0 ? -x_axes.AXIS_Z : 10;
 800422a:	230a      	movs	r3, #10
 800422c:	e675      	b.n	8003f1a <MX_BlueNRG_MS_Process+0x342>
  g_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -g_axes.AXIS_X : 100;
 800422e:	2364      	movs	r3, #100	; 0x64
 8004230:	e696      	b.n	8003f60 <MX_BlueNRG_MS_Process+0x388>
  g_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -g_axes.AXIS_Y : -100;
 8004232:	f06f 0463 	mvn.w	r4, #99	; 0x63
 8004236:	e69f      	b.n	8003f78 <MX_BlueNRG_MS_Process+0x3a0>
  g_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -g_axes.AXIS_Z : 100;
 8004238:	2064      	movs	r0, #100	; 0x64
 800423a:	e6a9      	b.n	8003f90 <MX_BlueNRG_MS_Process+0x3b8>
  m_axes.AXIS_X = (g_axes.AXIS_X)%2000 == 0 ? -m_axes.AXIS_X : 3;
 800423c:	2303      	movs	r3, #3
 800423e:	e6b2      	b.n	8003fa6 <MX_BlueNRG_MS_Process+0x3ce>
  m_axes.AXIS_Y = (g_axes.AXIS_Y)%2000 == 0 ? -m_axes.AXIS_Y : -3;
 8004240:	f06f 0302 	mvn.w	r3, #2
 8004244:	e6bb      	b.n	8003fbe <MX_BlueNRG_MS_Process+0x3e6>
  m_axes.AXIS_Z = (g_axes.AXIS_Z)%2000 == 0 ? -m_axes.AXIS_Z : 3;
 8004246:	2303      	movs	r3, #3
 8004248:	e6c5      	b.n	8003fd6 <MX_BlueNRG_MS_Process+0x3fe>
 800424a:	bf00      	nop
 800424c:	200004c0 	.word	0x200004c0
 8004250:	200004d0 	.word	0x200004d0
 8004254:	200004b4 	.word	0x200004b4

08004258 <BSP_PB_Callback>:
  * @retval None.
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
  /* Set the User Button flag */
  user_button_pressed = 1;
 8004258:	4b01      	ldr	r3, [pc, #4]	; (8004260 <BSP_PB_Callback+0x8>)
 800425a:	2201      	movs	r2, #1
 800425c:	701a      	strb	r2, [r3, #0]
 800425e:	4770      	bx	lr
 8004260:	200003a4 	.word	0x200003a4

08004264 <BSP_SPI3_SendRecv>:
  * @param  pData: Pointer to data buffer to send/receive
  * @param  Length: Length of data in byte
  * @retval BSP status
  */
int32_t BSP_SPI3_SendRecv(uint8_t *pTxData, uint8_t *pRxData, uint16_t Length)
{
 8004264:	b507      	push	{r0, r1, r2, lr}
  int32_t ret = BSP_ERROR_NONE;
  
  if(HAL_SPI_TransmitReceive(&hspi3, pTxData, pRxData, Length, BUS_SPI3_POLL_TIMEOUT) != HAL_OK)
 8004266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800426a:	9300      	str	r3, [sp, #0]
 800426c:	4613      	mov	r3, r2
 800426e:	460a      	mov	r2, r1
 8004270:	4601      	mov	r1, r0
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <BSP_SPI3_SendRecv+0x24>)
 8004274:	f7fe f8d8 	bl	8002428 <HAL_SPI_TransmitReceive>
 8004278:	2800      	cmp	r0, #0
  {
      ret = BSP_ERROR_UNKNOWN_FAILURE;
  }
  return ret;
}
 800427a:	bf14      	ite	ne
 800427c:	f06f 0005 	mvnne.w	r0, #5
 8004280:	2000      	moveq	r0, #0
 8004282:	b003      	add	sp, #12
 8004284:	f85d fb04 	ldr.w	pc, [sp], #4
 8004288:	20000594 	.word	0x20000594

0800428c <BSP_GetTick>:
/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
  return HAL_GetTick();
 800428c:	f7fc bc5e 	b.w	8000b4c <HAL_GetTick>

08004290 <MX_SPI3_Init>:

__weak HAL_StatusTypeDef MX_SPI3_Init(SPI_HandleTypeDef* hspi)
{
  HAL_StatusTypeDef ret = HAL_OK;
  hspi->Instance = SPI3;
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004290:	4a0f      	ldr	r2, [pc, #60]	; (80042d0 <MX_SPI3_Init+0x40>)
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 8004292:	f44f 61e0 	mov.w	r1, #1792	; 0x700
{
 8004296:	b508      	push	{r3, lr}
  hspi->Init.Mode = SPI_MODE_MASTER;
 8004298:	f44f 7c82 	mov.w	ip, #260	; 0x104
  hspi->Init.DataSize = SPI_DATASIZE_8BIT;
 800429c:	60c1      	str	r1, [r0, #12]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi->Init.NSS = SPI_NSS_SOFT;
 800429e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi->Init.Mode = SPI_MODE_MASTER;
 80042a2:	e880 1004 	stmia.w	r0, {r2, ip}
  hspi->Init.NSS = SPI_NSS_SOFT;
 80042a6:	6181      	str	r1, [r0, #24]
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80042a8:	2200      	movs	r2, #0
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80042aa:	2118      	movs	r1, #24
  hspi->Init.Direction = SPI_DIRECTION_2LINES;
 80042ac:	6082      	str	r2, [r0, #8]
  hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80042ae:	6102      	str	r2, [r0, #16]
  hspi->Init.CLKPhase = SPI_PHASE_1EDGE;
 80042b0:	6142      	str	r2, [r0, #20]
  hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80042b2:	61c1      	str	r1, [r0, #28]
  hspi->Init.FirstBit = SPI_FIRSTBIT_MSB;
 80042b4:	6202      	str	r2, [r0, #32]
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi->Init.CRCPolynomial = 7;
 80042b6:	2107      	movs	r1, #7
  hspi->Init.TIMode = SPI_TIMODE_DISABLE;
 80042b8:	6242      	str	r2, [r0, #36]	; 0x24
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80042ba:	6282      	str	r2, [r0, #40]	; 0x28
  hspi->Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80042bc:	6302      	str	r2, [r0, #48]	; 0x30
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042be:	2208      	movs	r2, #8
  hspi->Init.CRCPolynomial = 7;
 80042c0:	62c1      	str	r1, [r0, #44]	; 0x2c
  hspi->Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80042c2:	6342      	str	r2, [r0, #52]	; 0x34
  if (HAL_SPI_Init(hspi) != HAL_OK)
 80042c4:	f7fe f85f 	bl	8002386 <HAL_SPI_Init>
  {
    ret = HAL_ERROR;
  }

  return ret;
}
 80042c8:	3000      	adds	r0, #0
 80042ca:	bf18      	it	ne
 80042cc:	2001      	movne	r0, #1
 80042ce:	bd08      	pop	{r3, pc}
 80042d0:	40003c00 	.word	0x40003c00

080042d4 <BSP_SPI3_Init>:
{
 80042d4:	b530      	push	{r4, r5, lr}
  if(SPI3InitCounter++ == 0)
 80042d6:	4a21      	ldr	r2, [pc, #132]	; (800435c <BSP_SPI3_Init+0x88>)
  hspi3.Instance  = SPI3;
 80042d8:	4c21      	ldr	r4, [pc, #132]	; (8004360 <BSP_SPI3_Init+0x8c>)
 80042da:	4b22      	ldr	r3, [pc, #136]	; (8004364 <BSP_SPI3_Init+0x90>)
 80042dc:	6023      	str	r3, [r4, #0]
  if(SPI3InitCounter++ == 0)
 80042de:	6813      	ldr	r3, [r2, #0]
 80042e0:	1c59      	adds	r1, r3, #1
{
 80042e2:	b089      	sub	sp, #36	; 0x24
  if(SPI3InitCounter++ == 0)
 80042e4:	6011      	str	r1, [r2, #0]
 80042e6:	b113      	cbz	r3, 80042ee <BSP_SPI3_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80042e8:	2000      	movs	r0, #0
}
 80042ea:	b009      	add	sp, #36	; 0x24
 80042ec:	bd30      	pop	{r4, r5, pc}
	if (HAL_SPI_GetState(&hspi3) == HAL_SPI_STATE_RESET) 
 80042ee:	4620      	mov	r0, r4
 80042f0:	f7fe fa47 	bl	8002782 <HAL_SPI_GetState>
 80042f4:	4605      	mov	r5, r0
 80042f6:	2800      	cmp	r0, #0
 80042f8:	d1f6      	bne.n	80042e8 <BSP_SPI3_Init+0x14>
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80042fa:	4b1b      	ldr	r3, [pc, #108]	; (8004368 <BSP_SPI3_Init+0x94>)
 80042fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80042fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004302:	659a      	str	r2, [r3, #88]	; 0x58
 8004304:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004306:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800430a:	9201      	str	r2, [sp, #4]
 800430c:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800430e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004310:	f042 0204 	orr.w	r2, r2, #4
 8004314:	64da      	str	r2, [r3, #76]	; 0x4c
 8004316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004318:	9005      	str	r0, [sp, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	9302      	str	r3, [sp, #8]
 8004320:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004322:	4812      	ldr	r0, [pc, #72]	; (800436c <BSP_SPI3_Init+0x98>)
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8004324:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004328:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800432e:	2303      	movs	r3, #3
 8004330:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004332:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004334:	2306      	movs	r3, #6
 8004336:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004338:	f7fc fd76 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 800433c:	462a      	mov	r2, r5
 800433e:	4629      	mov	r1, r5
 8004340:	2033      	movs	r0, #51	; 0x33
 8004342:	f7fc fc2f 	bl	8000ba4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8004346:	2033      	movs	r0, #51	; 0x33
 8004348:	f7fc fc60 	bl	8000c0c <HAL_NVIC_EnableIRQ>
			if (MX_SPI3_Init(&hspi3) != HAL_OK)
 800434c:	4620      	mov	r0, r4
 800434e:	f7ff ff9f 	bl	8004290 <MX_SPI3_Init>
 8004352:	2800      	cmp	r0, #0
 8004354:	d0c8      	beq.n	80042e8 <BSP_SPI3_Init+0x14>
				ret = BSP_ERROR_BUS_FAILURE;
 8004356:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800435a:	e7c6      	b.n	80042ea <BSP_SPI3_Init+0x16>
 800435c:	200003a8 	.word	0x200003a8
 8004360:	20000594 	.word	0x20000594
 8004364:	40003c00 	.word	0x40003c00
 8004368:	40021000 	.word	0x40021000
 800436c:	48000800 	.word	0x48000800

08004370 <Add_HWServW2ST_Service>:
 * @brief  Add the 'HW' service (and the Environmental and AccGyr characteristics).
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_HWServW2ST_Service(void)
{
 8004370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tBleStatus ret;
  uint8_t uuid[16];
  
  /* Add_HWServW2ST_Service */
  COPY_HW_SENS_W2ST_SERVICE_UUID(uuid);  
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8004374:	494a      	ldr	r1, [pc, #296]	; (80044a0 <Add_HWServW2ST_Service+0x130>)
 8004376:	f06f 035a 	mvn.w	r3, #90	; 0x5a
 800437a:	22b4      	movs	r2, #180	; 0xb4
 800437c:	70cb      	strb	r3, [r1, #3]
 800437e:	718a      	strb	r2, [r1, #6]
 8004380:	2300      	movs	r3, #0
{
 8004382:	b087      	sub	sp, #28
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 8004384:	229a      	movs	r2, #154	; 0x9a
 8004386:	714b      	strb	r3, [r1, #5]
 8004388:	71ca      	strb	r2, [r1, #7]
 800438a:	72cb      	strb	r3, [r1, #11]
 800438c:	730b      	strb	r3, [r1, #12]
 800438e:	734b      	strb	r3, [r1, #13]
 8004390:	738b      	strb	r3, [r1, #14]
 8004392:	73cb      	strb	r3, [r1, #15]
 8004394:	2502      	movs	r5, #2
 8004396:	f06f 021e 	mvn.w	r2, #30
 800439a:	2601      	movs	r6, #1
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 800439c:	4b41      	ldr	r3, [pc, #260]	; (80044a4 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 800439e:	720a      	strb	r2, [r1, #8]
 80043a0:	f04f 0a1b 	mov.w	sl, #27
 80043a4:	f04f 09c5 	mov.w	r9, #197	; 0xc5
 80043a8:	f04f 08d5 	mov.w	r8, #213	; 0xd5
 80043ac:	f04f 0b11 	mov.w	fp, #17
 80043b0:	f881 a000 	strb.w	sl, [r1]
 80043b4:	f881 9001 	strb.w	r9, [r1, #1]
 80043b8:	f881 8002 	strb.w	r8, [r1, #2]
 80043bc:	710d      	strb	r5, [r1, #4]
 80043be:	f881 b009 	strb.w	fp, [r1, #9]
 80043c2:	728e      	strb	r6, [r1, #10]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 80043c4:	4632      	mov	r2, r6
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	4628      	mov	r0, r5
 80043ca:	2310      	movs	r3, #16
 80043cc:	f7fe ffb6 	bl	800333c <aci_gatt_add_serv>
                          1+3*5, &HWServW2STHandle); 
  if (ret != BLE_STATUS_SUCCESS) 
 80043d0:	4603      	mov	r3, r0
 80043d2:	b118      	cbz	r0, 80043dc <Add_HWServW2ST_Service+0x6c>
    return BLE_STATUS_ERROR;    
 80043d4:	2047      	movs	r0, #71	; 0x47
                           16, 0, &AccGyroMagCharHandle);
  if (ret != BLE_STATUS_SUCCESS) 
    return BLE_STATUS_ERROR;
  
  return BLE_STATUS_SUCCESS;
}
 80043d6:	b007      	add	sp, #28
 80043d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80043dc:	4c32      	ldr	r4, [pc, #200]	; (80044a8 <Add_HWServW2ST_Service+0x138>)
 80043de:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 80043e2:	70e2      	strb	r2, [r4, #3]
 80043e4:	f04f 0236 	mov.w	r2, #54	; 0x36
 80043e8:	71a2      	strb	r2, [r4, #6]
 80043ea:	f06f 0253 	mvn.w	r2, #83	; 0x53
 80043ee:	71e2      	strb	r2, [r4, #7]
 80043f0:	f06f 021e 	mvn.w	r2, #30
 80043f4:	7222      	strb	r2, [r4, #8]
 80043f6:	f04f 0214 	mov.w	r2, #20
 80043fa:	73a2      	strb	r2, [r4, #14]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 80043fc:	4a29      	ldr	r2, [pc, #164]	; (80044a4 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 80043fe:	7160      	strb	r0, [r4, #5]
 8004400:	72e0      	strb	r0, [r4, #11]
 8004402:	7320      	strb	r0, [r4, #12]
 8004404:	7360      	strb	r0, [r4, #13]
 8004406:	73e0      	strb	r0, [r4, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004408:	8810      	ldrh	r0, [r2, #0]
 800440a:	4a28      	ldr	r2, [pc, #160]	; (80044ac <Add_HWServW2ST_Service+0x13c>)
 800440c:	9205      	str	r2, [sp, #20]
 800440e:	9304      	str	r3, [sp, #16]
 8004410:	2204      	movs	r2, #4
 8004412:	9301      	str	r3, [sp, #4]
 8004414:	2710      	movs	r7, #16
 8004416:	2312      	movs	r3, #18
 8004418:	9202      	str	r2, [sp, #8]
 800441a:	9300      	str	r3, [sp, #0]
 800441c:	9703      	str	r7, [sp, #12]
 800441e:	2308      	movs	r3, #8
 8004420:	4622      	mov	r2, r4
 8004422:	4629      	mov	r1, r5
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004424:	f884 a000 	strb.w	sl, [r4]
 8004428:	f884 9001 	strb.w	r9, [r4, #1]
 800442c:	f884 8002 	strb.w	r8, [r4, #2]
 8004430:	7125      	strb	r5, [r4, #4]
 8004432:	f884 b009 	strb.w	fp, [r4, #9]
 8004436:	72a6      	strb	r6, [r4, #10]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004438:	f7fe ffc3 	bl	80033c2 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 800443c:	4603      	mov	r3, r0
 800443e:	2800      	cmp	r0, #0
 8004440:	d1c8      	bne.n	80043d4 <Add_HWServW2ST_Service+0x64>
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004442:	f06f 025a 	mvn.w	r2, #90	; 0x5a
 8004446:	70e2      	strb	r2, [r4, #3]
 8004448:	f04f 0236 	mov.w	r2, #54	; 0x36
 800444c:	71a2      	strb	r2, [r4, #6]
 800444e:	f06f 0253 	mvn.w	r2, #83	; 0x53
 8004452:	71e2      	strb	r2, [r4, #7]
 8004454:	f06f 021e 	mvn.w	r2, #30
 8004458:	7222      	strb	r2, [r4, #8]
 800445a:	22e0      	movs	r2, #224	; 0xe0
 800445c:	73a2      	strb	r2, [r4, #14]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800445e:	4a11      	ldr	r2, [pc, #68]	; (80044a4 <Add_HWServW2ST_Service+0x134>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004460:	7160      	strb	r0, [r4, #5]
 8004462:	72e0      	strb	r0, [r4, #11]
 8004464:	7320      	strb	r0, [r4, #12]
 8004466:	7360      	strb	r0, [r4, #13]
 8004468:	73e0      	strb	r0, [r4, #15]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 800446a:	8810      	ldrh	r0, [r2, #0]
 800446c:	4a10      	ldr	r2, [pc, #64]	; (80044b0 <Add_HWServW2ST_Service+0x140>)
 800446e:	9205      	str	r2, [sp, #20]
 8004470:	2204      	movs	r2, #4
 8004472:	9304      	str	r3, [sp, #16]
 8004474:	9202      	str	r2, [sp, #8]
 8004476:	9301      	str	r3, [sp, #4]
 8004478:	9703      	str	r7, [sp, #12]
 800447a:	9700      	str	r7, [sp, #0]
 800447c:	2314      	movs	r3, #20
 800447e:	4622      	mov	r2, r4
 8004480:	4629      	mov	r1, r5
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);  
 8004482:	f884 a000 	strb.w	sl, [r4]
 8004486:	f884 9001 	strb.w	r9, [r4, #1]
 800448a:	f884 8002 	strb.w	r8, [r4, #2]
 800448e:	7125      	strb	r5, [r4, #4]
 8004490:	f884 b009 	strb.w	fp, [r4, #9]
 8004494:	72a6      	strb	r6, [r4, #10]
  ret =  aci_gatt_add_char(HWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004496:	f7fe ff94 	bl	80033c2 <aci_gatt_add_char>
  if (ret != BLE_STATUS_SUCCESS) 
 800449a:	2800      	cmp	r0, #0
 800449c:	d19a      	bne.n	80043d4 <Add_HWServW2ST_Service+0x64>
 800449e:	e79a      	b.n	80043d6 <Add_HWServW2ST_Service+0x66>
 80044a0:	20000612 	.word	0x20000612
 80044a4:	2000060e 	.word	0x2000060e
 80044a8:	200005fc 	.word	0x200005fc
 80044ac:	200005f8 	.word	0x200005f8
 80044b0:	20000610 	.word	0x20000610

080044b4 <Add_SWServW2ST_Service>:
 * @brief  Add the SW Feature service using a vendor specific profile
 * @param  None
 * @retval tBleStatus Status
 */
tBleStatus Add_SWServW2ST_Service(void)
{
 80044b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  tBleStatus ret;
  int32_t NumberOfRecords=1;
  uint8_t uuid[16];

  COPY_SW_SENS_W2ST_SERVICE_UUID(uuid);
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80044b8:	492b      	ldr	r1, [pc, #172]	; (8004568 <Add_SWServW2ST_Service+0xb4>)
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 80044ba:	4d2c      	ldr	r5, [pc, #176]	; (800456c <Add_SWServW2ST_Service+0xb8>)
{
 80044bc:	b087      	sub	sp, #28
  BLUENRG_memcpy(&service_uuid.Service_UUID_128, uuid, 16);
 80044be:	22b4      	movs	r2, #180	; 0xb4
 80044c0:	2300      	movs	r3, #0
 80044c2:	2402      	movs	r4, #2
 80044c4:	718a      	strb	r2, [r1, #6]
 80044c6:	f04f 0b1b 	mov.w	fp, #27
 80044ca:	229a      	movs	r2, #154	; 0x9a
 80044cc:	f04f 0ac5 	mov.w	sl, #197	; 0xc5
 80044d0:	f04f 09d5 	mov.w	r9, #213	; 0xd5
 80044d4:	f04f 08a5 	mov.w	r8, #165	; 0xa5
 80044d8:	27e1      	movs	r7, #225	; 0xe1
 80044da:	2611      	movs	r6, #17
 80044dc:	714b      	strb	r3, [r1, #5]
 80044de:	71ca      	strb	r2, [r1, #7]
 80044e0:	72cb      	strb	r3, [r1, #11]
 80044e2:	730b      	strb	r3, [r1, #12]
 80044e4:	734b      	strb	r3, [r1, #13]
 80044e6:	738b      	strb	r3, [r1, #14]
 80044e8:	73cb      	strb	r3, [r1, #15]
 80044ea:	f881 b000 	strb.w	fp, [r1]
 80044ee:	f881 a001 	strb.w	sl, [r1, #1]
 80044f2:	f881 9002 	strb.w	r9, [r1, #2]
 80044f6:	f881 8003 	strb.w	r8, [r1, #3]
 80044fa:	710c      	strb	r4, [r1, #4]
 80044fc:	720f      	strb	r7, [r1, #8]
 80044fe:	724e      	strb	r6, [r1, #9]
 8004500:	728c      	strb	r4, [r1, #10]
  ret = aci_gatt_add_serv(UUID_TYPE_128, service_uuid.Service_UUID_128, PRIMARY_SERVICE, 
 8004502:	2304      	movs	r3, #4
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	2201      	movs	r2, #1
 8004508:	4620      	mov	r0, r4
 800450a:	f7fe ff17 	bl	800333c <aci_gatt_add_serv>
                          1+3*NumberOfRecords, &SWServW2STHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800450e:	4603      	mov	r3, r0
 8004510:	bb28      	cbnz	r0, 800455e <Add_SWServW2ST_Service+0xaa>
    goto fail;
  }

  COPY_QUATERNIONS_W2ST_CHAR_UUID(uuid);
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004512:	4a17      	ldr	r2, [pc, #92]	; (8004570 <Add_SWServW2ST_Service+0xbc>)
 8004514:	2136      	movs	r1, #54	; 0x36
 8004516:	7191      	strb	r1, [r2, #6]
 8004518:	21ac      	movs	r1, #172	; 0xac
 800451a:	71d1      	strb	r1, [r2, #7]
 800451c:	2101      	movs	r1, #1
 800451e:	7291      	strb	r1, [r2, #10]
 8004520:	7351      	strb	r1, [r2, #13]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004522:	4914      	ldr	r1, [pc, #80]	; (8004574 <Add_SWServW2ST_Service+0xc0>)
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004524:	7150      	strb	r0, [r2, #5]
 8004526:	72d0      	strb	r0, [r2, #11]
 8004528:	7310      	strb	r0, [r2, #12]
 800452a:	7390      	strb	r0, [r2, #14]
 800452c:	73d0      	strb	r0, [r2, #15]
 800452e:	f882 b000 	strb.w	fp, [r2]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004532:	8828      	ldrh	r0, [r5, #0]
  BLUENRG_memcpy(&char_uuid.Char_UUID_128, uuid, 16);
 8004534:	f882 a001 	strb.w	sl, [r2, #1]
 8004538:	f882 9002 	strb.w	r9, [r2, #2]
 800453c:	f882 8003 	strb.w	r8, [r2, #3]
 8004540:	7114      	strb	r4, [r2, #4]
 8004542:	7217      	strb	r7, [r2, #8]
 8004544:	7256      	strb	r6, [r2, #9]
  ret =  aci_gatt_add_char(SWServW2STHandle, UUID_TYPE_128, char_uuid.Char_UUID_128, 
 8004546:	2504      	movs	r5, #4
 8004548:	9105      	str	r1, [sp, #20]
 800454a:	2110      	movs	r1, #16
 800454c:	e88d 002a 	stmia.w	sp, {r1, r3, r5}
 8004550:	9304      	str	r3, [sp, #16]
 8004552:	9103      	str	r1, [sp, #12]
 8004554:	2308      	movs	r3, #8
 8004556:	4621      	mov	r1, r4
 8004558:	f7fe ff33 	bl	80033c2 <aci_gatt_add_char>
                           CHAR_PROP_NOTIFY,
                           ATTR_PERMISSION_NONE,
                           GATT_NOTIFY_READ_REQ_AND_WAIT_FOR_APPL_RESP,
                           16, 0, &QuaternionsCharHandle);

  if (ret != BLE_STATUS_SUCCESS) {
 800455c:	b100      	cbz	r0, 8004560 <Add_SWServW2ST_Service+0xac>
  }

  return BLE_STATUS_SUCCESS;

fail:  
  return BLE_STATUS_ERROR;
 800455e:	2047      	movs	r0, #71	; 0x47
}
 8004560:	b007      	add	sp, #28
 8004562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004566:	bf00      	nop
 8004568:	20000612 	.word	0x20000612
 800456c:	2000060c 	.word	0x2000060c
 8004570:	200005fc 	.word	0x200005fc
 8004574:	200005fa 	.word	0x200005fa

08004578 <Acc_Update>:
 * @brief  Update acceleration characteristic value
 * @param  AxesRaw_t structure containing acceleration value in mg.
 * @retval tBleStatus Status
 */
tBleStatus Acc_Update(AxesRaw_t *x_axes, AxesRaw_t *g_axes, AxesRaw_t *m_axes)
{  
 8004578:	b570      	push	{r4, r5, r6, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	460d      	mov	r5, r1
 800457e:	4614      	mov	r4, r2
 8004580:	4606      	mov	r6, r0
  uint8_t buff[2+2*3*3];
  tBleStatus ret;
  
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8004582:	f7fc fae3 	bl	8000b4c <HAL_GetTick>
 8004586:	08c0      	lsrs	r0, r0, #3
 8004588:	f88d 000c 	strb.w	r0, [sp, #12]
 800458c:	f7fc fade 	bl	8000b4c <HAL_GetTick>
  
  HOST_TO_LE_16(buff+2,-x_axes->AXIS_Y);
 8004590:	6873      	ldr	r3, [r6, #4]
 8004592:	425b      	negs	r3, r3
 8004594:	f88d 300e 	strb.w	r3, [sp, #14]
 8004598:	121b      	asrs	r3, r3, #8
 800459a:	f88d 300f 	strb.w	r3, [sp, #15]
  HOST_TO_LE_16(buff+4, x_axes->AXIS_X);
 800459e:	6833      	ldr	r3, [r6, #0]
 80045a0:	f88d 3010 	strb.w	r3, [sp, #16]
 80045a4:	121b      	asrs	r3, r3, #8
 80045a6:	f88d 3011 	strb.w	r3, [sp, #17]
  HOST_TO_LE_16(buff+6,-x_axes->AXIS_Z);
 80045aa:	68b3      	ldr	r3, [r6, #8]
 80045ac:	425b      	negs	r3, r3
 80045ae:	f88d 3012 	strb.w	r3, [sp, #18]
 80045b2:	121b      	asrs	r3, r3, #8
 80045b4:	f88d 3013 	strb.w	r3, [sp, #19]
    
  HOST_TO_LE_16(buff+8,g_axes->AXIS_Y);
 80045b8:	686b      	ldr	r3, [r5, #4]
 80045ba:	f88d 3014 	strb.w	r3, [sp, #20]
 80045be:	121b      	asrs	r3, r3, #8
 80045c0:	f88d 3015 	strb.w	r3, [sp, #21]
  HOST_TO_LE_16(buff+10,g_axes->AXIS_X);
 80045c4:	682b      	ldr	r3, [r5, #0]
 80045c6:	f88d 3016 	strb.w	r3, [sp, #22]
 80045ca:	121b      	asrs	r3, r3, #8
 80045cc:	f88d 3017 	strb.w	r3, [sp, #23]
  HOST_TO_LE_16(buff+12,g_axes->AXIS_Z);
 80045d0:	68ab      	ldr	r3, [r5, #8]
 80045d2:	f88d 3018 	strb.w	r3, [sp, #24]
 80045d6:	121b      	asrs	r3, r3, #8
 80045d8:	f88d 3019 	strb.w	r3, [sp, #25]
  
  HOST_TO_LE_16(buff+14,m_axes->AXIS_Y);
 80045dc:	6863      	ldr	r3, [r4, #4]
 80045de:	f88d 301a 	strb.w	r3, [sp, #26]
 80045e2:	121b      	asrs	r3, r3, #8
 80045e4:	f88d 301b 	strb.w	r3, [sp, #27]
  HOST_TO_LE_16(buff+16,m_axes->AXIS_X);
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	f88d 301c 	strb.w	r3, [sp, #28]
 80045ee:	121b      	asrs	r3, r3, #8
 80045f0:	f88d 301d 	strb.w	r3, [sp, #29]
  HOST_TO_LE_16(buff+18,m_axes->AXIS_Z);
 80045f4:	68a3      	ldr	r3, [r4, #8]
 80045f6:	f88d 301e 	strb.w	r3, [sp, #30]
 80045fa:	121b      	asrs	r3, r3, #8
 80045fc:	f88d 301f 	strb.w	r3, [sp, #31]
    
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 8004600:	4b09      	ldr	r3, [pc, #36]	; (8004628 <Acc_Update+0xb0>)
 8004602:	8819      	ldrh	r1, [r3, #0]
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <Acc_Update+0xb4>)
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8004606:	0ac0      	lsrs	r0, r0, #11
 8004608:	f88d 000d 	strb.w	r0, [sp, #13]
  ret = aci_gatt_update_char_value(HWServW2STHandle, AccGyroMagCharHandle,
 800460c:	8818      	ldrh	r0, [r3, #0]
 800460e:	ab03      	add	r3, sp, #12
 8004610:	9300      	str	r3, [sp, #0]
 8004612:	2200      	movs	r2, #0
 8004614:	2314      	movs	r3, #20
 8004616:	f7fe ff32 	bl	800347e <aci_gatt_update_char_value>
    PRINTF("Error while updating Acceleration characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }

  return BLE_STATUS_SUCCESS;  
}
 800461a:	2800      	cmp	r0, #0
 800461c:	bf14      	ite	ne
 800461e:	2047      	movne	r0, #71	; 0x47
 8004620:	2000      	moveq	r0, #0
 8004622:	b008      	add	sp, #32
 8004624:	bd70      	pop	{r4, r5, r6, pc}
 8004626:	bf00      	nop
 8004628:	20000610 	.word	0x20000610
 800462c:	2000060e 	.word	0x2000060e

08004630 <Quat_Update>:
 * @brief  Update quaternions characteristic value
 * @param  SensorAxes_t *data Structure containing the quaterions
 * @retval tBleStatus      Status
 */
tBleStatus Quat_Update(AxesRaw_t *data)
{
 8004630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004632:	4604      	mov	r4, r0
  tBleStatus ret;
  uint8_t buff[2+6*SEND_N_QUATERNIONS];

  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 8004634:	f7fc fa8a 	bl	8000b4c <HAL_GetTick>
 8004638:	08c0      	lsrs	r0, r0, #3
 800463a:	f88d 0008 	strb.w	r0, [sp, #8]
 800463e:	f7fc fa85 	bl	8000b4c <HAL_GetTick>

#if SEND_N_QUATERNIONS == 1
  HOST_TO_LE_16(buff+2,data[0].AXIS_X);
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	f88d 300a 	strb.w	r3, [sp, #10]
 8004648:	121b      	asrs	r3, r3, #8
 800464a:	f88d 300b 	strb.w	r3, [sp, #11]
  HOST_TO_LE_16(buff+4,data[0].AXIS_Y);
 800464e:	6863      	ldr	r3, [r4, #4]
 8004650:	f88d 300c 	strb.w	r3, [sp, #12]
 8004654:	121b      	asrs	r3, r3, #8
 8004656:	f88d 300d 	strb.w	r3, [sp, #13]
  HOST_TO_LE_16(buff+6,data[0].AXIS_Z);
 800465a:	68a3      	ldr	r3, [r4, #8]
 800465c:	f88d 300e 	strb.w	r3, [sp, #14]
 8004660:	121b      	asrs	r3, r3, #8
 8004662:	f88d 300f 	strb.w	r3, [sp, #15]
  HOST_TO_LE_16(buff+18,data[2].AXIS_Z);
#else
#error SEND_N_QUATERNIONS could be only 1,2,3
#endif
  
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8004666:	4b09      	ldr	r3, [pc, #36]	; (800468c <Quat_Update+0x5c>)
 8004668:	8819      	ldrh	r1, [r3, #0]
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <Quat_Update+0x60>)
  HOST_TO_LE_16(buff,(HAL_GetTick()>>3));
 800466c:	0ac0      	lsrs	r0, r0, #11
 800466e:	f88d 0009 	strb.w	r0, [sp, #9]
  ret = aci_gatt_update_char_value(SWServW2STHandle, QuaternionsCharHandle,
 8004672:	8818      	ldrh	r0, [r3, #0]
 8004674:	ab02      	add	r3, sp, #8
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2200      	movs	r2, #0
 800467a:	2308      	movs	r3, #8
 800467c:	f7fe feff 	bl	800347e <aci_gatt_update_char_value>
    PRINTF("Error while updating Sensor Fusion characteristic: 0x%02X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }
  
  return BLE_STATUS_SUCCESS;
}
 8004680:	2800      	cmp	r0, #0
 8004682:	bf14      	ite	ne
 8004684:	2047      	movne	r0, #71	; 0x47
 8004686:	2000      	moveq	r0, #0
 8004688:	b004      	add	sp, #16
 800468a:	bd10      	pop	{r4, pc}
 800468c:	200005fa 	.word	0x200005fa
 8004690:	2000060c 	.word	0x2000060c

08004694 <BlueMS_Environmental_Update>:
    }
  }
}

tBleStatus BlueMS_Environmental_Update(int32_t press, int16_t temp)
{  
 8004694:	b530      	push	{r4, r5, lr}
 8004696:	b085      	sub	sp, #20
 8004698:	4604      	mov	r4, r0
 800469a:	460d      	mov	r5, r1
  tBleStatus ret;
  uint8_t buff[8];
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 800469c:	f7fc fa56 	bl	8000b4c <HAL_GetTick>
 80046a0:	08c0      	lsrs	r0, r0, #3
 80046a2:	f88d 0008 	strb.w	r0, [sp, #8]
 80046a6:	f7fc fa51 	bl	8000b4c <HAL_GetTick>
  
  HOST_TO_LE_32(buff+2,press);
 80046aa:	1223      	asrs	r3, r4, #8
 80046ac:	f88d 300b 	strb.w	r3, [sp, #11]
 80046b0:	1423      	asrs	r3, r4, #16
 80046b2:	f88d 300c 	strb.w	r3, [sp, #12]
  HOST_TO_LE_16(buff+6,temp);
  
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80046b6:	4b0e      	ldr	r3, [pc, #56]	; (80046f0 <BlueMS_Environmental_Update+0x5c>)
  HOST_TO_LE_32(buff+2,press);
 80046b8:	f88d 400a 	strb.w	r4, [sp, #10]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80046bc:	8819      	ldrh	r1, [r3, #0]
 80046be:	4b0d      	ldr	r3, [pc, #52]	; (80046f4 <BlueMS_Environmental_Update+0x60>)
  HOST_TO_LE_16(buff+6,temp);
 80046c0:	f88d 500e 	strb.w	r5, [sp, #14]
  HOST_TO_LE_16(buff, HAL_GetTick()>>3);
 80046c4:	0ac0      	lsrs	r0, r0, #11
 80046c6:	f88d 0009 	strb.w	r0, [sp, #9]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80046ca:	8818      	ldrh	r0, [r3, #0]
 80046cc:	ab02      	add	r3, sp, #8
 80046ce:	9300      	str	r3, [sp, #0]
  HOST_TO_LE_32(buff+2,press);
 80046d0:	1624      	asrs	r4, r4, #24
  HOST_TO_LE_16(buff+6,temp);
 80046d2:	122d      	asrs	r5, r5, #8
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80046d4:	2308      	movs	r3, #8
 80046d6:	2200      	movs	r2, #0
  HOST_TO_LE_32(buff+2,press);
 80046d8:	f88d 400d 	strb.w	r4, [sp, #13]
  HOST_TO_LE_16(buff+6,temp);
 80046dc:	f88d 500f 	strb.w	r5, [sp, #15]
  ret = aci_gatt_update_char_value(HWServW2STHandle, EnvironmentalCharHandle, 
 80046e0:	f7fe fecd 	bl	800347e <aci_gatt_update_char_value>
    PRINTF("Error while updating TEMP characteristic: 0x%04X\n",ret) ;
    return BLE_STATUS_ERROR ;
  }
  
  return BLE_STATUS_SUCCESS;	
}
 80046e4:	2800      	cmp	r0, #0
 80046e6:	bf14      	ite	ne
 80046e8:	2047      	movne	r0, #71	; 0x47
 80046ea:	2000      	moveq	r0, #0
 80046ec:	b005      	add	sp, #20
 80046ee:	bd30      	pop	{r4, r5, pc}
 80046f0:	200005f8 	.word	0x200005f8
 80046f4:	2000060e 	.word	0x2000060e

080046f8 <Read_Request_CB>:
  if(handle == AccGyroMagCharHandle + 1)
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <Read_Request_CB+0xb8>)
 80046fa:	881b      	ldrh	r3, [r3, #0]
 80046fc:	3301      	adds	r3, #1
 80046fe:	4298      	cmp	r0, r3
{
 8004700:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(handle == AccGyroMagCharHandle + 1)
 8004702:	d10d      	bne.n	8004720 <Read_Request_CB+0x28>
    Acc_Update(&x_axes, &g_axes, &m_axes);
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <Read_Request_CB+0xbc>)
 8004706:	492c      	ldr	r1, [pc, #176]	; (80047b8 <Read_Request_CB+0xc0>)
 8004708:	482c      	ldr	r0, [pc, #176]	; (80047bc <Read_Request_CB+0xc4>)
 800470a:	f7ff ff35 	bl	8004578 <Acc_Update>
  if(connection_handle !=0)
 800470e:	4b2c      	ldr	r3, [pc, #176]	; (80047c0 <Read_Request_CB+0xc8>)
 8004710:	8818      	ldrh	r0, [r3, #0]
 8004712:	2800      	cmp	r0, #0
 8004714:	d049      	beq.n	80047aa <Read_Request_CB+0xb2>
}
 8004716:	b003      	add	sp, #12
 8004718:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    ret = aci_gatt_allow_read(connection_handle);
 800471c:	f7fe bee6 	b.w	80034ec <aci_gatt_allow_read>
  else if (handle == EnvironmentalCharHandle + 1)
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <Read_Request_CB+0xcc>)
 8004722:	881b      	ldrh	r3, [r3, #0]
 8004724:	3301      	adds	r3, #1
 8004726:	4298      	cmp	r0, r3
 8004728:	d1f1      	bne.n	800470e <Read_Request_CB+0x16>
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 800472a:	f000 feab 	bl	8005484 <rand>
 800472e:	4604      	mov	r4, r0
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004730:	f000 fea8 	bl	8005484 <rand>
 8004734:	4605      	mov	r5, r0
    data_t = 27.0 + ((uint64_t)rand()*5)/RAND_MAX; //T sensor emulation        
 8004736:	2005      	movs	r0, #5
 8004738:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800473c:	2300      	movs	r3, #0
 800473e:	fb84 0100 	smull	r0, r1, r4, r0
 8004742:	f7fb ff49 	bl	80005d8 <__aeabi_uldivmod>
 8004746:	f7fb fec1 	bl	80004cc <__aeabi_ul2d>
 800474a:	2200      	movs	r2, #0
 800474c:	4b1e      	ldr	r3, [pc, #120]	; (80047c8 <Read_Request_CB+0xd0>)
 800474e:	f7fb fd41 	bl	80001d4 <__adddf3>
 8004752:	f7fb fef1 	bl	8000538 <__aeabi_d2f>
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004756:	ee07 0a10 	vmov	s14, r0
 800475a:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 800475e:	ee67 7a27 	vmul.f32	s15, s14, s15
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004762:	2064      	movs	r0, #100	; 0x64
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004764:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004768:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800476c:	2300      	movs	r3, #0
 800476e:	fb85 0100 	smull	r0, r1, r5, r0
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004772:	edcd 7a01 	vstr	s15, [sp, #4]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004776:	f7fb ff2f 	bl	80005d8 <__aeabi_uldivmod>
 800477a:	f7fb fea7 	bl	80004cc <__aeabi_ul2d>
 800477e:	2200      	movs	r2, #0
 8004780:	4b12      	ldr	r3, [pc, #72]	; (80047cc <Read_Request_CB+0xd4>)
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 8004782:	f9bd 4004 	ldrsh.w	r4, [sp, #4]
    data_p = 1000.0 + ((uint64_t)rand()*100)/RAND_MAX; //P sensor emulation        
 8004786:	f7fb fd25 	bl	80001d4 <__adddf3>
 800478a:	f7fb fed5 	bl	8000538 <__aeabi_d2f>
    BlueMS_Environmental_Update((int32_t)(data_p *100), (int16_t)(data_t * 10)); 
 800478e:	eddf 7a10 	vldr	s15, [pc, #64]	; 80047d0 <Read_Request_CB+0xd8>
 8004792:	ee07 0a10 	vmov	s14, r0
 8004796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800479a:	4621      	mov	r1, r4
 800479c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a0:	ee17 0a90 	vmov	r0, s15
 80047a4:	f7ff ff76 	bl	8004694 <BlueMS_Environmental_Update>
 80047a8:	e7b1      	b.n	800470e <Read_Request_CB+0x16>
}
 80047aa:	b003      	add	sp, #12
 80047ac:	bd30      	pop	{r4, r5, pc}
 80047ae:	bf00      	nop
 80047b0:	20000610 	.word	0x20000610
 80047b4:	200004c0 	.word	0x200004c0
 80047b8:	200004b4 	.word	0x200004b4
 80047bc:	200004dc 	.word	0x200004dc
 80047c0:	200004b0 	.word	0x200004b0
 80047c4:	200005f8 	.word	0x200005f8
 80047c8:	403b0000 	.word	0x403b0000
 80047cc:	408f4000 	.word	0x408f4000
 80047d0:	42c80000 	.word	0x42c80000

080047d4 <HCI_TL_SPI_Init>:
 */
int32_t HCI_TL_SPI_Init(void* pConf)
{
  GPIO_InitTypeDef GPIO_InitStruct;
  
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d4:	4b17      	ldr	r3, [pc, #92]	; (8004834 <HCI_TL_SPI_Init+0x60>)
  
  /*Configure EXTI Line */
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80047d6:	4818      	ldr	r0, [pc, #96]	; (8004838 <HCI_TL_SPI_Init+0x64>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
{
 80047da:	b530      	push	{r4, r5, lr}
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	f042 0201 	orr.w	r2, r2, #1
 80047e0:	64da      	str	r2, [r3, #76]	; 0x4c
 80047e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
{
 80047e4:	b087      	sub	sp, #28
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	9300      	str	r3, [sp, #0]
 80047ec:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80047ee:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f0:	2400      	movs	r4, #0
  GPIO_InitStruct.Pin = HCI_TL_SPI_EXTI_PIN;
 80047f2:	9301      	str	r3, [sp, #4]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80047f4:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047f6:	4b11      	ldr	r3, [pc, #68]	; (800483c <HCI_TL_SPI_Init+0x68>)
 80047f8:	9302      	str	r3, [sp, #8]
   
  /*Configure CS & RESET Line */
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047fa:	2501      	movs	r5, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	9403      	str	r4, [sp, #12]
  HAL_GPIO_Init(HCI_TL_SPI_EXTI_PORT, &GPIO_InitStruct);
 80047fe:	f7fc fb13 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 8004802:	f44f 7380 	mov.w	r3, #256	; 0x100
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8004806:	a901      	add	r1, sp, #4
 8004808:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin =  HCI_TL_RST_PIN ;
 800480c:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800480e:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004812:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_RST_PORT, &GPIO_InitStruct);
 8004814:	f7fc fb08 	bl	8000e28 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004818:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 800481c:	a901      	add	r1, sp, #4
 800481e:	4808      	ldr	r0, [pc, #32]	; (8004840 <HCI_TL_SPI_Init+0x6c>)
  GPIO_InitStruct.Pin = HCI_TL_SPI_CS_PIN ;
 8004820:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004822:	9502      	str	r5, [sp, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004824:	9403      	str	r4, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004826:	9404      	str	r4, [sp, #16]
  HAL_GPIO_Init(HCI_TL_SPI_CS_PORT, &GPIO_InitStruct); 
 8004828:	f7fc fafe 	bl	8000e28 <HAL_GPIO_Init>
    
  return BSP_SPI3_Init();
 800482c:	f7ff fd52 	bl	80042d4 <BSP_SPI3_Init>
}
 8004830:	b007      	add	sp, #28
 8004832:	bd30      	pop	{r4, r5, pc}
 8004834:	40021000 	.word	0x40021000
 8004838:	48001000 	.word	0x48001000
 800483c:	10110000 	.word	0x10110000
 8004840:	48000c00 	.word	0x48000c00

08004844 <HCI_TL_SPI_DeInit>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_DeInit(void)
{
 8004844:	b508      	push	{r3, lr}
  HAL_GPIO_DeInit(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN); 
 8004846:	2140      	movs	r1, #64	; 0x40
 8004848:	4807      	ldr	r0, [pc, #28]	; (8004868 <HCI_TL_SPI_DeInit+0x24>)
 800484a:	f7fc fbc9 	bl	8000fe0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN); 
 800484e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004852:	4806      	ldr	r0, [pc, #24]	; (800486c <HCI_TL_SPI_DeInit+0x28>)
 8004854:	f7fc fbc4 	bl	8000fe0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(HCI_TL_RST_PORT, HCI_TL_RST_PIN);   
 8004858:	f44f 7180 	mov.w	r1, #256	; 0x100
 800485c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004860:	f7fc fbbe 	bl	8000fe0 <HAL_GPIO_DeInit>
  return 0;
}
 8004864:	2000      	movs	r0, #0
 8004866:	bd08      	pop	{r3, pc}
 8004868:	48001000 	.word	0x48001000
 800486c:	48000c00 	.word	0x48000c00

08004870 <HCI_TL_SPI_Reset>:
 *
 * @param  None
 * @retval int32_t 0
 */
int32_t HCI_TL_SPI_Reset(void)
{
 8004870:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_RESET);
 8004872:	2200      	movs	r2, #0
 8004874:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004878:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800487c:	f7fc fc40 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_Delay(5);
 8004880:	2005      	movs	r0, #5
 8004882:	f7fc f969 	bl	8000b58 <HAL_Delay>
  HAL_GPIO_WritePin(HCI_TL_RST_PORT, HCI_TL_RST_PIN, GPIO_PIN_SET);
 8004886:	2201      	movs	r2, #1
 8004888:	f44f 7180 	mov.w	r1, #256	; 0x100
 800488c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004890:	f7fc fc36 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_Delay(5);    
 8004894:	2005      	movs	r0, #5
 8004896:	f7fc f95f 	bl	8000b58 <HAL_Delay>
  return 0;
}  
 800489a:	2000      	movs	r0, #0
 800489c:	bd08      	pop	{r3, pc}
	...

080048a0 <HCI_TL_SPI_Receive>:
 * @param  buffer : Buffer where data from SPI are stored
 * @param  size   : Buffer size
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Receive(uint8_t* buffer, uint16_t size)
{
 80048a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048a2:	b087      	sub	sp, #28
  uint16_t byte_count;
  uint8_t len = 0;
  uint8_t char_ff = 0xff;
  volatile uint8_t read_char;

  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80048a4:	2400      	movs	r4, #0
  uint8_t char_ff = 0xff;
 80048a6:	23ff      	movs	r3, #255	; 0xff
 80048a8:	f88d 3006 	strb.w	r3, [sp, #6]
  uint8_t header_slave[HEADER_SIZE];

  /* CS reset */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80048ac:	4622      	mov	r2, r4
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80048ae:	230b      	movs	r3, #11
{
 80048b0:	4607      	mov	r7, r0
 80048b2:	460e      	mov	r6, r1
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80048b4:	481e      	ldr	r0, [pc, #120]	; (8004930 <HCI_TL_SPI_Receive+0x90>)
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80048b6:	f88d 3008 	strb.w	r3, [sp, #8]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80048ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  uint8_t header_master[HEADER_SIZE] = {0x0b, 0x00, 0x00, 0x00, 0x00};
 80048be:	f88d 4009 	strb.w	r4, [sp, #9]
 80048c2:	f88d 400a 	strb.w	r4, [sp, #10]
 80048c6:	f88d 400b 	strb.w	r4, [sp, #11]
 80048ca:	f88d 400c 	strb.w	r4, [sp, #12]
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 80048ce:	f7fc fc17 	bl	8001100 <HAL_GPIO_WritePin>

  /* Read the header */  
  BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 80048d2:	2205      	movs	r2, #5
 80048d4:	a904      	add	r1, sp, #16
 80048d6:	a802      	add	r0, sp, #8
 80048d8:	f7ff fcc4 	bl	8004264 <BSP_SPI3_SendRecv>
  	
  if(header_slave[0] == 0x02) 
 80048dc:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d122      	bne.n	800492a <HCI_TL_SPI_Receive+0x8a>
  {
    /* device is ready */
    byte_count = (header_slave[4] << 8)| header_slave[3];
 80048e4:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80048e8:	f89d 3013 	ldrb.w	r3, [sp, #19]
  
    if(byte_count > 0) {
 80048ec:	ea53 2505 	orrs.w	r5, r3, r5, lsl #8
 80048f0:	d007      	beq.n	8004902 <HCI_TL_SPI_Receive+0x62>
 80048f2:	42ae      	cmp	r6, r5
 80048f4:	bf28      	it	cs
 80048f6:	462e      	movcs	r6, r5
 80048f8:	b2e5      	uxtb	r5, r4

      if (byte_count > size){
        byte_count = size;
      }        
  
      for(len = 0; len < byte_count; len++)
 80048fa:	42b5      	cmp	r5, r6
 80048fc:	f104 0401 	add.w	r4, r4, #1
 8004900:	d308      	bcc.n	8004914 <HCI_TL_SPI_Receive+0x74>
        buffer[len] = read_char;
      }      
    }    
  }
  /* Release CS line */
  HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004902:	2201      	movs	r2, #1
 8004904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004908:	4809      	ldr	r0, [pc, #36]	; (8004930 <HCI_TL_SPI_Receive+0x90>)
 800490a:	f7fc fbf9 	bl	8001100 <HAL_GPIO_WritePin>
    PRINT_CSV("\n");
  }
#endif
  
  return len;  
}
 800490e:	4628      	mov	r0, r5
 8004910:	b007      	add	sp, #28
 8004912:	bdf0      	pop	{r4, r5, r6, r7, pc}
        BSP_SPI3_SendRecv(&char_ff, (uint8_t*)&read_char, 1);  
 8004914:	2201      	movs	r2, #1
 8004916:	f10d 0107 	add.w	r1, sp, #7
 800491a:	f10d 0006 	add.w	r0, sp, #6
 800491e:	f7ff fca1 	bl	8004264 <BSP_SPI3_SendRecv>
        buffer[len] = read_char;
 8004922:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004926:	557b      	strb	r3, [r7, r5]
 8004928:	e7e6      	b.n	80048f8 <HCI_TL_SPI_Receive+0x58>
  uint8_t len = 0;
 800492a:	4625      	mov	r5, r4
 800492c:	e7e9      	b.n	8004902 <HCI_TL_SPI_Receive+0x62>
 800492e:	bf00      	nop
 8004930:	48000c00 	.word	0x48000c00

08004934 <HCI_TL_SPI_Send>:
 * @param  buffer : data buffer to be written
 * @param  size   : size of first data buffer to be written
 * @retval int32_t: Number of read bytes
 */
int32_t HCI_TL_SPI_Send(uint8_t* buffer, uint16_t size)
{  
 8004934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004938:	b085      	sub	sp, #20
  int32_t result;  
  
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 800493a:	230a      	movs	r3, #10
 800493c:	f88d 3000 	strb.w	r3, [sp]
 8004940:	2300      	movs	r3, #0
{  
 8004942:	4680      	mov	r8, r0
 8004944:	460d      	mov	r5, r1
  uint8_t header_master[HEADER_SIZE] = {0x0a, 0x00, 0x00, 0x00, 0x00};
 8004946:	f88d 3001 	strb.w	r3, [sp, #1]
 800494a:	f88d 3002 	strb.w	r3, [sp, #2]
 800494e:	f88d 3003 	strb.w	r3, [sp, #3]
 8004952:	f88d 3004 	strb.w	r3, [sp, #4]
  uint8_t header_slave[HEADER_SIZE];
  
  static uint8_t read_char_buf[MAX_BUFFER_SIZE];
  uint32_t tickstart = HAL_GetTick();
 8004956:	f7fc f8f9 	bl	8000b4c <HAL_GetTick>
  do
  {
    result = 0;
    
    /* CS reset */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 800495a:	4e1b      	ldr	r6, [pc, #108]	; (80049c8 <HCI_TL_SPI_Send+0x94>)
    if(header_slave[0] == 0x02) 
    {
      /* SPI is ready */
      if(header_slave[1] >= size) 
      {
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 800495c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 80049cc <HCI_TL_SPI_Send+0x98>
  uint32_t tickstart = HAL_GetTick();
 8004960:	4607      	mov	r7, r0
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_RESET);
 8004962:	2200      	movs	r2, #0
 8004964:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004968:	4630      	mov	r0, r6
 800496a:	f7fc fbc9 	bl	8001100 <HAL_GPIO_WritePin>
    BSP_SPI3_SendRecv(header_master, header_slave, HEADER_SIZE);
 800496e:	2205      	movs	r2, #5
 8004970:	a902      	add	r1, sp, #8
 8004972:	4668      	mov	r0, sp
 8004974:	f7ff fc76 	bl	8004264 <BSP_SPI3_SendRecv>
    if(header_slave[0] == 0x02) 
 8004978:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d11a      	bne.n	80049b6 <HCI_TL_SPI_Send+0x82>
      if(header_slave[1] >= size) 
 8004980:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004984:	42ab      	cmp	r3, r5
 8004986:	d319      	bcc.n	80049bc <HCI_TL_SPI_Send+0x88>
        BSP_SPI3_SendRecv(buffer, read_char_buf, size);
 8004988:	462a      	mov	r2, r5
 800498a:	4649      	mov	r1, r9
 800498c:	4640      	mov	r0, r8
 800498e:	f7ff fc69 	bl	8004264 <BSP_SPI3_SendRecv>
    result = 0;
 8004992:	2400      	movs	r4, #0
      /* SPI is not ready */
      result = -1;
    }
    
    /* Release CS line */
    HAL_GPIO_WritePin(HCI_TL_SPI_CS_PORT, HCI_TL_SPI_CS_PIN, GPIO_PIN_SET);
 8004994:	2201      	movs	r2, #1
 8004996:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800499a:	4630      	mov	r0, r6
 800499c:	f7fc fbb0 	bl	8001100 <HAL_GPIO_WritePin>
    
    if((HAL_GetTick() - tickstart) > TIMEOUT_DURATION)
 80049a0:	f7fc f8d4 	bl	8000b4c <HAL_GetTick>
 80049a4:	1bc0      	subs	r0, r0, r7
 80049a6:	280f      	cmp	r0, #15
 80049a8:	d80b      	bhi.n	80049c2 <HCI_TL_SPI_Send+0x8e>
    {
      result = -3;
      break;
    }
  } while(result < 0);
 80049aa:	2c00      	cmp	r4, #0
 80049ac:	d1d9      	bne.n	8004962 <HCI_TL_SPI_Send+0x2e>
  
  return result;
}
 80049ae:	4620      	mov	r0, r4
 80049b0:	b005      	add	sp, #20
 80049b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      result = -1;
 80049b6:	f04f 34ff 	mov.w	r4, #4294967295
 80049ba:	e7eb      	b.n	8004994 <HCI_TL_SPI_Send+0x60>
        result = -2;
 80049bc:	f06f 0401 	mvn.w	r4, #1
 80049c0:	e7e8      	b.n	8004994 <HCI_TL_SPI_Send+0x60>
      result = -3;
 80049c2:	f06f 0402 	mvn.w	r4, #2
  return result;
 80049c6:	e7f2      	b.n	80049ae <HCI_TL_SPI_Send+0x7a>
 80049c8:	48000c00 	.word	0x48000c00
 80049cc:	200003ac 	.word	0x200003ac

080049d0 <hci_tl_lowlevel_isr>:
  *
  * @param  None
  * @retval None
  */
void hci_tl_lowlevel_isr(void)
{
 80049d0:	b510      	push	{r4, lr}
  return (HAL_GPIO_ReadPin(HCI_TL_SPI_EXTI_PORT, HCI_TL_SPI_EXTI_PIN) == GPIO_PIN_SET);
 80049d2:	4c06      	ldr	r4, [pc, #24]	; (80049ec <hci_tl_lowlevel_isr+0x1c>)
 80049d4:	2140      	movs	r1, #64	; 0x40
 80049d6:	4620      	mov	r0, r4
 80049d8:	f7fc fb8c 	bl	80010f4 <HAL_GPIO_ReadPin>
  /* Call hci_notify_asynch_evt() */
  while(IsDataAvailable())
 80049dc:	2801      	cmp	r0, #1
 80049de:	d104      	bne.n	80049ea <hci_tl_lowlevel_isr+0x1a>
  {        
    if (hci_notify_asynch_evt(NULL))
 80049e0:	2000      	movs	r0, #0
 80049e2:	f7fe ffdd 	bl	80039a0 <hci_notify_asynch_evt>
 80049e6:	2800      	cmp	r0, #0
 80049e8:	d0f4      	beq.n	80049d4 <hci_tl_lowlevel_isr+0x4>
 80049ea:	bd10      	pop	{r4, pc}
 80049ec:	48001000 	.word	0x48001000

080049f0 <hci_tl_lowlevel_init>:
{
 80049f0:	b510      	push	{r4, lr}
 80049f2:	b088      	sub	sp, #32
  fops.Init    = HCI_TL_SPI_Init;
 80049f4:	4b11      	ldr	r3, [pc, #68]	; (8004a3c <hci_tl_lowlevel_init+0x4c>)
 80049f6:	9301      	str	r3, [sp, #4]
  fops.DeInit  = HCI_TL_SPI_DeInit;
 80049f8:	4b11      	ldr	r3, [pc, #68]	; (8004a40 <hci_tl_lowlevel_init+0x50>)
 80049fa:	9302      	str	r3, [sp, #8]
  fops.Send    = HCI_TL_SPI_Send;
 80049fc:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <hci_tl_lowlevel_init+0x54>)
 80049fe:	9305      	str	r3, [sp, #20]
  fops.Receive = HCI_TL_SPI_Receive;
 8004a00:	4b11      	ldr	r3, [pc, #68]	; (8004a48 <hci_tl_lowlevel_init+0x58>)
 8004a02:	9304      	str	r3, [sp, #16]
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8004a04:	4c11      	ldr	r4, [pc, #68]	; (8004a4c <hci_tl_lowlevel_init+0x5c>)
  fops.Reset   = HCI_TL_SPI_Reset;
 8004a06:	4b12      	ldr	r3, [pc, #72]	; (8004a50 <hci_tl_lowlevel_init+0x60>)
 8004a08:	9303      	str	r3, [sp, #12]
  hci_register_io_bus (&fops);
 8004a0a:	a801      	add	r0, sp, #4
  fops.GetTick = BSP_GetTick;
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <hci_tl_lowlevel_init+0x64>)
 8004a0e:	9307      	str	r3, [sp, #28]
  hci_register_io_bus (&fops);
 8004a10:	f7fe fed8 	bl	80037c4 <hci_register_io_bus>
  HAL_EXTI_GetHandle(&hexti6, EXTI_LINE_6);
 8004a14:	4910      	ldr	r1, [pc, #64]	; (8004a58 <hci_tl_lowlevel_init+0x68>)
 8004a16:	4620      	mov	r0, r4
 8004a18:	f7fc f9e8 	bl	8000dec <HAL_EXTI_GetHandle>
  HAL_EXTI_RegisterCallback(&hexti6, HAL_EXTI_COMMON_CB_ID, hci_tl_lowlevel_isr);
 8004a1c:	4a0f      	ldr	r2, [pc, #60]	; (8004a5c <hci_tl_lowlevel_init+0x6c>)
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4620      	mov	r0, r4
 8004a22:	f7fc f9dd 	bl	8000de0 <HAL_EXTI_RegisterCallback>
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004a26:	2200      	movs	r2, #0
 8004a28:	4611      	mov	r1, r2
 8004a2a:	2017      	movs	r0, #23
 8004a2c:	f7fc f8ba 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004a30:	2017      	movs	r0, #23
 8004a32:	f7fc f8eb 	bl	8000c0c <HAL_NVIC_EnableIRQ>
}
 8004a36:	b008      	add	sp, #32
 8004a38:	bd10      	pop	{r4, pc}
 8004a3a:	bf00      	nop
 8004a3c:	080047d5 	.word	0x080047d5
 8004a40:	08004845 	.word	0x08004845
 8004a44:	08004935 	.word	0x08004935
 8004a48:	080048a1 	.word	0x080048a1
 8004a4c:	20000624 	.word	0x20000624
 8004a50:	08004871 	.word	0x08004871
 8004a54:	0800428d 	.word	0x0800428d
 8004a58:	16000006 	.word	0x16000006
 8004a5c:	080049d1 	.word	0x080049d1

08004a60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a62:	b0b9      	sub	sp, #228	; 0xe4
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a64:	2414      	movs	r4, #20
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004a66:	2244      	movs	r2, #68	; 0x44
 8004a68:	2100      	movs	r1, #0
 8004a6a:	a805      	add	r0, sp, #20
 8004a6c:	f000 fcd9 	bl	8005422 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004a70:	4622      	mov	r2, r4
 8004a72:	2100      	movs	r1, #0
 8004a74:	4668      	mov	r0, sp
 8004a76:	f000 fcd4 	bl	8005422 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	2288      	movs	r2, #136	; 0x88
 8004a7e:	a816      	add	r0, sp, #88	; 0x58
 8004a80:	f000 fccf 	bl	8005422 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8004a84:	f7fc fc90 	bl	80013a8 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <SystemClock_Config+0xb4>)
 8004a8a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004a8e:	f023 0318 	bic.w	r3, r3, #24
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004a96:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004a98:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a9a:	2602      	movs	r6, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8004a9c:	9405      	str	r4, [sp, #20]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004a9e:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004aa0:	2400      	movs	r4, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004aa2:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004aa4:	2707      	movs	r7, #7
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004aa6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.PLL.PLLN = 40;
 8004aa8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004aaa:	9507      	str	r5, [sp, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8004aac:	950b      	str	r5, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004aae:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004ab0:	960f      	str	r6, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8004ab2:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004ab4:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8004ab6:	9713      	str	r7, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004ab8:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004aba:	9615      	str	r6, [sp, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004abc:	f7fc fdd0 	bl	8001660 <HAL_RCC_OscConfig>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ac0:	220f      	movs	r2, #15
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ac2:	2104      	movs	r1, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ac4:	2303      	movs	r3, #3
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ac6:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ac8:	e88d 000c 	stmia.w	sp, {r2, r3}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004acc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004ace:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004ad0:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004ad2:	f7fd f827 	bl	8001b24 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8004ad6:	4b10      	ldr	r3, [pc, #64]	; (8004b18 <SystemClock_Config+0xb8>)
 8004ad8:	9316      	str	r3, [sp, #88]	; 0x58
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8004ada:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8004ade:	9331      	str	r3, [sp, #196]	; 0xc4
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8004ae0:	2318      	movs	r3, #24
 8004ae2:	9319      	str	r3, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ae4:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8004ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004aea:	931d      	str	r3, [sp, #116]	; 0x74
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004aec:	9424      	str	r4, [sp, #144]	; 0x90
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004aee:	9426      	str	r4, [sp, #152]	; 0x98
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8004af0:	942b      	str	r4, [sp, #172]	; 0xac
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004af2:	9436      	str	r4, [sp, #216]	; 0xd8
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004af4:	9517      	str	r5, [sp, #92]	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004af6:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004af8:	971a      	str	r7, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004afa:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004afc:	961c      	str	r6, [sp, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004afe:	f7fd f9d7 	bl	8001eb0 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8004b02:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004b06:	f7fc fc5f 	bl	80013c8 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8004b0a:	f7fd fbb9 	bl	8002280 <HAL_RCCEx_EnableMSIPLLMode>
}
 8004b0e:	b039      	add	sp, #228	; 0xe4
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40021000 	.word	0x40021000
 8004b18:	00012085 	.word	0x00012085

08004b1c <main>:
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
  HAL_Init();
 8004b20:	f7fb fff8 	bl	8000b14 <HAL_Init>
  SystemClock_Config();
 8004b24:	f7ff ff9c 	bl	8004a60 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b28:	2214      	movs	r2, #20
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	eb0d 0002 	add.w	r0, sp, r2
 8004b30:	f000 fc77 	bl	8005422 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b34:	4bb1      	ldr	r3, [pc, #708]	; (8004dfc <main+0x2e0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8004b36:	48b2      	ldr	r0, [pc, #712]	; (8004e00 <main+0x2e4>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004b3a:	f8df 82ec 	ldr.w	r8, [pc, #748]	; 8004e28 <main+0x30c>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b3e:	f042 0210 	orr.w	r2, r2, #16
 8004b42:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b46:	f002 0210 	and.w	r2, r2, #16
 8004b4a:	9200      	str	r2, [sp, #0]
 8004b4c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b50:	f042 0204 	orr.w	r2, r2, #4
 8004b54:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b58:	f002 0204 	and.w	r2, r2, #4
 8004b5c:	9201      	str	r2, [sp, #4]
 8004b5e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b60:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b62:	f042 0201 	orr.w	r2, r2, #1
 8004b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b6a:	f002 0201 	and.w	r2, r2, #1
 8004b6e:	9202      	str	r2, [sp, #8]
 8004b70:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b72:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b74:	f042 0202 	orr.w	r2, r2, #2
 8004b78:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7c:	f002 0202 	and.w	r2, r2, #2
 8004b80:	9203      	str	r2, [sp, #12]
 8004b82:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b84:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8004b94:	2200      	movs	r2, #0
 8004b96:	f44f 718a 	mov.w	r1, #276	; 0x114
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b9a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8004b9c:	f7fc fab0 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f248 1104 	movw	r1, #33028	; 0x8104
 8004ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004baa:	f7fc faa9 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f24f 0114 	movw	r1, #61460	; 0xf014
 8004bb4:	4893      	ldr	r0, [pc, #588]	; (8004e04 <main+0x2e8>)
 8004bb6:	f7fc faa3 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f241 0181 	movw	r1, #4225	; 0x1081
 8004bc0:	4891      	ldr	r0, [pc, #580]	; (8004e08 <main+0x2ec>)
 8004bc2:	f7fc fa9d 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004bcc:	488e      	ldr	r0, [pc, #568]	; (8004e08 <main+0x2ec>)
 8004bce:	f7fc fa97 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004bd8:	488c      	ldr	r0, [pc, #560]	; (8004e0c <main+0x2f0>)
 8004bda:	f7fc fa91 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004bde:	2201      	movs	r2, #1
 8004be0:	2120      	movs	r1, #32
 8004be2:	4888      	ldr	r0, [pc, #544]	; (8004e04 <main+0x2e8>)
 8004be4:	f7fc fa8c 	bl	8001100 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004be8:	2201      	movs	r2, #1
 8004bea:	4611      	mov	r1, r2
 8004bec:	4884      	ldr	r0, [pc, #528]	; (8004e00 <main+0x2e4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bee:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8004bf0:	f7fc fa86 	bl	8001100 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004bf4:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004bf6:	f240 1315 	movw	r3, #277	; 0x115
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004bfa:	a905      	add	r1, sp, #20
 8004bfc:	4880      	ldr	r0, [pc, #512]	; (8004e00 <main+0x2e4>)
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8004bfe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c00:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c02:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c04:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c06:	f7fc f90f 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004c0a:	236a      	movs	r3, #106	; 0x6a
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c0c:	a905      	add	r1, sp, #20
 8004c0e:	487c      	ldr	r0, [pc, #496]	; (8004e00 <main+0x2e4>)
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8004c10:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004c12:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c16:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004c18:	f7fc f906 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8004c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004c20:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004c22:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c24:	4b7a      	ldr	r3, [pc, #488]	; (8004e10 <main+0x2f4>)
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004c26:	4879      	ldr	r0, [pc, #484]	; (8004e0c <main+0x2f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8004c28:	9306      	str	r3, [sp, #24]

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin 
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004c2a:	f04f 090b 	mov.w	r9, #11
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c2e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8004c30:	f7fc f8fa 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8004c34:	233f      	movs	r3, #63	; 0x3f
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c36:	a905      	add	r1, sp, #20
 8004c38:	4874      	ldr	r0, [pc, #464]	; (8004e0c <main+0x2f0>)
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin 
 8004c3a:	9305      	str	r3, [sp, #20]

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3c:	2702      	movs	r7, #2
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004c3e:	2603      	movs	r6, #3
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c40:	f04f 0a08 	mov.w	sl, #8
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004c44:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004c4a:	f7fc f8ed 	bl	8000e28 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c4e:	a905      	add	r1, sp, #20
 8004c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8004c54:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c56:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004c58:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c5c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c5e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c60:	f7fc f8e2 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004c64:	f248 1304 	movw	r3, #33028	; 0x8104
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c68:	a905      	add	r1, sp, #20
 8004c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8004c6e:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004c70:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c74:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f7fc f8d7 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8004c7a:	a905      	add	r1, sp, #20
 8004c7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8004c80:	f8cd a014 	str.w	sl, [sp, #20]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004c84:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c86:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c88:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c8a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8004c8c:	f7fc f8cc 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004c90:	2310      	movs	r3, #16
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004c92:	a905      	add	r1, sp, #20
 8004c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8004c98:	9305      	str	r3, [sp, #20]
  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c9a:	f04f 0a05 	mov.w	sl, #5
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004c9e:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca2:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8004ca4:	f7fc f8c0 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004ca8:	23e0      	movs	r3, #224	; 0xe0
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004caa:	a905      	add	r1, sp, #20
 8004cac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8004cb0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cb2:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cb6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cb8:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cbc:	f7fc f8b4 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004cc0:	a905      	add	r1, sp, #20
 8004cc2:	4850      	ldr	r0, [pc, #320]	; (8004e04 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8004cc4:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cc6:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cca:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8004ccc:	f7fc f8ac 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004cd0:	a905      	add	r1, sp, #20
 8004cd2:	484c      	ldr	r0, [pc, #304]	; (8004e04 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8004cd4:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004cd6:	f8cd 9018 	str.w	r9, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cda:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8004cdc:	f7fc f8a4 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin 
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004ce0:	f24f 0334 	movw	r3, #61492	; 0xf034
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce4:	a905      	add	r1, sp, #20
 8004ce6:	4847      	ldr	r0, [pc, #284]	; (8004e04 <main+0x2e8>)
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin 
 8004ce8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cea:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cec:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004cee:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cf0:	f7fc f89a 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin 
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004cf4:	f64c 4304 	movw	r3, #52228	; 0xcc04
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cf8:	a905      	add	r1, sp, #20
 8004cfa:	4843      	ldr	r0, [pc, #268]	; (8004e08 <main+0x2ec>)
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin 
 8004cfc:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004cfe:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d02:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d04:	f7fc f890 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004d08:	f243 0381 	movw	r3, #12417	; 0x3081
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d0c:	a905      	add	r1, sp, #20
 8004d0e:	483e      	ldr	r0, [pc, #248]	; (8004e08 <main+0x2ec>)
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8004d10:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d12:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d16:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d18:	f7fc f886 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004d1c:	f44f 7310 	mov.w	r3, #576	; 0x240
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d20:	a905      	add	r1, sp, #20
 8004d22:	483a      	ldr	r0, [pc, #232]	; (8004e0c <main+0x2f0>)
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8004d24:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d26:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d28:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d2a:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d2c:	f7fc f87c 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004d30:	f44f 73c0 	mov.w	r3, #384	; 0x180
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d34:	a905      	add	r1, sp, #20
 8004d36:	4835      	ldr	r0, [pc, #212]	; (8004e0c <main+0x2f0>)
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8004d38:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004d3a:	f8cd 8018 	str.w	r8, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d3e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d40:	f7fc f872 	bl	8000e28 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004d44:	a905      	add	r1, sp, #20
 8004d46:	4830      	ldr	r0, [pc, #192]	; (8004e08 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d48:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8004d4a:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d4c:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d4e:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d50:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8004d54:	f7fc f868 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8004d58:	2378      	movs	r3, #120	; 0x78
 8004d5a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d5c:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d5e:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d60:	4829      	ldr	r0, [pc, #164]	; (8004e08 <main+0x2ec>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d62:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d64:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d66:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d6a:	f7fc f85d 	bl	8000e28 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8004d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d72:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d74:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d76:	2312      	movs	r3, #18
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d78:	2604      	movs	r6, #4
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d7a:	a905      	add	r1, sp, #20
 8004d7c:	4821      	ldr	r0, [pc, #132]	; (8004e04 <main+0x2e8>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d7e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004d80:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004d82:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d84:	f7fc f850 	bl	8000e28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8004d88:	4622      	mov	r2, r4
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	2017      	movs	r0, #23
 8004d8e:	f7fb ff09 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004d92:	2017      	movs	r0, #23
 8004d94:	f7fb ff3a 	bl	8000c0c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8004d98:	4621      	mov	r1, r4
 8004d9a:	4622      	mov	r2, r4
 8004d9c:	2028      	movs	r0, #40	; 0x28
 8004d9e:	f7fb ff01 	bl	8000ba4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8004da2:	2028      	movs	r0, #40	; 0x28
 8004da4:	f7fb ff32 	bl	8000c0c <HAL_NVIC_EnableIRQ>
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8004da8:	481a      	ldr	r0, [pc, #104]	; (8004e14 <main+0x2f8>)
 8004daa:	4b1b      	ldr	r3, [pc, #108]	; (8004e18 <main+0x2fc>)
 8004dac:	6003      	str	r3, [r0, #0]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8004dae:	6206      	str	r6, [r0, #32]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004db0:	f44f 7380 	mov.w	r3, #256	; 0x100
  hi2c2.Instance = I2C2;
 8004db4:	4e19      	ldr	r6, [pc, #100]	; (8004e1c <main+0x300>)
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8004db6:	7105      	strb	r5, [r0, #4]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 8004db8:	6183      	str	r3, [r0, #24]
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8004dba:	6285      	str	r5, [r0, #40]	; 0x28
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8004dbc:	6084      	str	r4, [r0, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 8004dbe:	60c7      	str	r7, [r0, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004dc0:	6104      	str	r4, [r0, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8004dc2:	6144      	str	r4, [r0, #20]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8004dc4:	61c4      	str	r4, [r0, #28]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004dc6:	6244      	str	r4, [r0, #36]	; 0x24
  hdfsdm1_channel1.Init.Offset = 0;
 8004dc8:	62c4      	str	r4, [r0, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8004dca:	6304      	str	r4, [r0, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8004dcc:	f7fb ff6e 	bl	8000cac <HAL_DFSDM_ChannelInit>
  hi2c2.Init.Timing = 0x10909CEC;
 8004dd0:	4a13      	ldr	r2, [pc, #76]	; (8004e20 <main+0x304>)
 8004dd2:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <main+0x308>)
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004dd4:	60f5      	str	r5, [r6, #12]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004dd6:	4630      	mov	r0, r6
  hi2c2.Init.Timing = 0x10909CEC;
 8004dd8:	e886 000c 	stmia.w	r6, {r2, r3}
  hi2c2.Init.OwnAddress1 = 0;
 8004ddc:	60b4      	str	r4, [r6, #8]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004dde:	6134      	str	r4, [r6, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004de0:	6174      	str	r4, [r6, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004de2:	61b4      	str	r4, [r6, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004de4:	61f4      	str	r4, [r6, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004de6:	6234      	str	r4, [r6, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004de8:	f7fc f9a2 	bl	8001130 <HAL_I2C_Init>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004dec:	4621      	mov	r1, r4
 8004dee:	4630      	mov	r0, r6
 8004df0:	f7fc f9ef 	bl	80011d2 <HAL_I2CEx_ConfigAnalogFilter>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004df4:	4621      	mov	r1, r4
 8004df6:	4630      	mov	r0, r6
 8004df8:	e018      	b.n	8004e2c <main+0x310>
 8004dfa:	bf00      	nop
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	48001000 	.word	0x48001000
 8004e04:	48000400 	.word	0x48000400
 8004e08:	48000c00 	.word	0x48000c00
 8004e0c:	48000800 	.word	0x48000800
 8004e10:	10210000 	.word	0x10210000
 8004e14:	2000062c 	.word	0x2000062c
 8004e18:	40016020 	.word	0x40016020
 8004e1c:	20000aec 	.word	0x20000aec
 8004e20:	40005800 	.word	0x40005800
 8004e24:	10909cec 	.word	0x10909cec
 8004e28:	10110000 	.word	0x10110000
 8004e2c:	f7fc f9f7 	bl	800121e <HAL_I2CEx_ConfigDigitalFilter>
  hqspi.Instance = QUADSPI;
 8004e30:	4818      	ldr	r0, [pc, #96]	; (8004e94 <main+0x378>)
  hqspi.Init.ClockPrescaler = 255;
 8004e32:	4919      	ldr	r1, [pc, #100]	; (8004e98 <main+0x37c>)
  hqspi.Init.FifoThreshold = 1;
 8004e34:	6085      	str	r5, [r0, #8]
  hqspi.Init.ClockPrescaler = 255;
 8004e36:	23ff      	movs	r3, #255	; 0xff
 8004e38:	e880 000a 	stmia.w	r0, {r1, r3}
  hqspi.Init.FlashSize = 1;
 8004e3c:	6105      	str	r5, [r0, #16]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8004e3e:	60c4      	str	r4, [r0, #12]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8004e40:	6144      	str	r4, [r0, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8004e42:	6184      	str	r4, [r0, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8004e44:	f7fc fb24 	bl	8001490 <HAL_QSPI_Init>
  huart3.Instance = USART3;
 8004e48:	4814      	ldr	r0, [pc, #80]	; (8004e9c <main+0x380>)
  huart3.Init.BaudRate = 115200;
 8004e4a:	4b15      	ldr	r3, [pc, #84]	; (8004ea0 <main+0x384>)
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004e4c:	6084      	str	r4, [r0, #8]
  huart3.Init.BaudRate = 115200;
 8004e4e:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
 8004e52:	e880 0028 	stmia.w	r0, {r3, r5}
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004e56:	230c      	movs	r3, #12
 8004e58:	6143      	str	r3, [r0, #20]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004e5a:	60c4      	str	r4, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004e5c:	6104      	str	r4, [r0, #16]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e5e:	6184      	str	r4, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e60:	61c4      	str	r4, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004e62:	6204      	str	r4, [r0, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004e64:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004e66:	f7fd ff8a 	bl	8002d7e <HAL_UART_Init>
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004e6a:	480e      	ldr	r0, [pc, #56]	; (8004ea4 <main+0x388>)
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8004e6c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8004e70:	2606      	movs	r6, #6
 8004e72:	e880 0048 	stmia.w	r0, {r3, r6}
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004e76:	60c7      	str	r7, [r0, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004e78:	6187      	str	r7, [r0, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004e7a:	61c4      	str	r4, [r0, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004e7c:	6204      	str	r4, [r0, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004e7e:	6244      	str	r4, [r0, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8004e80:	6284      	str	r4, [r0, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004e82:	6304      	str	r4, [r0, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8004e84:	62c4      	str	r4, [r0, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004e86:	f7fc f9ef 	bl	8001268 <HAL_PCD_Init>
  MX_BlueNRG_MS_Init();
 8004e8a:	f7fe fe1b 	bl	8003ac4 <MX_BlueNRG_MS_Init>
  MX_BlueNRG_MS_Process();
 8004e8e:	f7fe fea3 	bl	8003bd8 <MX_BlueNRG_MS_Process>
 8004e92:	e7fc      	b.n	8004e8e <main+0x372>
 8004e94:	20000b38 	.word	0x20000b38
 8004e98:	a0001000 	.word	0xa0001000
 8004e9c:	20000664 	.word	0x20000664
 8004ea0:	40004800 	.word	0x40004800
 8004ea4:	200006e4 	.word	0x200006e4

08004ea8 <Set_DeviceConnectable>:
 * Input          : None.
 * Output         : None.
 * Return         : None.
 *******************************************************************************/
void Set_DeviceConnectable(void)
{  
 8004ea8:	b570      	push	{r4, r5, r6, lr}
  uint8_t ret;
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004eaa:	4a35      	ldr	r2, [pc, #212]	; (8004f80 <Set_DeviceConnectable+0xd8>)
{  
 8004eac:	b092      	sub	sp, #72	; 0x48
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004eae:	6810      	ldr	r0, [r2, #0]
 8004eb0:	6851      	ldr	r1, [r2, #4]
    
  uint8_t manuf_data[26] = {
 8004eb2:	220a      	movs	r2, #10
 8004eb4:	f88d 202d 	strb.w	r2, [sp, #45]	; 0x2d
 8004eb8:	2209      	movs	r2, #9
 8004eba:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
 8004ebe:	224b      	movs	r2, #75	; 0x4b
 8004ec0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
 8004ec4:	2275      	movs	r2, #117	; 0x75
 8004ec6:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
 8004eca:	2274      	movs	r2, #116	; 0x74
 8004ecc:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
 8004ed0:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
 8004ed4:	225a      	movs	r2, #90	; 0x5a
 8004ed6:	f88d 2035 	strb.w	r2, [sp, #53]	; 0x35
 8004eda:	2248      	movs	r2, #72	; 0x48
 8004edc:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 8004ee0:	224e      	movs	r2, #78	; 0x4e
 8004ee2:	f88d 2037 	strb.w	r2, [sp, #55]	; 0x37
 8004ee6:	220d      	movs	r2, #13
 8004ee8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004eec:	ab09      	add	r3, sp, #36	; 0x24
  uint8_t manuf_data[26] = {
 8004eee:	22ff      	movs	r2, #255	; 0xff
  const char local_name[] = {AD_TYPE_COMPLETE_LOCAL_NAME,SENSOR_DEMO_NAME}; 
 8004ef0:	c303      	stmia	r3!, {r0, r1}
  uint8_t manuf_data[26] = {
 8004ef2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
 8004ef6:	2302      	movs	r3, #2
    0x02,
    0x00,
    0xF4, /* ACC+Gyro+Mag 0xE0 | 0x04 Temp | 0x10 Pressure */
    0x00, /*  */
    0x00, /*  */
    bdaddr[0], /* BLE MAC start */
 8004ef8:	4a22      	ldr	r2, [pc, #136]	; (8004f84 <Set_DeviceConnectable+0xdc>)
  uint8_t manuf_data[26] = {
 8004efa:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8004efe:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
 8004f02:	23f4      	movs	r3, #244	; 0xf4
 8004f04:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
 8004f08:	7813      	ldrb	r3, [r2, #0]
 8004f0a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
 8004f0e:	7853      	ldrb	r3, [r2, #1]
 8004f10:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
 8004f14:	7893      	ldrb	r3, [r2, #2]
 8004f16:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
 8004f1a:	2400      	movs	r4, #0
 8004f1c:	2501      	movs	r5, #1
 8004f1e:	78d3      	ldrb	r3, [r2, #3]
 8004f20:	f88d 402e 	strb.w	r4, [sp, #46]	; 0x2e
 8004f24:	2608      	movs	r6, #8
 8004f26:	f88d 602f 	strb.w	r6, [sp, #47]	; 0x2f
 8004f2a:	f88d 503a 	strb.w	r5, [sp, #58]	; 0x3a
 8004f2e:	f88d 403c 	strb.w	r4, [sp, #60]	; 0x3c
 8004f32:	f88d 403f 	strb.w	r4, [sp, #63]	; 0x3f
 8004f36:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
 8004f3a:	7913      	ldrb	r3, [r2, #4]
 8004f3c:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
    bdaddr[5]  /* BLE MAC stop */
  };
  
  manuf_data[18] |= 0x01; /* Sensor Fusion */
  
  hci_le_set_scan_resp_data(0, NULL);
 8004f40:	4621      	mov	r1, r4
  uint8_t manuf_data[26] = {
 8004f42:	7953      	ldrb	r3, [r2, #5]
 8004f44:	f88d 3045 	strb.w	r3, [sp, #69]	; 0x45
  hci_le_set_scan_resp_data(0, NULL);
 8004f48:	4620      	mov	r0, r4
  manuf_data[18] |= 0x01; /* Sensor Fusion */
 8004f4a:	f88d 503e 	strb.w	r5, [sp, #62]	; 0x3e
  hci_le_set_scan_resp_data(0, NULL);
 8004f4e:	f7fe fbc8 	bl	80036e2 <hci_le_set_scan_resp_data>
  
  PRINTF("Set General Discoverable Mode.\n");
  
  ret = aci_gap_set_discoverable(ADV_DATA_TYPE,
 8004f52:	ab09      	add	r3, sp, #36	; 0x24
 8004f54:	9302      	str	r3, [sp, #8]
 8004f56:	f44f 62f0 	mov.w	r2, #1920	; 0x780
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	9406      	str	r4, [sp, #24]
 8004f5e:	9405      	str	r4, [sp, #20]
 8004f60:	9404      	str	r4, [sp, #16]
 8004f62:	9403      	str	r4, [sp, #12]
 8004f64:	e88d 0050 	stmia.w	sp, {r4, r6}
 8004f68:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	f7fe f8fa 	bl	8003166 <aci_gap_set_discoverable>
                                (ADV_INTERVAL_MIN_MS*1000)/625,(ADV_INTERVAL_MAX_MS*1000)/625,
                                 STATIC_RANDOM_ADDR, NO_WHITE_LIST_USE,
                                 sizeof(local_name), local_name, 0, NULL, 0, 0); 
  
  aci_gap_update_adv_data(26, manuf_data);
 8004f72:	a90b      	add	r1, sp, #44	; 0x2c
 8004f74:	201a      	movs	r0, #26
 8004f76:	f7fe f993 	bl	80032a0 <aci_gap_update_adv_data>
  {
    PRINTF("aci_gap_set_discoverable() failed: 0x%02x\r\n", ret);
  }
  else
    PRINTF("aci_gap_set_discoverable() --> SUCCESS\r\n");
}
 8004f7a:	b012      	add	sp, #72	; 0x48
 8004f7c:	bd70      	pop	{r4, r5, r6, pc}
 8004f7e:	bf00      	nop
 8004f80:	08005600 	.word	0x08005600
 8004f84:	2000058c 	.word	0x2000058c

08004f88 <GAP_DisconnectionComplete_CB>:
 * @param  None 
 * @retval None
 */
void GAP_DisconnectionComplete_CB(void)
{
  connected = FALSE;
 8004f88:	4a04      	ldr	r2, [pc, #16]	; (8004f9c <GAP_DisconnectionComplete_CB+0x14>)
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	6013      	str	r3, [r2, #0]
  PRINTF("Disconnected\n");
  /* Make the device connectable again. */
  set_connectable = TRUE;
 8004f8e:	4a04      	ldr	r2, [pc, #16]	; (8004fa0 <GAP_DisconnectionComplete_CB+0x18>)
 8004f90:	2101      	movs	r1, #1
 8004f92:	7011      	strb	r1, [r2, #0]
  notification_enabled = FALSE;
 8004f94:	4a03      	ldr	r2, [pc, #12]	; (8004fa4 <GAP_DisconnectionComplete_CB+0x1c>)
 8004f96:	7013      	strb	r3, [r2, #0]
 8004f98:	4770      	bx	lr
 8004f9a:	bf00      	nop
 8004f9c:	200004ac 	.word	0x200004ac
 8004fa0:	20000015 	.word	0x20000015
 8004fa4:	200004cc 	.word	0x200004cc

08004fa8 <user_notify>:
  if(hci_pckt->type != HCI_EVENT_PKT)
 8004fa8:	7803      	ldrb	r3, [r0, #0]
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d11c      	bne.n	8004fe8 <user_notify+0x40>
  switch(event_pckt->evt){
 8004fae:	7843      	ldrb	r3, [r0, #1]
 8004fb0:	2b3e      	cmp	r3, #62	; 0x3e
 8004fb2:	d005      	beq.n	8004fc0 <user_notify+0x18>
 8004fb4:	2bff      	cmp	r3, #255	; 0xff
 8004fb6:	d00d      	beq.n	8004fd4 <user_notify+0x2c>
 8004fb8:	2b05      	cmp	r3, #5
 8004fba:	d115      	bne.n	8004fe8 <user_notify+0x40>
      GAP_DisconnectionComplete_CB();
 8004fbc:	f7ff bfe4 	b.w	8004f88 <GAP_DisconnectionComplete_CB>
      switch(evt->subevent){
 8004fc0:	78c3      	ldrb	r3, [r0, #3]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d110      	bne.n	8004fe8 <user_notify+0x40>
 * @param  uint16_t Connection handle
 * @retval None
 */
void GAP_ConnectionComplete_CB(uint8_t addr[6], uint16_t handle)
{  
  connected = TRUE;
 8004fc6:	4909      	ldr	r1, [pc, #36]	; (8004fec <user_notify+0x44>)
          GAP_ConnectionComplete_CB(cc->peer_bdaddr, cc->handle);
 8004fc8:	f8b0 2005 	ldrh.w	r2, [r0, #5]
  connected = TRUE;
 8004fcc:	600b      	str	r3, [r1, #0]
  connection_handle = handle;
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <user_notify+0x48>)
 8004fd0:	801a      	strh	r2, [r3, #0]
 8004fd2:	4770      	bx	lr
      switch(blue_evt->ecode){
 8004fd4:	f8b0 2003 	ldrh.w	r2, [r0, #3]
 8004fd8:	f640 4314 	movw	r3, #3092	; 0xc14
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d103      	bne.n	8004fe8 <user_notify+0x40>
          Read_Request_CB(pr->attr_handle);                    
 8004fe0:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8004fe4:	f7ff bb88 	b.w	80046f8 <Read_Request_CB>
 8004fe8:	4770      	bx	lr
 8004fea:	bf00      	nop
 8004fec:	200004ac 	.word	0x200004ac
 8004ff0:	200004b0 	.word	0x200004b0

08004ff4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ff4:	4b0a      	ldr	r3, [pc, #40]	; (8005020 <HAL_MspInit+0x2c>)
 8004ff6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	661a      	str	r2, [r3, #96]	; 0x60
 8004ffe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8005000:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	f002 0201 	and.w	r2, r2, #1
 8005006:	9200      	str	r2, [sp, #0]
 8005008:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800500a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800500c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005010:	659a      	str	r2, [r3, #88]	; 0x58
 8005012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005018:	9301      	str	r3, [sp, #4]
 800501a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800501c:	b002      	add	sp, #8
 800501e:	4770      	bx	lr
 8005020:	40021000 	.word	0x40021000

08005024 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8005024:	b500      	push	{lr}
 8005026:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	2214      	movs	r2, #20
 800502a:	2100      	movs	r1, #0
 800502c:	a803      	add	r0, sp, #12
 800502e:	f000 f9f8 	bl	8005422 <memset>
  if(DFSDM1_Init == 0)
 8005032:	4b13      	ldr	r3, [pc, #76]	; (8005080 <HAL_DFSDM_ChannelMspInit+0x5c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	bb03      	cbnz	r3, 800507a <HAL_DFSDM_ChannelMspInit+0x56>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005038:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800503c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005040:	a903      	add	r1, sp, #12
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005042:	6e1a      	ldr	r2, [r3, #96]	; 0x60
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005044:	480f      	ldr	r0, [pc, #60]	; (8005084 <HAL_DFSDM_ChannelMspInit+0x60>)
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005046:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800504a:	661a      	str	r2, [r3, #96]	; 0x60
 800504c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800504e:	f002 7280 	and.w	r2, r2, #16777216	; 0x1000000
 8005052:	9201      	str	r2, [sp, #4]
 8005054:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005056:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005058:	f042 0210 	orr.w	r2, r2, #16
 800505c:	64da      	str	r2, [r3, #76]	; 0x4c
 800505e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	9302      	str	r3, [sp, #8]
 8005066:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8005068:	f44f 7320 	mov.w	r3, #640	; 0x280
 800506c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800506e:	2302      	movs	r3, #2
 8005070:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8005072:	2306      	movs	r3, #6
 8005074:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005076:	f7fb fed7 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  }

}
 800507a:	b009      	add	sp, #36	; 0x24
 800507c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005080:	200004e8 	.word	0x200004e8
 8005084:	48001000 	.word	0x48001000

08005088 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005088:	b510      	push	{r4, lr}
 800508a:	4604      	mov	r4, r0
 800508c:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800508e:	2214      	movs	r2, #20
 8005090:	2100      	movs	r1, #0
 8005092:	a803      	add	r0, sp, #12
 8005094:	f000 f9c5 	bl	8005422 <memset>
  if(hi2c->Instance==I2C2)
 8005098:	6822      	ldr	r2, [r4, #0]
 800509a:	4b13      	ldr	r3, [pc, #76]	; (80050e8 <HAL_I2C_MspInit+0x60>)
 800509c:	429a      	cmp	r2, r3
 800509e:	d121      	bne.n	80050e4 <HAL_I2C_MspInit+0x5c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a0:	4c12      	ldr	r4, [pc, #72]	; (80050ec <HAL_I2C_MspInit+0x64>)
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050a2:	4813      	ldr	r0, [pc, #76]	; (80050f0 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050a4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80050a6:	f043 0302 	orr.w	r3, r3, #2
 80050aa:	64e3      	str	r3, [r4, #76]	; 0x4c
 80050ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	9301      	str	r3, [sp, #4]
 80050b4:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = INTERNAL_I2C2_SCL_Pin|INTERNAL_I2C2_SDA_Pin;
 80050b6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80050ba:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050bc:	2312      	movs	r3, #18
 80050be:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050c0:	2301      	movs	r3, #1
 80050c2:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050c4:	2303      	movs	r3, #3
 80050c6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80050ca:	2304      	movs	r3, #4
 80050cc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050ce:	f7fb feab 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80050d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80050da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80050dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050e0:	9302      	str	r3, [sp, #8]
 80050e2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80050e4:	b008      	add	sp, #32
 80050e6:	bd10      	pop	{r4, pc}
 80050e8:	40005800 	.word	0x40005800
 80050ec:	40021000 	.word	0x40021000
 80050f0:	48000400 	.word	0x48000400

080050f4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80050f4:	b510      	push	{r4, lr}
 80050f6:	4604      	mov	r4, r0
 80050f8:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050fa:	2214      	movs	r2, #20
 80050fc:	2100      	movs	r1, #0
 80050fe:	a803      	add	r0, sp, #12
 8005100:	f000 f98f 	bl	8005422 <memset>
  if(hqspi->Instance==QUADSPI)
 8005104:	6822      	ldr	r2, [r4, #0]
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <HAL_QSPI_MspInit+0x64>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d122      	bne.n	8005152 <HAL_QSPI_MspInit+0x5e>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800510c:	f103 4320 	add.w	r3, r3, #2684354560	; 0xa0000000
 8005110:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005114:	a903      	add	r1, sp, #12
    __HAL_RCC_QSPI_CLK_ENABLE();
 8005116:	6d1a      	ldr	r2, [r3, #80]	; 0x50
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005118:	4810      	ldr	r0, [pc, #64]	; (800515c <HAL_QSPI_MspInit+0x68>)
    __HAL_RCC_QSPI_CLK_ENABLE();
 800511a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800511e:	651a      	str	r2, [r3, #80]	; 0x50
 8005120:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005122:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8005126:	9201      	str	r2, [sp, #4]
 8005128:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800512a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800512c:	f042 0210 	orr.w	r2, r2, #16
 8005130:	64da      	str	r2, [r3, #76]	; 0x4c
 8005132:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	9302      	str	r3, [sp, #8]
 800513a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin 
 800513c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005140:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005142:	2302      	movs	r3, #2
 8005144:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005146:	2303      	movs	r3, #3
 8005148:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800514a:	230a      	movs	r3, #10
 800514c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800514e:	f7fb fe6b 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8005152:	b008      	add	sp, #32
 8005154:	bd10      	pop	{r4, pc}
 8005156:	bf00      	nop
 8005158:	a0001000 	.word	0xa0001000
 800515c:	48001000 	.word	0x48001000

08005160 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005166:	2214      	movs	r2, #20
 8005168:	2100      	movs	r1, #0
 800516a:	a803      	add	r0, sp, #12
 800516c:	f000 f959 	bl	8005422 <memset>
  if(huart->Instance==USART3)
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <HAL_UART_MspInit+0x60>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d120      	bne.n	80051ba <HAL_UART_MspInit+0x5a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005178:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800517c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART3_CLK_ENABLE();
 800517e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005180:	4810      	ldr	r0, [pc, #64]	; (80051c4 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART3_CLK_ENABLE();
 8005182:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005186:	659a      	str	r2, [r3, #88]	; 0x58
 8005188:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800518a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 800518e:	9201      	str	r2, [sp, #4]
 8005190:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005192:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005194:	f042 0208 	orr.w	r2, r2, #8
 8005198:	64da      	str	r2, [r3, #76]	; 0x4c
 800519a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800519c:	f003 0308 	and.w	r3, r3, #8
 80051a0:	9302      	str	r3, [sp, #8]
 80051a2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 80051a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80051a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051aa:	2302      	movs	r3, #2
 80051ac:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051ae:	2303      	movs	r3, #3
 80051b0:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80051b2:	2307      	movs	r3, #7
 80051b4:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80051b6:	f7fb fe37 	bl	8000e28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80051ba:	b008      	add	sp, #32
 80051bc:	bd10      	pop	{r4, pc}
 80051be:	bf00      	nop
 80051c0:	40004800 	.word	0x40004800
 80051c4:	48000c00 	.word	0x48000c00

080051c8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4604      	mov	r4, r0
 80051cc:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051ce:	2214      	movs	r2, #20
 80051d0:	2100      	movs	r1, #0
 80051d2:	a803      	add	r0, sp, #12
 80051d4:	f000 f925 	bl	8005422 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80051d8:	6823      	ldr	r3, [r4, #0]
 80051da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80051de:	d13c      	bne.n	800525a <HAL_PCD_MspInit+0x92>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e0:	4c20      	ldr	r4, [pc, #128]	; (8005264 <HAL_PCD_MspInit+0x9c>)
 80051e2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80051ea:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	9300      	str	r3, [sp, #0]
 80051f2:	9b00      	ldr	r3, [sp, #0]
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80051f4:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80051f6:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80051fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80051fe:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8005200:	f7fb fe12 	bl	8000e28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8005204:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005208:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520a:	2302      	movs	r3, #2
 800520c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800520e:	2300      	movs	r3, #0
 8005210:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005212:	2303      	movs	r3, #3
 8005214:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005216:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8005218:	230a      	movs	r3, #10
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800521e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005220:	f7fb fe02 	bl	8000e28 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005224:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8005226:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800522a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800522c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800522e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005232:	9301      	str	r3, [sp, #4]
 8005234:	9b01      	ldr	r3, [sp, #4]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005236:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005238:	00db      	lsls	r3, r3, #3
 800523a:	d410      	bmi.n	800525e <HAL_PCD_MspInit+0x96>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800523c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800523e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005242:	65a3      	str	r3, [r4, #88]	; 0x58
 8005244:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800524a:	9302      	str	r3, [sp, #8]
 800524c:	9b02      	ldr	r3, [sp, #8]
      HAL_PWREx_EnableVddUSB();
 800524e:	f7fc f8f1 	bl	8001434 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005252:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005254:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005258:	65a3      	str	r3, [r4, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800525a:	b008      	add	sp, #32
 800525c:	bd10      	pop	{r4, pc}
      HAL_PWREx_EnableVddUSB();
 800525e:	f7fc f8e9 	bl	8001434 <HAL_PWREx_EnableVddUSB>
}
 8005262:	e7fa      	b.n	800525a <HAL_PCD_MspInit+0x92>
 8005264:	40021000 	.word	0x40021000

08005268 <NMI_Handler>:
 8005268:	4770      	bx	lr

0800526a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800526a:	e7fe      	b.n	800526a <HardFault_Handler>

0800526c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800526c:	e7fe      	b.n	800526c <MemManage_Handler>

0800526e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800526e:	e7fe      	b.n	800526e <BusFault_Handler>

08005270 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005270:	e7fe      	b.n	8005270 <UsageFault_Handler>

08005272 <SVC_Handler>:
 8005272:	4770      	bx	lr

08005274 <DebugMon_Handler>:
 8005274:	4770      	bx	lr

08005276 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005276:	4770      	bx	lr

08005278 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005278:	f7fb bc5c 	b.w	8000b34 <HAL_IncTick>

0800527c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800527c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 800527e:	2020      	movs	r0, #32
 8005280:	f7fb ff4a 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_6);
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <EXTI9_5_IRQHandler+0x20>)
 8005286:	f7fb fdb7 	bl	8000df8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800528a:	2080      	movs	r0, #128	; 0x80
 800528c:	f7fb ff44 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005290:	f44f 7080 	mov.w	r0, #256	; 0x100
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005294:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 8005298:	f7fb bf3e 	b.w	8001118 <HAL_GPIO_EXTI_IRQHandler>
 800529c:	20000624 	.word	0x20000624

080052a0 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052a0:	4801      	ldr	r0, [pc, #4]	; (80052a8 <USART1_IRQHandler+0x8>)
 80052a2:	f7fd ba81 	b.w	80027a8 <HAL_UART_IRQHandler>
 80052a6:	bf00      	nop
 80052a8:	200004f8 	.word	0x200004f8

080052ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80052ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80052ae:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80052b2:	f7fb ff31 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80052b6:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80052ba:	f7fb ff2d 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_EXTI_IRQHandler(&H_EXTI_13);
 80052be:	4806      	ldr	r0, [pc, #24]	; (80052d8 <EXTI15_10_IRQHandler+0x2c>)
 80052c0:	f7fb fd9a 	bl	8000df8 <HAL_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 80052c4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80052c8:	f7fb ff26 	bl	8001118 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80052cc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80052d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 80052d4:	f7fb bf20 	b.w	8001118 <HAL_GPIO_EXTI_IRQHandler>
 80052d8:	20000004 	.word	0x20000004

080052dc <SPI3_IRQHandler>:
void SPI3_IRQHandler(void)
{
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80052dc:	4801      	ldr	r0, [pc, #4]	; (80052e4 <SPI3_IRQHandler+0x8>)
 80052de:	f7fd b9c9 	b.w	8002674 <HAL_SPI_IRQHandler>
 80052e2:	bf00      	nop
 80052e4:	20000594 	.word	0x20000594

080052e8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80052e8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <_sbrk+0x2c>)
 80052ec:	6819      	ldr	r1, [r3, #0]
{
 80052ee:	4602      	mov	r2, r0
	if (heap_end == 0)
 80052f0:	b909      	cbnz	r1, 80052f6 <_sbrk+0xe>
		heap_end = &end;
 80052f2:	4909      	ldr	r1, [pc, #36]	; (8005318 <_sbrk+0x30>)
 80052f4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80052f6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80052f8:	4669      	mov	r1, sp
 80052fa:	4402      	add	r2, r0
 80052fc:	428a      	cmp	r2, r1
 80052fe:	d906      	bls.n	800530e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8005300:	f000 f85a 	bl	80053b8 <__errno>
 8005304:	230c      	movs	r3, #12
 8005306:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800530e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8005310:	bd08      	pop	{r3, pc}
 8005312:	bf00      	nop
 8005314:	200004ec 	.word	0x200004ec
 8005318:	20000b80 	.word	0x20000b80

0800531c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800531c:	490f      	ldr	r1, [pc, #60]	; (800535c <SystemInit+0x40>)
 800531e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005322:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800532a:	4b0d      	ldr	r3, [pc, #52]	; (8005360 <SystemInit+0x44>)
 800532c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 800532e:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8005330:	f042 0201 	orr.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8005336:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800533e:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8005342:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8005344:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005348:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005350:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005352:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005354:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005358:	608b      	str	r3, [r1, #8]
 800535a:	4770      	bx	lr
 800535c:	e000ed00 	.word	0xe000ed00
 8005360:	40021000 	.word	0x40021000

08005364 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800539c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005368:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800536a:	e003      	b.n	8005374 <LoopCopyDataInit>

0800536c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800536c:	4b0c      	ldr	r3, [pc, #48]	; (80053a0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800536e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005370:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8005372:	3104      	adds	r1, #4

08005374 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8005374:	480b      	ldr	r0, [pc, #44]	; (80053a4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8005376:	4b0c      	ldr	r3, [pc, #48]	; (80053a8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8005378:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800537a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800537c:	d3f6      	bcc.n	800536c <CopyDataInit>
	ldr	r2, =_sbss
 800537e:	4a0b      	ldr	r2, [pc, #44]	; (80053ac <LoopForever+0x12>)
	b	LoopFillZerobss
 8005380:	e002      	b.n	8005388 <LoopFillZerobss>

08005382 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8005382:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8005384:	f842 3b04 	str.w	r3, [r2], #4

08005388 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005388:	4b09      	ldr	r3, [pc, #36]	; (80053b0 <LoopForever+0x16>)
	cmp	r2, r3
 800538a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800538c:	d3f9      	bcc.n	8005382 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800538e:	f7ff ffc5 	bl	800531c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005392:	f000 f817 	bl	80053c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005396:	f7ff fbc1 	bl	8004b1c <main>

0800539a <LoopForever>:

LoopForever:
    b LoopForever
 800539a:	e7fe      	b.n	800539a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800539c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80053a0:	0800567c 	.word	0x0800567c
	ldr	r0, =_sdata
 80053a4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80053a8:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80053ac:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80053b0:	20000b80 	.word	0x20000b80

080053b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80053b4:	e7fe      	b.n	80053b4 <ADC1_2_IRQHandler>
	...

080053b8 <__errno>:
 80053b8:	4b01      	ldr	r3, [pc, #4]	; (80053c0 <__errno+0x8>)
 80053ba:	6818      	ldr	r0, [r3, #0]
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	2000001c 	.word	0x2000001c

080053c4 <__libc_init_array>:
 80053c4:	b570      	push	{r4, r5, r6, lr}
 80053c6:	4e0d      	ldr	r6, [pc, #52]	; (80053fc <__libc_init_array+0x38>)
 80053c8:	4c0d      	ldr	r4, [pc, #52]	; (8005400 <__libc_init_array+0x3c>)
 80053ca:	1ba4      	subs	r4, r4, r6
 80053cc:	10a4      	asrs	r4, r4, #2
 80053ce:	2500      	movs	r5, #0
 80053d0:	42a5      	cmp	r5, r4
 80053d2:	d109      	bne.n	80053e8 <__libc_init_array+0x24>
 80053d4:	4e0b      	ldr	r6, [pc, #44]	; (8005404 <__libc_init_array+0x40>)
 80053d6:	4c0c      	ldr	r4, [pc, #48]	; (8005408 <__libc_init_array+0x44>)
 80053d8:	f000 f906 	bl	80055e8 <_init>
 80053dc:	1ba4      	subs	r4, r4, r6
 80053de:	10a4      	asrs	r4, r4, #2
 80053e0:	2500      	movs	r5, #0
 80053e2:	42a5      	cmp	r5, r4
 80053e4:	d105      	bne.n	80053f2 <__libc_init_array+0x2e>
 80053e6:	bd70      	pop	{r4, r5, r6, pc}
 80053e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053ec:	4798      	blx	r3
 80053ee:	3501      	adds	r5, #1
 80053f0:	e7ee      	b.n	80053d0 <__libc_init_array+0xc>
 80053f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80053f6:	4798      	blx	r3
 80053f8:	3501      	adds	r5, #1
 80053fa:	e7f2      	b.n	80053e2 <__libc_init_array+0x1e>
 80053fc:	08005674 	.word	0x08005674
 8005400:	08005674 	.word	0x08005674
 8005404:	08005674 	.word	0x08005674
 8005408:	08005678 	.word	0x08005678

0800540c <memcpy>:
 800540c:	b510      	push	{r4, lr}
 800540e:	1e43      	subs	r3, r0, #1
 8005410:	440a      	add	r2, r1
 8005412:	4291      	cmp	r1, r2
 8005414:	d100      	bne.n	8005418 <memcpy+0xc>
 8005416:	bd10      	pop	{r4, pc}
 8005418:	f811 4b01 	ldrb.w	r4, [r1], #1
 800541c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005420:	e7f7      	b.n	8005412 <memcpy+0x6>

08005422 <memset>:
 8005422:	4402      	add	r2, r0
 8005424:	4603      	mov	r3, r0
 8005426:	4293      	cmp	r3, r2
 8005428:	d100      	bne.n	800542c <memset+0xa>
 800542a:	4770      	bx	lr
 800542c:	f803 1b01 	strb.w	r1, [r3], #1
 8005430:	e7f9      	b.n	8005426 <memset+0x4>
	...

08005434 <srand>:
 8005434:	b538      	push	{r3, r4, r5, lr}
 8005436:	4b12      	ldr	r3, [pc, #72]	; (8005480 <srand+0x4c>)
 8005438:	681c      	ldr	r4, [r3, #0]
 800543a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800543c:	4605      	mov	r5, r0
 800543e:	b9d3      	cbnz	r3, 8005476 <srand+0x42>
 8005440:	2018      	movs	r0, #24
 8005442:	f000 f859 	bl	80054f8 <malloc>
 8005446:	f243 330e 	movw	r3, #13070	; 0x330e
 800544a:	63a0      	str	r0, [r4, #56]	; 0x38
 800544c:	8003      	strh	r3, [r0, #0]
 800544e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8005452:	8043      	strh	r3, [r0, #2]
 8005454:	f241 2334 	movw	r3, #4660	; 0x1234
 8005458:	8083      	strh	r3, [r0, #4]
 800545a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 800545e:	80c3      	strh	r3, [r0, #6]
 8005460:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8005464:	8103      	strh	r3, [r0, #8]
 8005466:	2305      	movs	r3, #5
 8005468:	8143      	strh	r3, [r0, #10]
 800546a:	230b      	movs	r3, #11
 800546c:	8183      	strh	r3, [r0, #12]
 800546e:	2201      	movs	r2, #1
 8005470:	2300      	movs	r3, #0
 8005472:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8005476:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005478:	2200      	movs	r2, #0
 800547a:	611d      	str	r5, [r3, #16]
 800547c:	615a      	str	r2, [r3, #20]
 800547e:	bd38      	pop	{r3, r4, r5, pc}
 8005480:	2000001c 	.word	0x2000001c

08005484 <rand>:
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <rand+0x68>)
 8005486:	b510      	push	{r4, lr}
 8005488:	681c      	ldr	r4, [r3, #0]
 800548a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800548c:	b9d3      	cbnz	r3, 80054c4 <rand+0x40>
 800548e:	2018      	movs	r0, #24
 8005490:	f000 f832 	bl	80054f8 <malloc>
 8005494:	f243 330e 	movw	r3, #13070	; 0x330e
 8005498:	63a0      	str	r0, [r4, #56]	; 0x38
 800549a:	8003      	strh	r3, [r0, #0]
 800549c:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80054a0:	8043      	strh	r3, [r0, #2]
 80054a2:	f241 2334 	movw	r3, #4660	; 0x1234
 80054a6:	8083      	strh	r3, [r0, #4]
 80054a8:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80054ac:	80c3      	strh	r3, [r0, #6]
 80054ae:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80054b2:	8103      	strh	r3, [r0, #8]
 80054b4:	2305      	movs	r3, #5
 80054b6:	8143      	strh	r3, [r0, #10]
 80054b8:	230b      	movs	r3, #11
 80054ba:	8183      	strh	r3, [r0, #12]
 80054bc:	2201      	movs	r2, #1
 80054be:	2300      	movs	r3, #0
 80054c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80054c4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80054c6:	480a      	ldr	r0, [pc, #40]	; (80054f0 <rand+0x6c>)
 80054c8:	690a      	ldr	r2, [r1, #16]
 80054ca:	694b      	ldr	r3, [r1, #20]
 80054cc:	4c09      	ldr	r4, [pc, #36]	; (80054f4 <rand+0x70>)
 80054ce:	4350      	muls	r0, r2
 80054d0:	fb04 0003 	mla	r0, r4, r3, r0
 80054d4:	fba2 2304 	umull	r2, r3, r2, r4
 80054d8:	3201      	adds	r2, #1
 80054da:	4403      	add	r3, r0
 80054dc:	f143 0300 	adc.w	r3, r3, #0
 80054e0:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80054e4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 80054e8:	bd10      	pop	{r4, pc}
 80054ea:	bf00      	nop
 80054ec:	2000001c 	.word	0x2000001c
 80054f0:	5851f42d 	.word	0x5851f42d
 80054f4:	4c957f2d 	.word	0x4c957f2d

080054f8 <malloc>:
 80054f8:	4b02      	ldr	r3, [pc, #8]	; (8005504 <malloc+0xc>)
 80054fa:	4601      	mov	r1, r0
 80054fc:	6818      	ldr	r0, [r3, #0]
 80054fe:	f000 b803 	b.w	8005508 <_malloc_r>
 8005502:	bf00      	nop
 8005504:	2000001c 	.word	0x2000001c

08005508 <_malloc_r>:
 8005508:	b570      	push	{r4, r5, r6, lr}
 800550a:	1ccd      	adds	r5, r1, #3
 800550c:	f025 0503 	bic.w	r5, r5, #3
 8005510:	3508      	adds	r5, #8
 8005512:	2d0c      	cmp	r5, #12
 8005514:	bf38      	it	cc
 8005516:	250c      	movcc	r5, #12
 8005518:	2d00      	cmp	r5, #0
 800551a:	4606      	mov	r6, r0
 800551c:	db01      	blt.n	8005522 <_malloc_r+0x1a>
 800551e:	42a9      	cmp	r1, r5
 8005520:	d903      	bls.n	800552a <_malloc_r+0x22>
 8005522:	230c      	movs	r3, #12
 8005524:	6033      	str	r3, [r6, #0]
 8005526:	2000      	movs	r0, #0
 8005528:	bd70      	pop	{r4, r5, r6, pc}
 800552a:	f000 f85b 	bl	80055e4 <__malloc_lock>
 800552e:	4a23      	ldr	r2, [pc, #140]	; (80055bc <_malloc_r+0xb4>)
 8005530:	6814      	ldr	r4, [r2, #0]
 8005532:	4621      	mov	r1, r4
 8005534:	b991      	cbnz	r1, 800555c <_malloc_r+0x54>
 8005536:	4c22      	ldr	r4, [pc, #136]	; (80055c0 <_malloc_r+0xb8>)
 8005538:	6823      	ldr	r3, [r4, #0]
 800553a:	b91b      	cbnz	r3, 8005544 <_malloc_r+0x3c>
 800553c:	4630      	mov	r0, r6
 800553e:	f000 f841 	bl	80055c4 <_sbrk_r>
 8005542:	6020      	str	r0, [r4, #0]
 8005544:	4629      	mov	r1, r5
 8005546:	4630      	mov	r0, r6
 8005548:	f000 f83c 	bl	80055c4 <_sbrk_r>
 800554c:	1c43      	adds	r3, r0, #1
 800554e:	d126      	bne.n	800559e <_malloc_r+0x96>
 8005550:	230c      	movs	r3, #12
 8005552:	6033      	str	r3, [r6, #0]
 8005554:	4630      	mov	r0, r6
 8005556:	f000 f846 	bl	80055e6 <__malloc_unlock>
 800555a:	e7e4      	b.n	8005526 <_malloc_r+0x1e>
 800555c:	680b      	ldr	r3, [r1, #0]
 800555e:	1b5b      	subs	r3, r3, r5
 8005560:	d41a      	bmi.n	8005598 <_malloc_r+0x90>
 8005562:	2b0b      	cmp	r3, #11
 8005564:	d90f      	bls.n	8005586 <_malloc_r+0x7e>
 8005566:	600b      	str	r3, [r1, #0]
 8005568:	50cd      	str	r5, [r1, r3]
 800556a:	18cc      	adds	r4, r1, r3
 800556c:	4630      	mov	r0, r6
 800556e:	f000 f83a 	bl	80055e6 <__malloc_unlock>
 8005572:	f104 000b 	add.w	r0, r4, #11
 8005576:	1d23      	adds	r3, r4, #4
 8005578:	f020 0007 	bic.w	r0, r0, #7
 800557c:	1ac3      	subs	r3, r0, r3
 800557e:	d01b      	beq.n	80055b8 <_malloc_r+0xb0>
 8005580:	425a      	negs	r2, r3
 8005582:	50e2      	str	r2, [r4, r3]
 8005584:	bd70      	pop	{r4, r5, r6, pc}
 8005586:	428c      	cmp	r4, r1
 8005588:	bf0d      	iteet	eq
 800558a:	6863      	ldreq	r3, [r4, #4]
 800558c:	684b      	ldrne	r3, [r1, #4]
 800558e:	6063      	strne	r3, [r4, #4]
 8005590:	6013      	streq	r3, [r2, #0]
 8005592:	bf18      	it	ne
 8005594:	460c      	movne	r4, r1
 8005596:	e7e9      	b.n	800556c <_malloc_r+0x64>
 8005598:	460c      	mov	r4, r1
 800559a:	6849      	ldr	r1, [r1, #4]
 800559c:	e7ca      	b.n	8005534 <_malloc_r+0x2c>
 800559e:	1cc4      	adds	r4, r0, #3
 80055a0:	f024 0403 	bic.w	r4, r4, #3
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d005      	beq.n	80055b4 <_malloc_r+0xac>
 80055a8:	1a21      	subs	r1, r4, r0
 80055aa:	4630      	mov	r0, r6
 80055ac:	f000 f80a 	bl	80055c4 <_sbrk_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d0cd      	beq.n	8005550 <_malloc_r+0x48>
 80055b4:	6025      	str	r5, [r4, #0]
 80055b6:	e7d9      	b.n	800556c <_malloc_r+0x64>
 80055b8:	bd70      	pop	{r4, r5, r6, pc}
 80055ba:	bf00      	nop
 80055bc:	200004f0 	.word	0x200004f0
 80055c0:	200004f4 	.word	0x200004f4

080055c4 <_sbrk_r>:
 80055c4:	b538      	push	{r3, r4, r5, lr}
 80055c6:	4c06      	ldr	r4, [pc, #24]	; (80055e0 <_sbrk_r+0x1c>)
 80055c8:	2300      	movs	r3, #0
 80055ca:	4605      	mov	r5, r0
 80055cc:	4608      	mov	r0, r1
 80055ce:	6023      	str	r3, [r4, #0]
 80055d0:	f7ff fe8a 	bl	80052e8 <_sbrk>
 80055d4:	1c43      	adds	r3, r0, #1
 80055d6:	d102      	bne.n	80055de <_sbrk_r+0x1a>
 80055d8:	6823      	ldr	r3, [r4, #0]
 80055da:	b103      	cbz	r3, 80055de <_sbrk_r+0x1a>
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	bd38      	pop	{r3, r4, r5, pc}
 80055e0:	20000b7c 	.word	0x20000b7c

080055e4 <__malloc_lock>:
 80055e4:	4770      	bx	lr

080055e6 <__malloc_unlock>:
 80055e6:	4770      	bx	lr

080055e8 <_init>:
 80055e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ea:	bf00      	nop
 80055ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ee:	bc08      	pop	{r3}
 80055f0:	469e      	mov	lr, r3
 80055f2:	4770      	bx	lr

080055f4 <_fini>:
 80055f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f6:	bf00      	nop
 80055f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fa:	bc08      	pop	{r3}
 80055fc:	469e      	mov	lr, r3
 80055fe:	4770      	bx	lr
